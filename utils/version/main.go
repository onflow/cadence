/*
 * Cadence - The resource-oriented smart contract programming language
 *
 * Copyright Flow Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generates a Go file version.go with a constant variableName,
// which contains the current semantic version as a string literal.
// The version is the latest Git tag,
// or the version specified in the existing file,
// whichever is higher.
package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"os/exec"
	"strings"

	"golang.org/x/mod/semver"
)

const template string = `// Code generated by utils/version. DO NOT EDIT.
/*
 * Cadence - The resource-oriented smart contract programming language
 *
 * Copyright Flow Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

%s

package cadence

const %s = "%s"
`

// NOTE: must be formatted/injected , as otherwise
// it will be detected itself as a go generate invocation itself
const goGenerateComment = "//go:generate go run ./utils/version/main.go"

const target = "version.go"

const variableName = "Version"

func main() {
	fileVersion := getFileVersion()

	gitVersion := getLastGitTag()

	version := fileVersion

	if semver.Compare(gitVersion, fileVersion) > 0 {
		version = gitVersion
	}

	f, err := os.Create(target)
	if err != nil {
		panic(fmt.Errorf("could not create file %s: %w\n", target, err))
	}
	defer func() {
		_ = f.Close()
	}()

	_, err = f.WriteString(fmt.Sprintf(template, goGenerateComment, variableName, version))
	if err != nil {
		panic(fmt.Errorf("could not write to %s: %w\n", target, err))
	}
}

func getFileVersion() string {
	file, err := os.ReadFile(target)
	if err != nil {
		panic(fmt.Errorf("failed to read file %s: %w", target, err))
	}

	fs := token.NewFileSet()
	parseTree, err := parser.ParseFile(fs, target, file, parser.AllErrors)
	if err != nil {
		panic(fmt.Errorf("failed to parse file %s: %w", target, err))
	}

	for _, decl := range parseTree.Decls {
		genDecl, ok := decl.(*ast.GenDecl)
		if !ok {
			continue
		}

		if len(genDecl.Specs) != 1 {
			continue
		}

		valueSpec, ok := genDecl.Specs[0].(*ast.ValueSpec)
		if !ok {
			continue
		}

		if len(valueSpec.Names) != 1 {
			continue
		}

		if valueSpec.Names[0].Name != variableName {
			continue
		}

		if len(valueSpec.Values) != 1 {
			continue
		}

		value := valueSpec.Values[0]

		lit, ok := value.(*ast.BasicLit)
		if !ok || lit.Kind != token.STRING {
			continue
		}

		return lit.Value[1 : len(lit.Value)-1]
	}

	panic(fmt.Errorf("failed to find string constant %s", variableName))
}

func getLastGitTag() string {
	gitOutput, err := exec.Command("git", "describe", "--tags", "--match", `v*`, "--abbrev=0").Output()
	if err != nil {
		panic(fmt.Errorf("could not get last tag: %w", err))
	}

	return strings.TrimSpace(string(gitOutput))
}
