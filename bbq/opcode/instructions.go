// Code generated by gen/main.go from instructions.yml. DO NOT EDIT.

package opcode

import (
	"strings"

	"github.com/onflow/cadence/bbq/constant"
	"github.com/onflow/cadence/common"
	"github.com/onflow/cadence/errors"
	"github.com/onflow/cadence/interpreter"
)

// InstructionUnknown
//
// An unknown instruction.
type InstructionUnknown struct {
}

var _ Instruction = InstructionUnknown{}

func (InstructionUnknown) Opcode() Opcode {
	return Unknown
}

func (i InstructionUnknown) String() string {
	return i.Opcode().String()
}

func (i InstructionUnknown) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionUnknown) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionUnknown) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionGetLocal
//
// Pushes the value of the local at the given index onto the stack.
type InstructionGetLocal struct {
	Local uint16
}

var _ Instruction = InstructionGetLocal{}

func (InstructionGetLocal) Opcode() Opcode {
	return GetLocal
}

func (i InstructionGetLocal) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionGetLocal) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "local", i.Local, colorize)
}

func (i InstructionGetLocal) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "local", i.Local, colorize)
}

func (i InstructionGetLocal) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Local)
}

func DecodeGetLocal(ip *uint16, code []byte) (i InstructionGetLocal) {
	i.Local = decodeUint16(ip, code)
	return i
}

// InstructionSetLocal
//
// Pops a value off the stack and then sets the local at the given index to that value.
type InstructionSetLocal struct {
	Local uint16
}

var _ Instruction = InstructionSetLocal{}

func (InstructionSetLocal) Opcode() Opcode {
	return SetLocal
}

func (i InstructionSetLocal) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionSetLocal) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "local", i.Local, colorize)
}

func (i InstructionSetLocal) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "local", i.Local, colorize)
}

func (i InstructionSetLocal) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Local)
}

func DecodeSetLocal(ip *uint16, code []byte) (i InstructionSetLocal) {
	i.Local = decodeUint16(ip, code)
	return i
}

// InstructionGetUpvalue
//
// Pushes the value of the upvalue at the given index onto the stack.
type InstructionGetUpvalue struct {
	Upvalue uint16
}

var _ Instruction = InstructionGetUpvalue{}

func (InstructionGetUpvalue) Opcode() Opcode {
	return GetUpvalue
}

func (i InstructionGetUpvalue) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionGetUpvalue) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "upvalue", i.Upvalue, colorize)
}

func (i InstructionGetUpvalue) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "upvalue", i.Upvalue, colorize)
}

func (i InstructionGetUpvalue) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Upvalue)
}

func DecodeGetUpvalue(ip *uint16, code []byte) (i InstructionGetUpvalue) {
	i.Upvalue = decodeUint16(ip, code)
	return i
}

// InstructionSetUpvalue
//
// Pops a value off the stack and then sets the upvalue at the given index to that value.
type InstructionSetUpvalue struct {
	Upvalue uint16
}

var _ Instruction = InstructionSetUpvalue{}

func (InstructionSetUpvalue) Opcode() Opcode {
	return SetUpvalue
}

func (i InstructionSetUpvalue) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionSetUpvalue) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "upvalue", i.Upvalue, colorize)
}

func (i InstructionSetUpvalue) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "upvalue", i.Upvalue, colorize)
}

func (i InstructionSetUpvalue) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Upvalue)
}

func DecodeSetUpvalue(ip *uint16, code []byte) (i InstructionSetUpvalue) {
	i.Upvalue = decodeUint16(ip, code)
	return i
}

// InstructionCloseUpvalue
//
// Closes the upvalue for the local at the given index.
type InstructionCloseUpvalue struct {
	Local uint16
}

var _ Instruction = InstructionCloseUpvalue{}

func (InstructionCloseUpvalue) Opcode() Opcode {
	return CloseUpvalue
}

func (i InstructionCloseUpvalue) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionCloseUpvalue) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "local", i.Local, colorize)
}

func (i InstructionCloseUpvalue) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "local", i.Local, colorize)
}

func (i InstructionCloseUpvalue) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Local)
}

func DecodeCloseUpvalue(ip *uint16, code []byte) (i InstructionCloseUpvalue) {
	i.Local = decodeUint16(ip, code)
	return i
}

// InstructionGetGlobal
//
// Pushes the value of the global at the given index onto the stack.
type InstructionGetGlobal struct {
	Global uint16
}

var _ Instruction = InstructionGetGlobal{}

func (InstructionGetGlobal) Opcode() Opcode {
	return GetGlobal
}

func (i InstructionGetGlobal) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionGetGlobal) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "global", i.Global, colorize)
}

func (i InstructionGetGlobal) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "global", i.Global, colorize)
}

func (i InstructionGetGlobal) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Global)
}

func DecodeGetGlobal(ip *uint16, code []byte) (i InstructionGetGlobal) {
	i.Global = decodeUint16(ip, code)
	return i
}

// InstructionSetGlobal
//
// Pops a value off the stack and then sets the global at the given index to that value.
type InstructionSetGlobal struct {
	Global uint16
}

var _ Instruction = InstructionSetGlobal{}

func (InstructionSetGlobal) Opcode() Opcode {
	return SetGlobal
}

func (i InstructionSetGlobal) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionSetGlobal) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "global", i.Global, colorize)
}

func (i InstructionSetGlobal) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "global", i.Global, colorize)
}

func (i InstructionSetGlobal) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Global)
}

func DecodeSetGlobal(ip *uint16, code []byte) (i InstructionSetGlobal) {
	i.Global = decodeUint16(ip, code)
	return i
}

// InstructionGetField
//
// Pops a value off the stack, the target, and then pushes the value of the field at the given index onto the stack.
type InstructionGetField struct {
	FieldName    uint16
	AccessedType uint16
}

var _ Instruction = InstructionGetField{}

func (InstructionGetField) Opcode() Opcode {
	return GetField
}

func (i InstructionGetField) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionGetField) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "fieldName", i.FieldName, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "accessedType", i.AccessedType, colorize)
}

func (i InstructionGetField) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfConstantArgument(sb, "fieldName", constants[i.FieldName], colorize)
	sb.WriteByte(' ')
	printfTypeArgument(sb, "accessedType", types[i.AccessedType], colorize)
}

func (i InstructionGetField) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.FieldName)
	emitUint16(code, i.AccessedType)
}

func DecodeGetField(ip *uint16, code []byte) (i InstructionGetField) {
	i.FieldName = decodeUint16(ip, code)
	i.AccessedType = decodeUint16(ip, code)
	return i
}

// InstructionRemoveField
//
// Pops a value off the stack, the target. Remove the value of the given field from the target, and pushes it onto the stack.
type InstructionRemoveField struct {
	FieldName uint16
}

var _ Instruction = InstructionRemoveField{}

func (InstructionRemoveField) Opcode() Opcode {
	return RemoveField
}

func (i InstructionRemoveField) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionRemoveField) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "fieldName", i.FieldName, colorize)
}

func (i InstructionRemoveField) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfConstantArgument(sb, "fieldName", constants[i.FieldName], colorize)
}

func (i InstructionRemoveField) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.FieldName)
}

func DecodeRemoveField(ip *uint16, code []byte) (i InstructionRemoveField) {
	i.FieldName = decodeUint16(ip, code)
	return i
}

// InstructionSetField
//
// Pops two values off the stack, the target and the value, and then sets the field at the given index of the target to the value.
type InstructionSetField struct {
	FieldName    uint16
	AccessedType uint16
}

var _ Instruction = InstructionSetField{}

func (InstructionSetField) Opcode() Opcode {
	return SetField
}

func (i InstructionSetField) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionSetField) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "fieldName", i.FieldName, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "accessedType", i.AccessedType, colorize)
}

func (i InstructionSetField) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfConstantArgument(sb, "fieldName", constants[i.FieldName], colorize)
	sb.WriteByte(' ')
	printfTypeArgument(sb, "accessedType", types[i.AccessedType], colorize)
}

func (i InstructionSetField) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.FieldName)
	emitUint16(code, i.AccessedType)
}

func DecodeSetField(ip *uint16, code []byte) (i InstructionSetField) {
	i.FieldName = decodeUint16(ip, code)
	i.AccessedType = decodeUint16(ip, code)
	return i
}

// InstructionGetIndex
//
// Pops two values off the stack, the array and the index, and then pushes the value at the given index of the array onto the stack.
type InstructionGetIndex struct {
}

var _ Instruction = InstructionGetIndex{}

func (InstructionGetIndex) Opcode() Opcode {
	return GetIndex
}

func (i InstructionGetIndex) String() string {
	return i.Opcode().String()
}

func (i InstructionGetIndex) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionGetIndex) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionGetIndex) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionRemoveIndex
//
// Pops two values off the stack, the array and the index. Removes the value at the given index from the array and pushes it onto the stack.
type InstructionRemoveIndex struct {
}

var _ Instruction = InstructionRemoveIndex{}

func (InstructionRemoveIndex) Opcode() Opcode {
	return RemoveIndex
}

func (i InstructionRemoveIndex) String() string {
	return i.Opcode().String()
}

func (i InstructionRemoveIndex) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionRemoveIndex) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionRemoveIndex) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionSetIndex
//
// Pops three values off the stack, the array, the index, and the value, and then sets the value at the given index of the array to the value.
type InstructionSetIndex struct {
}

var _ Instruction = InstructionSetIndex{}

func (InstructionSetIndex) Opcode() Opcode {
	return SetIndex
}

func (i InstructionSetIndex) String() string {
	return i.Opcode().String()
}

func (i InstructionSetIndex) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionSetIndex) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionSetIndex) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionVoid
//
// Pushes the void value onto the stack.
type InstructionVoid struct {
}

var _ Instruction = InstructionVoid{}

func (InstructionVoid) Opcode() Opcode {
	return Void
}

func (i InstructionVoid) String() string {
	return i.Opcode().String()
}

func (i InstructionVoid) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionVoid) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionVoid) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionTrue
//
// Pushes the boolean value `true` onto the stack.
type InstructionTrue struct {
}

var _ Instruction = InstructionTrue{}

func (InstructionTrue) Opcode() Opcode {
	return True
}

func (i InstructionTrue) String() string {
	return i.Opcode().String()
}

func (i InstructionTrue) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionTrue) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionTrue) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionFalse
//
// Pushes the boolean value `false` onto the stack.
type InstructionFalse struct {
}

var _ Instruction = InstructionFalse{}

func (InstructionFalse) Opcode() Opcode {
	return False
}

func (i InstructionFalse) String() string {
	return i.Opcode().String()
}

func (i InstructionFalse) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionFalse) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionFalse) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionNil
//
// Pushes the value `nil` onto the stack.
type InstructionNil struct {
}

var _ Instruction = InstructionNil{}

func (InstructionNil) Opcode() Opcode {
	return Nil
}

func (i InstructionNil) String() string {
	return i.Opcode().String()
}

func (i InstructionNil) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionNil) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionNil) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionNewSimpleComposite
//
// Creates a new instance of a simple composite value of given kind and type, at address 0x0, and then pushes it onto the stack.
type InstructionNewSimpleComposite struct {
	Kind common.CompositeKind
	Type uint16
}

var _ Instruction = InstructionNewSimpleComposite{}

func (InstructionNewSimpleComposite) Opcode() Opcode {
	return NewSimpleComposite
}

func (i InstructionNewSimpleComposite) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionNewSimpleComposite) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "kind", i.Kind, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
}

func (i InstructionNewSimpleComposite) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "kind", i.Kind, colorize)
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
}

func (i InstructionNewSimpleComposite) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitCompositeKind(code, i.Kind)
	emitUint16(code, i.Type)
}

func DecodeNewSimpleComposite(ip *uint16, code []byte) (i InstructionNewSimpleComposite) {
	i.Kind = decodeCompositeKind(ip, code)
	i.Type = decodeUint16(ip, code)
	return i
}

// InstructionNewComposite
//
// Creates a new instance of the given composite kind and type, at address 0x0, and then pushes it onto the stack.
type InstructionNewComposite struct {
	Kind common.CompositeKind
	Type uint16
}

var _ Instruction = InstructionNewComposite{}

func (InstructionNewComposite) Opcode() Opcode {
	return NewComposite
}

func (i InstructionNewComposite) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionNewComposite) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "kind", i.Kind, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
}

func (i InstructionNewComposite) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "kind", i.Kind, colorize)
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
}

func (i InstructionNewComposite) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitCompositeKind(code, i.Kind)
	emitUint16(code, i.Type)
}

func DecodeNewComposite(ip *uint16, code []byte) (i InstructionNewComposite) {
	i.Kind = decodeCompositeKind(ip, code)
	i.Type = decodeUint16(ip, code)
	return i
}

// InstructionNewCompositeAt
//
// Creates a new instance of the given composite kind and type, at the given address, and then pushes it onto the stack.
type InstructionNewCompositeAt struct {
	Kind    common.CompositeKind
	Type    uint16
	Address uint16
}

var _ Instruction = InstructionNewCompositeAt{}

func (InstructionNewCompositeAt) Opcode() Opcode {
	return NewCompositeAt
}

func (i InstructionNewCompositeAt) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionNewCompositeAt) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "kind", i.Kind, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "address", i.Address, colorize)
}

func (i InstructionNewCompositeAt) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "kind", i.Kind, colorize)
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
	sb.WriteByte(' ')
	printfConstantArgument(sb, "address", constants[i.Address], colorize)
}

func (i InstructionNewCompositeAt) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitCompositeKind(code, i.Kind)
	emitUint16(code, i.Type)
	emitUint16(code, i.Address)
}

func DecodeNewCompositeAt(ip *uint16, code []byte) (i InstructionNewCompositeAt) {
	i.Kind = decodeCompositeKind(ip, code)
	i.Type = decodeUint16(ip, code)
	i.Address = decodeUint16(ip, code)
	return i
}

// InstructionNewPath
//
// Creates a new path with the given domain and identifier and then pushes it onto the stack.
type InstructionNewPath struct {
	Domain     common.PathDomain
	Identifier uint16
}

var _ Instruction = InstructionNewPath{}

func (InstructionNewPath) Opcode() Opcode {
	return NewPath
}

func (i InstructionNewPath) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionNewPath) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "domain", i.Domain, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "identifier", i.Identifier, colorize)
}

func (i InstructionNewPath) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "domain", i.Domain, colorize)
	sb.WriteByte(' ')
	printfConstantArgument(sb, "identifier", constants[i.Identifier], colorize)
}

func (i InstructionNewPath) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitPathDomain(code, i.Domain)
	emitUint16(code, i.Identifier)
}

func DecodeNewPath(ip *uint16, code []byte) (i InstructionNewPath) {
	i.Domain = decodePathDomain(ip, code)
	i.Identifier = decodeUint16(ip, code)
	return i
}

// InstructionNewArray
//
// Pops the given number of elements off the stack, creates a new array with the given type, size, and elements, and then pushes it onto the stack.
type InstructionNewArray struct {
	Type       uint16
	Size       uint16
	IsResource bool
}

var _ Instruction = InstructionNewArray{}

func (InstructionNewArray) Opcode() Opcode {
	return NewArray
}

func (i InstructionNewArray) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionNewArray) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "size", i.Size, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "isResource", i.IsResource, colorize)
}

func (i InstructionNewArray) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "size", i.Size, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "isResource", i.IsResource, colorize)
}

func (i InstructionNewArray) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Type)
	emitUint16(code, i.Size)
	emitBool(code, i.IsResource)
}

func DecodeNewArray(ip *uint16, code []byte) (i InstructionNewArray) {
	i.Type = decodeUint16(ip, code)
	i.Size = decodeUint16(ip, code)
	i.IsResource = decodeBool(ip, code)
	return i
}

// InstructionNewDictionary
//
// Pops the given number of entries off the stack (twice the number of the given size), creates a new dictionary with the given type, size, and entries, and then pushes it onto the stack.
type InstructionNewDictionary struct {
	Type       uint16
	Size       uint16
	IsResource bool
}

var _ Instruction = InstructionNewDictionary{}

func (InstructionNewDictionary) Opcode() Opcode {
	return NewDictionary
}

func (i InstructionNewDictionary) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionNewDictionary) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "size", i.Size, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "isResource", i.IsResource, colorize)
}

func (i InstructionNewDictionary) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "size", i.Size, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "isResource", i.IsResource, colorize)
}

func (i InstructionNewDictionary) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Type)
	emitUint16(code, i.Size)
	emitBool(code, i.IsResource)
}

func DecodeNewDictionary(ip *uint16, code []byte) (i InstructionNewDictionary) {
	i.Type = decodeUint16(ip, code)
	i.Size = decodeUint16(ip, code)
	i.IsResource = decodeBool(ip, code)
	return i
}

// InstructionNewRef
//
// Pops a value off the stack, creates a new reference with the given type, and then pushes it onto the stack.
type InstructionNewRef struct {
	Type       uint16
	IsImplicit bool
}

var _ Instruction = InstructionNewRef{}

func (InstructionNewRef) Opcode() Opcode {
	return NewRef
}

func (i InstructionNewRef) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionNewRef) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "isImplicit", i.IsImplicit, colorize)
}

func (i InstructionNewRef) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "isImplicit", i.IsImplicit, colorize)
}

func (i InstructionNewRef) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Type)
	emitBool(code, i.IsImplicit)
}

func DecodeNewRef(ip *uint16, code []byte) (i InstructionNewRef) {
	i.Type = decodeUint16(ip, code)
	i.IsImplicit = decodeBool(ip, code)
	return i
}

// InstructionGetConstant
//
// Pushes the constant at the given index onto the stack.
type InstructionGetConstant struct {
	Constant uint16
}

var _ Instruction = InstructionGetConstant{}

func (InstructionGetConstant) Opcode() Opcode {
	return GetConstant
}

func (i InstructionGetConstant) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionGetConstant) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "constant", i.Constant, colorize)
}

func (i InstructionGetConstant) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfConstantArgument(sb, "constant", constants[i.Constant], colorize)
}

func (i InstructionGetConstant) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Constant)
}

func DecodeGetConstant(ip *uint16, code []byte) (i InstructionGetConstant) {
	i.Constant = decodeUint16(ip, code)
	return i
}

// InstructionNewClosure
//
// Creates a new closure with the function at the given index and pushes it onto the stack.
type InstructionNewClosure struct {
	Function uint16
	Upvalues []Upvalue
}

var _ Instruction = InstructionNewClosure{}

func (InstructionNewClosure) Opcode() Opcode {
	return NewClosure
}

func (i InstructionNewClosure) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionNewClosure) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "function", i.Function, colorize)
	sb.WriteByte(' ')
	printfUpvalueArrayArgument(sb, "upvalues", i.Upvalues, colorize)
}

func (i InstructionNewClosure) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfFunctionNameArgument(sb, "function", functionNames[i.Function], colorize)
	sb.WriteByte(' ')
	printfUpvalueArrayArgument(sb, "upvalues", i.Upvalues, colorize)
}

func (i InstructionNewClosure) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Function)
	emitUpvalueArray(code, i.Upvalues)
}

func DecodeNewClosure(ip *uint16, code []byte) (i InstructionNewClosure) {
	i.Function = decodeUint16(ip, code)
	i.Upvalues = decodeUpvalueArray(ip, code)
	return i
}

// InstructionInvoke
//
// Pops the function and arguments off the stack, invokes the function with the arguments, and then pushes the result back on to the stack.
type InstructionInvoke struct {
	TypeArgs []uint16
	ArgCount uint16
}

var _ Instruction = InstructionInvoke{}

func (InstructionInvoke) Opcode() Opcode {
	return Invoke
}

func (i InstructionInvoke) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionInvoke) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfUInt16ArrayArgument(sb, "typeArgs", i.TypeArgs, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "argCount", i.ArgCount, colorize)
}

func (i InstructionInvoke) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfTypeArrayArgument(sb, "typeArgs", i.TypeArgs, colorize, types)
	sb.WriteByte(' ')
	printfArgument(sb, "argCount", i.ArgCount, colorize)
}

func (i InstructionInvoke) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16Array(code, i.TypeArgs)
	emitUint16(code, i.ArgCount)
}

func DecodeInvoke(ip *uint16, code []byte) (i InstructionInvoke) {
	i.TypeArgs = decodeUint16Array(ip, code)
	i.ArgCount = decodeUint16(ip, code)
	return i
}

// InstructionInvokeDynamic
//
// Invokes a method with the given name dynamically. Pops the receiver and the arguments off the stack, invokes the function with the arguments, and then pushes the result back on to the stack.
type InstructionInvokeDynamic struct {
	Name     uint16
	TypeArgs []uint16
	ArgCount uint16
}

var _ Instruction = InstructionInvokeDynamic{}

func (InstructionInvokeDynamic) Opcode() Opcode {
	return InvokeDynamic
}

func (i InstructionInvokeDynamic) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionInvokeDynamic) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "name", i.Name, colorize)
	sb.WriteByte(' ')
	printfUInt16ArrayArgument(sb, "typeArgs", i.TypeArgs, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "argCount", i.ArgCount, colorize)
}

func (i InstructionInvokeDynamic) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfConstantArgument(sb, "name", constants[i.Name], colorize)
	sb.WriteByte(' ')
	printfTypeArrayArgument(sb, "typeArgs", i.TypeArgs, colorize, types)
	sb.WriteByte(' ')
	printfArgument(sb, "argCount", i.ArgCount, colorize)
}

func (i InstructionInvokeDynamic) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Name)
	emitUint16Array(code, i.TypeArgs)
	emitUint16(code, i.ArgCount)
}

func DecodeInvokeDynamic(ip *uint16, code []byte) (i InstructionInvokeDynamic) {
	i.Name = decodeUint16(ip, code)
	i.TypeArgs = decodeUint16Array(ip, code)
	i.ArgCount = decodeUint16(ip, code)
	return i
}

// InstructionGetMethod
//
// Pops a value off the stack, the receiver, and then pushes the value of the function at the given index onto the stack.
type InstructionGetMethod struct {
	Method uint16
}

var _ Instruction = InstructionGetMethod{}

func (InstructionGetMethod) Opcode() Opcode {
	return GetMethod
}

func (i InstructionGetMethod) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionGetMethod) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "method", i.Method, colorize)
}

func (i InstructionGetMethod) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "method", i.Method, colorize)
}

func (i InstructionGetMethod) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Method)
}

func DecodeGetMethod(ip *uint16, code []byte) (i InstructionGetMethod) {
	i.Method = decodeUint16(ip, code)
	return i
}

// InstructionDup
//
// Pops a value off the stack, duplicates it, and then pushes the original and the copy back on to the stack.
type InstructionDup struct {
}

var _ Instruction = InstructionDup{}

func (InstructionDup) Opcode() Opcode {
	return Dup
}

func (i InstructionDup) String() string {
	return i.Opcode().String()
}

func (i InstructionDup) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionDup) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionDup) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionDrop
//
// Pops a value off the stack and discards it.
type InstructionDrop struct {
}

var _ Instruction = InstructionDrop{}

func (InstructionDrop) Opcode() Opcode {
	return Drop
}

func (i InstructionDrop) String() string {
	return i.Opcode().String()
}

func (i InstructionDrop) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionDrop) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionDrop) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionDestroy
//
// Pops a resource off the stack and then destroys it.
type InstructionDestroy struct {
}

var _ Instruction = InstructionDestroy{}

func (InstructionDestroy) Opcode() Opcode {
	return Destroy
}

func (i InstructionDestroy) String() string {
	return i.Opcode().String()
}

func (i InstructionDestroy) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionDestroy) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionDestroy) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionUnwrap
//
// Pops a value off the stack. If the value is an optional, pushes the optional's inner value back on to the stack. Panics if the value is `nil`. If the value is not an option, pushes the value back on to the stack.
type InstructionUnwrap struct {
}

var _ Instruction = InstructionUnwrap{}

func (InstructionUnwrap) Opcode() Opcode {
	return Unwrap
}

func (i InstructionUnwrap) String() string {
	return i.Opcode().String()
}

func (i InstructionUnwrap) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionUnwrap) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionUnwrap) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionWrap
//
// Pops a value off the stack, wrap it with an optional, and pushes back onto the stack.
type InstructionWrap struct {
}

var _ Instruction = InstructionWrap{}

func (InstructionWrap) Opcode() Opcode {
	return Wrap
}

func (i InstructionWrap) String() string {
	return i.Opcode().String()
}

func (i InstructionWrap) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionWrap) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionWrap) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionTransfer
//
// Pops a value off the stack, calls transfer, and then pushes it back on to the stack.
type InstructionTransfer struct {
}

var _ Instruction = InstructionTransfer{}

func (InstructionTransfer) Opcode() Opcode {
	return Transfer
}

func (i InstructionTransfer) String() string {
	return i.Opcode().String()
}

func (i InstructionTransfer) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionTransfer) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionTransfer) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionTransferAndConvert
//
// Pops a value off the stack, transfers it to the given type, and then pushes it back on to the stack.
type InstructionTransferAndConvert struct {
	Type uint16
}

var _ Instruction = InstructionTransferAndConvert{}

func (InstructionTransferAndConvert) Opcode() Opcode {
	return TransferAndConvert
}

func (i InstructionTransferAndConvert) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionTransferAndConvert) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
}

func (i InstructionTransferAndConvert) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
}

func (i InstructionTransferAndConvert) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Type)
}

func DecodeTransferAndConvert(ip *uint16, code []byte) (i InstructionTransferAndConvert) {
	i.Type = decodeUint16(ip, code)
	return i
}

// InstructionSimpleCast
//
// Pops a value off the stack, casts it to the given type, and then pushes it back on to the stack.
type InstructionSimpleCast struct {
	Type uint16
}

var _ Instruction = InstructionSimpleCast{}

func (InstructionSimpleCast) Opcode() Opcode {
	return SimpleCast
}

func (i InstructionSimpleCast) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionSimpleCast) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
}

func (i InstructionSimpleCast) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
}

func (i InstructionSimpleCast) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Type)
}

func DecodeSimpleCast(ip *uint16, code []byte) (i InstructionSimpleCast) {
	i.Type = decodeUint16(ip, code)
	return i
}

// InstructionFailableCast
//
// Pops a value off the stack and casts it to the given type. If the value is a subtype of the given type, then casted value is pushed back on to the stack. If the value is not a subtype of the given type, then a `nil` is pushed to the stack instead.
type InstructionFailableCast struct {
	Type uint16
}

var _ Instruction = InstructionFailableCast{}

func (InstructionFailableCast) Opcode() Opcode {
	return FailableCast
}

func (i InstructionFailableCast) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionFailableCast) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
}

func (i InstructionFailableCast) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
}

func (i InstructionFailableCast) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Type)
}

func DecodeFailableCast(ip *uint16, code []byte) (i InstructionFailableCast) {
	i.Type = decodeUint16(ip, code)
	return i
}

// InstructionForceCast
//
// Pops a value off the stack, force-casts it to the given type, and then pushes it back on to the stack. Panics if the value is not a subtype of the given type.
type InstructionForceCast struct {
	Type uint16
}

var _ Instruction = InstructionForceCast{}

func (InstructionForceCast) Opcode() Opcode {
	return ForceCast
}

func (i InstructionForceCast) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionForceCast) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
}

func (i InstructionForceCast) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
}

func (i InstructionForceCast) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Type)
}

func DecodeForceCast(ip *uint16, code []byte) (i InstructionForceCast) {
	i.Type = decodeUint16(ip, code)
	return i
}

// InstructionDeref
//
// Pops an (optional) reference off the stack, dereferences it, and then pushes the value back on to the stack.
type InstructionDeref struct {
}

var _ Instruction = InstructionDeref{}

func (InstructionDeref) Opcode() Opcode {
	return Deref
}

func (i InstructionDeref) String() string {
	return i.Opcode().String()
}

func (i InstructionDeref) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionDeref) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionDeref) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionJump
//
// Unconditionally jumps to the given instruction.
type InstructionJump struct {
	Target uint16
}

var _ Instruction = InstructionJump{}

func (InstructionJump) Opcode() Opcode {
	return Jump
}

func (i InstructionJump) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionJump) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "target", i.Target, colorize)
}

func (i InstructionJump) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "target", i.Target, colorize)
}

func (i InstructionJump) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Target)
}

func DecodeJump(ip *uint16, code []byte) (i InstructionJump) {
	i.Target = decodeUint16(ip, code)
	return i
}

// InstructionJumpIfFalse
//
// Pops a value off the stack. If it is `false`, jumps to the target instruction.
type InstructionJumpIfFalse struct {
	Target uint16
}

var _ Instruction = InstructionJumpIfFalse{}

func (InstructionJumpIfFalse) Opcode() Opcode {
	return JumpIfFalse
}

func (i InstructionJumpIfFalse) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionJumpIfFalse) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "target", i.Target, colorize)
}

func (i InstructionJumpIfFalse) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "target", i.Target, colorize)
}

func (i InstructionJumpIfFalse) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Target)
}

func DecodeJumpIfFalse(ip *uint16, code []byte) (i InstructionJumpIfFalse) {
	i.Target = decodeUint16(ip, code)
	return i
}

// InstructionJumpIfTrue
//
// Pops a value off the stack. If it is `true`, jumps to the target instruction.
type InstructionJumpIfTrue struct {
	Target uint16
}

var _ Instruction = InstructionJumpIfTrue{}

func (InstructionJumpIfTrue) Opcode() Opcode {
	return JumpIfTrue
}

func (i InstructionJumpIfTrue) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionJumpIfTrue) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "target", i.Target, colorize)
}

func (i InstructionJumpIfTrue) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "target", i.Target, colorize)
}

func (i InstructionJumpIfTrue) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Target)
}

func DecodeJumpIfTrue(ip *uint16, code []byte) (i InstructionJumpIfTrue) {
	i.Target = decodeUint16(ip, code)
	return i
}

// InstructionJumpIfNil
//
// Pops a value off the stack. If it is `nil`, jumps to the target instruction.
type InstructionJumpIfNil struct {
	Target uint16
}

var _ Instruction = InstructionJumpIfNil{}

func (InstructionJumpIfNil) Opcode() Opcode {
	return JumpIfNil
}

func (i InstructionJumpIfNil) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionJumpIfNil) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "target", i.Target, colorize)
}

func (i InstructionJumpIfNil) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "target", i.Target, colorize)
}

func (i InstructionJumpIfNil) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Target)
}

func DecodeJumpIfNil(ip *uint16, code []byte) (i InstructionJumpIfNil) {
	i.Target = decodeUint16(ip, code)
	return i
}

// InstructionReturn
//
// Returns from the current function, without a value.
type InstructionReturn struct {
}

var _ Instruction = InstructionReturn{}

func (InstructionReturn) Opcode() Opcode {
	return Return
}

func (i InstructionReturn) String() string {
	return i.Opcode().String()
}

func (i InstructionReturn) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionReturn) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionReturn) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionReturnValue
//
// Pops a value off the stack and then returns from the current function with that value.
type InstructionReturnValue struct {
}

var _ Instruction = InstructionReturnValue{}

func (InstructionReturnValue) Opcode() Opcode {
	return ReturnValue
}

func (i InstructionReturnValue) String() string {
	return i.Opcode().String()
}

func (i InstructionReturnValue) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionReturnValue) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionReturnValue) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionEqual
//
// Pops two values off the stack, checks if the first value is equal to the second, and then pushes the result back on to the stack.
type InstructionEqual struct {
}

var _ Instruction = InstructionEqual{}

func (InstructionEqual) Opcode() Opcode {
	return Equal
}

func (i InstructionEqual) String() string {
	return i.Opcode().String()
}

func (i InstructionEqual) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionEqual) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionEqual) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionNotEqual
//
// Pops two values off the stack, checks if the first value is not equal to the second, and then pushes the result back on to the stack.
type InstructionNotEqual struct {
}

var _ Instruction = InstructionNotEqual{}

func (InstructionNotEqual) Opcode() Opcode {
	return NotEqual
}

func (i InstructionNotEqual) String() string {
	return i.Opcode().String()
}

func (i InstructionNotEqual) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionNotEqual) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionNotEqual) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionNot
//
// Pops a boolean value off the stack, negates it, and then pushes the result back on to the stack.
type InstructionNot struct {
}

var _ Instruction = InstructionNot{}

func (InstructionNot) Opcode() Opcode {
	return Not
}

func (i InstructionNot) String() string {
	return i.Opcode().String()
}

func (i InstructionNot) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionNot) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionNot) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionAdd
//
// Pops two number values off the stack, adds them together, and then pushes the result back on to the stack.
type InstructionAdd struct {
}

var _ Instruction = InstructionAdd{}

func (InstructionAdd) Opcode() Opcode {
	return Add
}

func (i InstructionAdd) String() string {
	return i.Opcode().String()
}

func (i InstructionAdd) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionAdd) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionAdd) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionSubtract
//
// Pops two number values off the stack, subtracts the second from the first, and then pushes the result back on to the stack.
type InstructionSubtract struct {
}

var _ Instruction = InstructionSubtract{}

func (InstructionSubtract) Opcode() Opcode {
	return Subtract
}

func (i InstructionSubtract) String() string {
	return i.Opcode().String()
}

func (i InstructionSubtract) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionSubtract) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionSubtract) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionMultiply
//
// Pops two number values off the stack, multiplies them together, and then pushes the result back on to the stack.
type InstructionMultiply struct {
}

var _ Instruction = InstructionMultiply{}

func (InstructionMultiply) Opcode() Opcode {
	return Multiply
}

func (i InstructionMultiply) String() string {
	return i.Opcode().String()
}

func (i InstructionMultiply) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionMultiply) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionMultiply) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionDivide
//
// Pops two number values off the stack, divides the first by the second, and then pushes the result back on to the stack.
type InstructionDivide struct {
}

var _ Instruction = InstructionDivide{}

func (InstructionDivide) Opcode() Opcode {
	return Divide
}

func (i InstructionDivide) String() string {
	return i.Opcode().String()
}

func (i InstructionDivide) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionDivide) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionDivide) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionMod
//
// Pops two number values off the stack, calculates the modulus of the first by the second, and then pushes the result back on to the stack.
type InstructionMod struct {
}

var _ Instruction = InstructionMod{}

func (InstructionMod) Opcode() Opcode {
	return Mod
}

func (i InstructionMod) String() string {
	return i.Opcode().String()
}

func (i InstructionMod) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionMod) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionMod) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionNegate
//
// Pops a number value off the stack, negates it, and then pushes the result back on to the stack.
type InstructionNegate struct {
}

var _ Instruction = InstructionNegate{}

func (InstructionNegate) Opcode() Opcode {
	return Negate
}

func (i InstructionNegate) String() string {
	return i.Opcode().String()
}

func (i InstructionNegate) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionNegate) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionNegate) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionLess
//
// Pops two values off the stack, checks if the first value is less than the second, and then pushes the result back on to the stack.
type InstructionLess struct {
}

var _ Instruction = InstructionLess{}

func (InstructionLess) Opcode() Opcode {
	return Less
}

func (i InstructionLess) String() string {
	return i.Opcode().String()
}

func (i InstructionLess) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionLess) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionLess) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionLessOrEqual
//
// Pops two values off the stack, checks if the first value is less than or equal to the second, and then pushes the result back on to the stack.
type InstructionLessOrEqual struct {
}

var _ Instruction = InstructionLessOrEqual{}

func (InstructionLessOrEqual) Opcode() Opcode {
	return LessOrEqual
}

func (i InstructionLessOrEqual) String() string {
	return i.Opcode().String()
}

func (i InstructionLessOrEqual) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionLessOrEqual) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionLessOrEqual) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionGreater
//
// Pops two values off the stack, checks if the first value is greater than the second, and then pushes the result back on to the stack.
type InstructionGreater struct {
}

var _ Instruction = InstructionGreater{}

func (InstructionGreater) Opcode() Opcode {
	return Greater
}

func (i InstructionGreater) String() string {
	return i.Opcode().String()
}

func (i InstructionGreater) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionGreater) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionGreater) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionGreaterOrEqual
//
// Pops two values off the stack, checks if the first value is greater than or equal to the second, and then pushes the result back on to the stack.
type InstructionGreaterOrEqual struct {
}

var _ Instruction = InstructionGreaterOrEqual{}

func (InstructionGreaterOrEqual) Opcode() Opcode {
	return GreaterOrEqual
}

func (i InstructionGreaterOrEqual) String() string {
	return i.Opcode().String()
}

func (i InstructionGreaterOrEqual) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionGreaterOrEqual) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionGreaterOrEqual) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionBitwiseOr
//
// Pops two integer values off the stack, performs a bitwise OR operation on them, and then pushes the result back on to the stack.
type InstructionBitwiseOr struct {
}

var _ Instruction = InstructionBitwiseOr{}

func (InstructionBitwiseOr) Opcode() Opcode {
	return BitwiseOr
}

func (i InstructionBitwiseOr) String() string {
	return i.Opcode().String()
}

func (i InstructionBitwiseOr) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionBitwiseOr) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionBitwiseOr) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionBitwiseXor
//
// Pops two integer values off the stack, performs a bitwise XOR operation on them, and then pushes the result back on to the stack.
type InstructionBitwiseXor struct {
}

var _ Instruction = InstructionBitwiseXor{}

func (InstructionBitwiseXor) Opcode() Opcode {
	return BitwiseXor
}

func (i InstructionBitwiseXor) String() string {
	return i.Opcode().String()
}

func (i InstructionBitwiseXor) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionBitwiseXor) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionBitwiseXor) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionBitwiseAnd
//
// Pops two integer values off the stack, performs a bitwise AND operation on them, and then pushes the result back on to the stack.
type InstructionBitwiseAnd struct {
}

var _ Instruction = InstructionBitwiseAnd{}

func (InstructionBitwiseAnd) Opcode() Opcode {
	return BitwiseAnd
}

func (i InstructionBitwiseAnd) String() string {
	return i.Opcode().String()
}

func (i InstructionBitwiseAnd) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionBitwiseAnd) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionBitwiseAnd) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionBitwiseLeftShift
//
// Pops two integer values off the stack, performs a bitwise left shift operation on them, and then pushes the result back on to the stack.
type InstructionBitwiseLeftShift struct {
}

var _ Instruction = InstructionBitwiseLeftShift{}

func (InstructionBitwiseLeftShift) Opcode() Opcode {
	return BitwiseLeftShift
}

func (i InstructionBitwiseLeftShift) String() string {
	return i.Opcode().String()
}

func (i InstructionBitwiseLeftShift) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionBitwiseLeftShift) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionBitwiseLeftShift) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionBitwiseRightShift
//
// Pops two integer values off the stack, performs a bitwise right shift operation on them, and then pushes the result back on to the stack.
type InstructionBitwiseRightShift struct {
}

var _ Instruction = InstructionBitwiseRightShift{}

func (InstructionBitwiseRightShift) Opcode() Opcode {
	return BitwiseRightShift
}

func (i InstructionBitwiseRightShift) String() string {
	return i.Opcode().String()
}

func (i InstructionBitwiseRightShift) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionBitwiseRightShift) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionBitwiseRightShift) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionIterator
//
// Pops an iterable value from the stack, get an iterator to it, and push the iterator back onto the stack.
type InstructionIterator struct {
}

var _ Instruction = InstructionIterator{}

func (InstructionIterator) Opcode() Opcode {
	return Iterator
}

func (i InstructionIterator) String() string {
	return i.Opcode().String()
}

func (i InstructionIterator) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionIterator) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionIterator) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionIteratorHasNext
//
// Pops a value-iterator from the stack, calls `hasNext()` method on it, and push the result back onto the stack.
type InstructionIteratorHasNext struct {
}

var _ Instruction = InstructionIteratorHasNext{}

func (InstructionIteratorHasNext) Opcode() Opcode {
	return IteratorHasNext
}

func (i InstructionIteratorHasNext) String() string {
	return i.Opcode().String()
}

func (i InstructionIteratorHasNext) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionIteratorHasNext) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionIteratorHasNext) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionIteratorNext
//
// Pops a value-iterator from the stack, calls `next()` method on it, and push the result back onto the stack.
type InstructionIteratorNext struct {
}

var _ Instruction = InstructionIteratorNext{}

func (InstructionIteratorNext) Opcode() Opcode {
	return IteratorNext
}

func (i InstructionIteratorNext) String() string {
	return i.Opcode().String()
}

func (i InstructionIteratorNext) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionIteratorNext) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionIteratorNext) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionIteratorEnd
//
// Pops a value-iterator from the stack end invalidates it. The iterator may no longer be used after this instruction.
type InstructionIteratorEnd struct {
}

var _ Instruction = InstructionIteratorEnd{}

func (InstructionIteratorEnd) Opcode() Opcode {
	return IteratorEnd
}

func (i InstructionIteratorEnd) String() string {
	return i.Opcode().String()
}

func (i InstructionIteratorEnd) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionIteratorEnd) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionIteratorEnd) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionEmitEvent
//
// Pops arguments of the stack and then emits an event with the given type with them.
type InstructionEmitEvent struct {
	Type     uint16
	ArgCount uint16
}

var _ Instruction = InstructionEmitEvent{}

func (InstructionEmitEvent) Opcode() Opcode {
	return EmitEvent
}

func (i InstructionEmitEvent) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionEmitEvent) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "type", i.Type, colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "argCount", i.ArgCount, colorize)
}

func (i InstructionEmitEvent) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfTypeArgument(sb, "type", types[i.Type], colorize)
	sb.WriteByte(' ')
	printfArgument(sb, "argCount", i.ArgCount, colorize)
}

func (i InstructionEmitEvent) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.Type)
	emitUint16(code, i.ArgCount)
}

func DecodeEmitEvent(ip *uint16, code []byte) (i InstructionEmitEvent) {
	i.Type = decodeUint16(ip, code)
	i.ArgCount = decodeUint16(ip, code)
	return i
}

// InstructionLoop
//
// Indicates the start of a loop.
type InstructionLoop struct {
}

var _ Instruction = InstructionLoop{}

func (InstructionLoop) Opcode() Opcode {
	return Loop
}

func (i InstructionLoop) String() string {
	return i.Opcode().String()
}

func (i InstructionLoop) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionLoop) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionLoop) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionStatement
//
// Indicates the start of a statement.
type InstructionStatement struct {
}

var _ Instruction = InstructionStatement{}

func (InstructionStatement) Opcode() Opcode {
	return Statement
}

func (i InstructionStatement) String() string {
	return i.Opcode().String()
}

func (i InstructionStatement) OperandsString(sb *strings.Builder, colorize bool) {}

func (i InstructionStatement) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
}

func (i InstructionStatement) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
}

// InstructionTemplateString
//
// Represents a string template with an array of values (strings) and an array of expressions, pops both off the stack.
type InstructionTemplateString struct {
	ExprSize uint16
}

var _ Instruction = InstructionTemplateString{}

func (InstructionTemplateString) Opcode() Opcode {
	return TemplateString
}

func (i InstructionTemplateString) String() string {
	var sb strings.Builder
	sb.WriteString(i.Opcode().String())
	i.OperandsString(&sb, false)
	return sb.String()
}

func (i InstructionTemplateString) OperandsString(sb *strings.Builder, colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "exprSize", i.ExprSize, colorize)
}

func (i InstructionTemplateString) ResolvedOperandsString(sb *strings.Builder,
	constants []constant.Constant,
	types []interpreter.StaticType,
	functionNames []string,
	colorize bool) {
	sb.WriteByte(' ')
	printfArgument(sb, "exprSize", i.ExprSize, colorize)
}

func (i InstructionTemplateString) Encode(code *[]byte) {
	emitOpcode(code, i.Opcode())
	emitUint16(code, i.ExprSize)
}

func DecodeTemplateString(ip *uint16, code []byte) (i InstructionTemplateString) {
	i.ExprSize = decodeUint16(ip, code)
	return i
}

func DecodeInstruction(ip *uint16, code []byte) Instruction {
	switch Opcode(decodeByte(ip, code)) {
	case Unknown:
		return InstructionUnknown{}
	case GetLocal:
		return DecodeGetLocal(ip, code)
	case SetLocal:
		return DecodeSetLocal(ip, code)
	case GetUpvalue:
		return DecodeGetUpvalue(ip, code)
	case SetUpvalue:
		return DecodeSetUpvalue(ip, code)
	case CloseUpvalue:
		return DecodeCloseUpvalue(ip, code)
	case GetGlobal:
		return DecodeGetGlobal(ip, code)
	case SetGlobal:
		return DecodeSetGlobal(ip, code)
	case GetField:
		return DecodeGetField(ip, code)
	case RemoveField:
		return DecodeRemoveField(ip, code)
	case SetField:
		return DecodeSetField(ip, code)
	case GetIndex:
		return InstructionGetIndex{}
	case RemoveIndex:
		return InstructionRemoveIndex{}
	case SetIndex:
		return InstructionSetIndex{}
	case Void:
		return InstructionVoid{}
	case True:
		return InstructionTrue{}
	case False:
		return InstructionFalse{}
	case Nil:
		return InstructionNil{}
	case NewSimpleComposite:
		return DecodeNewSimpleComposite(ip, code)
	case NewComposite:
		return DecodeNewComposite(ip, code)
	case NewCompositeAt:
		return DecodeNewCompositeAt(ip, code)
	case NewPath:
		return DecodeNewPath(ip, code)
	case NewArray:
		return DecodeNewArray(ip, code)
	case NewDictionary:
		return DecodeNewDictionary(ip, code)
	case NewRef:
		return DecodeNewRef(ip, code)
	case GetConstant:
		return DecodeGetConstant(ip, code)
	case NewClosure:
		return DecodeNewClosure(ip, code)
	case Invoke:
		return DecodeInvoke(ip, code)
	case InvokeDynamic:
		return DecodeInvokeDynamic(ip, code)
	case GetMethod:
		return DecodeGetMethod(ip, code)
	case Dup:
		return InstructionDup{}
	case Drop:
		return InstructionDrop{}
	case Destroy:
		return InstructionDestroy{}
	case Unwrap:
		return InstructionUnwrap{}
	case Wrap:
		return InstructionWrap{}
	case Transfer:
		return InstructionTransfer{}
	case TransferAndConvert:
		return DecodeTransferAndConvert(ip, code)
	case SimpleCast:
		return DecodeSimpleCast(ip, code)
	case FailableCast:
		return DecodeFailableCast(ip, code)
	case ForceCast:
		return DecodeForceCast(ip, code)
	case Deref:
		return InstructionDeref{}
	case Jump:
		return DecodeJump(ip, code)
	case JumpIfFalse:
		return DecodeJumpIfFalse(ip, code)
	case JumpIfTrue:
		return DecodeJumpIfTrue(ip, code)
	case JumpIfNil:
		return DecodeJumpIfNil(ip, code)
	case Return:
		return InstructionReturn{}
	case ReturnValue:
		return InstructionReturnValue{}
	case Equal:
		return InstructionEqual{}
	case NotEqual:
		return InstructionNotEqual{}
	case Not:
		return InstructionNot{}
	case Add:
		return InstructionAdd{}
	case Subtract:
		return InstructionSubtract{}
	case Multiply:
		return InstructionMultiply{}
	case Divide:
		return InstructionDivide{}
	case Mod:
		return InstructionMod{}
	case Negate:
		return InstructionNegate{}
	case Less:
		return InstructionLess{}
	case LessOrEqual:
		return InstructionLessOrEqual{}
	case Greater:
		return InstructionGreater{}
	case GreaterOrEqual:
		return InstructionGreaterOrEqual{}
	case BitwiseOr:
		return InstructionBitwiseOr{}
	case BitwiseXor:
		return InstructionBitwiseXor{}
	case BitwiseAnd:
		return InstructionBitwiseAnd{}
	case BitwiseLeftShift:
		return InstructionBitwiseLeftShift{}
	case BitwiseRightShift:
		return InstructionBitwiseRightShift{}
	case Iterator:
		return InstructionIterator{}
	case IteratorHasNext:
		return InstructionIteratorHasNext{}
	case IteratorNext:
		return InstructionIteratorNext{}
	case IteratorEnd:
		return InstructionIteratorEnd{}
	case EmitEvent:
		return DecodeEmitEvent(ip, code)
	case Loop:
		return InstructionLoop{}
	case Statement:
		return InstructionStatement{}
	case TemplateString:
		return DecodeTemplateString(ip, code)
	}

	panic(errors.NewUnreachableError())
}
