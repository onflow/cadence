// Code generated by main.go. DO NOT EDIT.

//go:generate go run ./gen errors.go

package main

import (
	"github.com/onflow/cadence/parser"
	"github.com/onflow/cadence/sema"
)

func generateErrors() []namedError {
	return []namedError{
		{"parser.AccessKeywordEntitlementNameError",
			&parser.AccessKeywordEntitlementNameError{
				Keyword: placeholderString,
				Range:   placeholderRange,
			},
		},
		{"parser.CustomDestructorError",
			&parser.CustomDestructorError{
				Pos:             placeholderPosition,
				DestructorRange: placeholderRange,
			},
		},
		{"parser.DuplicateAccessModifierError",
			&parser.DuplicateAccessModifierError{
				Range: placeholderRange,
			},
		},
		{"parser.DuplicateViewModifierError",
			&parser.DuplicateViewModifierError{
				Range: placeholderRange,
			},
		},
		{"parser.ExpressionDepthLimitReachedError",
			parser.ExpressionDepthLimitReachedError{
				Pos: placeholderPosition,
			},
		},
		{"parser.InvalidAccessModifierError",
			&parser.InvalidAccessModifierError{
				Pos:             placeholderPosition,
				DeclarationKind: placeholderDeclarationKind,
			},
		},
		{"parser.InvalidEntitlementSeparatorError",
			&parser.InvalidEntitlementSeparatorError{
				Token: placeholderToken,
			},
		},
		{"parser.InvalidIntegerLiteralError",
			&parser.InvalidIntegerLiteralError{
				Literal:                   placeholderString,
				IntegerLiteralKind:        placeholderIntegerLiteralKind,
				InvalidIntegerLiteralKind: placeholderInvalidNumberLiteralKind,
				Range:                     placeholderRange,
			},
		},
		{"parser.InvalidNativeModifierError",
			&parser.InvalidNativeModifierError{
				Pos:             placeholderPosition,
				DeclarationKind: placeholderDeclarationKind,
			},
		},
		{"parser.InvalidStaticModifierError",
			&parser.InvalidStaticModifierError{
				Pos:             placeholderPosition,
				DeclarationKind: placeholderDeclarationKind,
			},
		},
		{"parser.InvalidViewModifierError",
			&parser.InvalidViewModifierError{
				Pos:             placeholderPosition,
				DeclarationKind: placeholderDeclarationKind,
			},
		},
		{"parser.MemberAccessMissingNameError",
			&parser.MemberAccessMissingNameError{
				GotToken: placeholderToken,
			},
		},
		{"parser.MissingCommaInParameterListError",
			&parser.MissingCommaInParameterListError{
				Pos: placeholderPosition,
			},
		},
		{"parser.MissingConformanceError",
			&parser.MissingConformanceError{
				Pos: placeholderPosition,
			},
		},
		{"parser.MissingEnumCaseNameError",
			&parser.MissingEnumCaseNameError{
				GotToken: placeholderToken,
			},
		},
		{"parser.NonNominalTypeError",
			&parser.NonNominalTypeError{
				Pos:  placeholderPosition,
				Type: placeholderAstType,
			},
		},
		{"parser.PrivAccessError",
			&parser.PrivAccessError{
				Range: placeholderRange,
			},
		},
		{"parser.PubAccessError",
			&parser.PubAccessError{
				Range: placeholderRange,
			},
		},
		{"parser.RestrictedTypeError",
			&parser.RestrictedTypeError{
				Range: placeholderRange,
			},
		},
		{"parser.SpecialFunctionReturnTypeError",
			&parser.SpecialFunctionReturnTypeError{
				DeclarationKind: placeholderDeclarationKind,
				Range:           placeholderRange,
			},
		},
		{"parser.StatementSeparationError",
			&parser.StatementSeparationError{
				Pos: placeholderPosition,
			},
		},
		{"parser.SyntaxError",
			&parser.SyntaxError{
				Message:       placeholderString,
				Secondary:     placeholderString,
				Migration:     placeholderString,
				Documentation: placeholderString,
				Pos:           placeholderPosition,
			},
		},
		{"parser.TypeDepthLimitReachedError",
			parser.TypeDepthLimitReachedError{
				Pos: placeholderPosition,
			},
		},
		{"parser.UnexpectedEOFError",
			parser.UnexpectedEOFError{
				Pos: placeholderPosition,
			},
		},
		{"parser.UnexpectedTokenAtEndError",
			&parser.UnexpectedTokenAtEndError{
				Token: placeholderToken,
			},
		},
		{"parser.WhitespaceAfterMemberAccessError",
			&parser.WhitespaceAfterMemberAccessError{
				OperatorTokenType: placeholderTokenType,
				WhitespaceRange:   placeholderRange,
			},
		},
		{"sema.AlwaysFailingNonResourceCastingTypeError",
			&sema.AlwaysFailingNonResourceCastingTypeError{
				ValueType:  placeholderSemaType,
				TargetType: placeholderSemaType,
				Range:      placeholderRange,
			},
		},
		{"sema.AlwaysFailingResourceCastingTypeError",
			&sema.AlwaysFailingResourceCastingTypeError{
				ValueType:  placeholderSemaType,
				TargetType: placeholderSemaType,
				Range:      placeholderRange,
			},
		},
		{"sema.AmbiguousIntersectionTypeError",
			&sema.AmbiguousIntersectionTypeError{
				Range: placeholderRange,
			},
		},
		{"sema.AssignmentToConstantError",
			&sema.AssignmentToConstantError{
				Name:  placeholderString,
				Range: placeholderRange,
			},
		},
		{"sema.AssignmentToConstantMemberError",
			&sema.AssignmentToConstantMemberError{
				Name:  placeholderString,
				Range: placeholderRange,
			},
		},
		{"sema.AttachNonAttachmentError",
			&sema.AttachNonAttachmentError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.AttachToInvalidTypeError",
			&sema.AttachToInvalidTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.CompositeKindMismatchError",
			&sema.CompositeKindMismatchError{
				ExpectedKind: placeholderCompositeKind,
				ActualKind:   placeholderCompositeKind,
				Range:        placeholderRange,
			},
		},
		{"sema.ConformanceError",
			&sema.ConformanceError{
				CompositeDeclaration:        placeholderCompositeLikeDeclaration,
				CompositeType:               placeholderCompositeType,
				InterfaceType:               placeholderInterfaceType,
				NestedInterfaceType:         placeholderInterfaceType,
				InitializerMismatch:         placeholderInitializerMismatch,
				MissingMembers:              placeholderMembers,
				MemberMismatches:            placeholderMemberMismatches,
				MissingNestedCompositeTypes: placeholderCompositeTypes,
				Pos:                         placeholderPosition,
			},
		},
		{"sema.ConstantSizedArrayLiteralSizeError",
			&sema.ConstantSizedArrayLiteralSizeError{
				ActualSize:   placeholderInt,
				ExpectedSize: placeholderInt,
				Range:        placeholderRange,
			},
		},
		{"sema.ControlStatementError",
			&sema.ControlStatementError{
				ControlStatement: placeholderControlStatement,
				Range:            placeholderRange,
			},
		},
		{"sema.CyclicConformanceError",
			sema.CyclicConformanceError{
				InterfaceType: placeholderInterfaceType,
				Range:         placeholderRange,
			},
		},
		{"sema.CyclicEntitlementMappingError",
			&sema.CyclicEntitlementMappingError{
				Map:          placeholderEntitlementMapType,
				IncludedType: placeholderEntitlementMapType,
				Range:        placeholderRange,
			},
		},
		{"sema.CyclicImportsError",
			&sema.CyclicImportsError{
				Location: placeholderLocation,
				Range:    placeholderRange,
			},
		},
		{"sema.DefaultDestroyEventInNonResourceError",
			&sema.DefaultDestroyEventInNonResourceError{
				Kind:  placeholderString,
				Range: placeholderRange,
			},
		},
		{"sema.DefaultDestroyInvalidArgumentError",
			&sema.DefaultDestroyInvalidArgumentError{
				Range: placeholderRange,
				Kind:  placeholderDefaultDestroyInvalidArgumentKind,
			},
		},
		{"sema.DefaultDestroyInvalidParameterError",
			&sema.DefaultDestroyInvalidParameterError{
				ParamType: placeholderSemaType,
				Range:     placeholderRange,
			},
		},
		{"sema.DirectEntitlementAnnotationError",
			&sema.DirectEntitlementAnnotationError{
				Range: placeholderRange,
			},
		},
		{"sema.DuplicateConformanceError",
			&sema.DuplicateConformanceError{
				CompositeKindedType: placeholderCompositeKindedType,
				InterfaceType:       placeholderInterfaceType,
				Range:               placeholderRange,
			},
		},
		{"sema.DuplicateEntitlementMappingInclusionError",
			&sema.DuplicateEntitlementMappingInclusionError{
				Map:          placeholderEntitlementMapType,
				IncludedType: placeholderEntitlementMapType,
				Range:        placeholderRange,
			},
		},
		{"sema.EmitDefaultDestroyEventError",
			&sema.EmitDefaultDestroyEventError{
				Range: placeholderRange,
			},
		},
		{"sema.EmitImportedEventError",
			&sema.EmitImportedEventError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.EmitNonEventError",
			&sema.EmitNonEventError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.ExcessiveArgumentsError",
			&sema.ExcessiveArgumentsError{
				MaxCount:    placeholderInt,
				ActualCount: placeholderInt,
				Range:       placeholderRange,
			},
		},
		{"sema.FieldReinitializationError",
			&sema.FieldReinitializationError{
				Name:  placeholderString,
				Range: placeholderRange,
			},
		},
		{"sema.FieldTypeNotStorableError",
			&sema.FieldTypeNotStorableError{
				Type: placeholderSemaType,
				Name: placeholderString,
				Pos:  placeholderPosition,
			},
		},
		{"sema.FieldUninitializedError",
			&sema.FieldUninitializedError{
				ContainerType: placeholderSemaType,
				Name:          placeholderString,
				Pos:           placeholderPosition,
			},
		},
		{"sema.FunctionExpressionInConditionError",
			&sema.FunctionExpressionInConditionError{
				Range: placeholderRange,
			},
		},
		{"sema.ImportedProgramError",
			&sema.ImportedProgramError{
				Err:      placeholderError,
				Location: placeholderLocation,
				Range:    placeholderRange,
			},
		},
		{"sema.IncorrectArgumentLabelError",
			&sema.IncorrectArgumentLabelError{
				ExpectedArgumentLabel: placeholderString,
				ActualArgumentLabel:   placeholderString,
				Range:                 placeholderRange,
			},
		},
		{"sema.IncorrectTransferOperationError",
			&sema.IncorrectTransferOperationError{
				ActualOperation:   placeholderTransferOperation,
				ExpectedOperation: placeholderTransferOperation,
				Range:             placeholderRange,
			},
		},
		{"sema.InsufficientArgumentsError",
			&sema.InsufficientArgumentsError{
				MinCount:    placeholderInt,
				ActualCount: placeholderInt,
				Range:       placeholderRange,
			},
		},
		{"sema.InterfaceMemberConflictError",
			&sema.InterfaceMemberConflictError{
				InterfaceType:            placeholderInterfaceType,
				ConflictingInterfaceType: placeholderInterfaceType,
				MemberName:               placeholderString,
				MemberKind:               placeholderDeclarationKind,
				ConflictingMemberKind:    placeholderDeclarationKind,
				Range:                    placeholderRange,
			},
		},
		{"sema.IntersectionCompositeKindMismatchError",
			&sema.IntersectionCompositeKindMismatchError{
				CompositeKind:         placeholderCompositeKind,
				PreviousCompositeKind: placeholderCompositeKind,
				Range:                 placeholderRange,
			},
		},
		{"sema.IntersectionMemberClashError",
			&sema.IntersectionMemberClashError{
				RedeclaringType:       placeholderInterfaceType,
				OriginalDeclaringType: placeholderInterfaceType,
				Name:                  placeholderString,
				Range:                 placeholderRange,
			},
		},
		{"sema.InvalidAccessError",
			&sema.InvalidAccessError{
				Name:                placeholderString,
				RestrictingAccess:   placeholderSemaAccess,
				PossessedAccess:     placeholderSemaAccess,
				DeclarationKind:     placeholderDeclarationKind,
				SuggestEntitlements: false,
				Range:               placeholderRange,
			},
		},
		{"sema.InvalidAccessModifierError",
			&sema.InvalidAccessModifierError{
				Explanation:     placeholderString,
				Pos:             placeholderPosition,
				DeclarationKind: placeholderDeclarationKind,
				Access:          placeholderSemaAccess,
			},
		},
		{"sema.InvalidAddressLiteralError",
			&sema.InvalidAddressLiteralError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidAssignmentAccessError",
			&sema.InvalidAssignmentAccessError{
				Name:              placeholderString,
				ContainerType:     placeholderSemaType,
				RestrictingAccess: placeholderSemaAccess,
				DeclarationKind:   placeholderDeclarationKind,
				Range:             placeholderRange,
			},
		},
		{"sema.InvalidAssignmentTargetError",
			&sema.InvalidAssignmentTargetError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidAttachmentAnnotationError",
			&sema.InvalidAttachmentAnnotationError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidAttachmentConformancesError",
			&sema.InvalidAttachmentConformancesError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidAttachmentEntitlementError",
			&sema.InvalidAttachmentEntitlementError{
				Attachment:         placeholderCompositeType,
				BaseType:           placeholderSemaType,
				InvalidEntitlement: placeholderEntitlementType,
				Pos:                placeholderPosition,
			},
		},
		{"sema.InvalidAttachmentRemoveError",
			&sema.InvalidAttachmentRemoveError{
				Attachment: placeholderSemaType,
				BaseType:   placeholderSemaType,
				Range:      placeholderRange,
			},
		},
		{"sema.InvalidAttachmentUsageError",
			&sema.InvalidAttachmentUsageError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidBaseTypeError",
			&sema.InvalidBaseTypeError{
				BaseType:   placeholderSemaType,
				Attachment: placeholderCompositeType,
				Range:      placeholderRange,
			},
		},
		{"sema.InvalidBinaryOperandError",
			&sema.InvalidBinaryOperandError{
				ExpectedType: placeholderSemaType,
				ActualType:   placeholderSemaType,
				Range:        placeholderRange,
				Operation:    placeholderOperation,
				Side:         placeholderOperandSide,
			},
		},
		{"sema.InvalidBinaryOperandsError",
			&sema.InvalidBinaryOperandsError{
				LeftType:  placeholderSemaType,
				RightType: placeholderSemaType,
				Range:     placeholderRange,
				Operation: placeholderOperation,
			},
		},
		{"sema.InvalidCharacterLiteralError",
			&sema.InvalidCharacterLiteralError{
				Length: placeholderInt,
				Range:  placeholderRange,
			},
		},
		{"sema.InvalidConformanceError",
			&sema.InvalidConformanceError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidConstantSizedTypeBaseError",
			&sema.InvalidConstantSizedTypeBaseError{
				ActualBase:   placeholderInt,
				ExpectedBase: placeholderInt,
				Range:        placeholderRange,
			},
		},
		{"sema.InvalidConstantSizedTypeSizeError",
			&sema.InvalidConstantSizedTypeSizeError{
				ActualSize:     placeholderBigInt,
				ExpectedMinInt: placeholderBigInt,
				ExpectedMaxInt: placeholderBigInt,
				Range:          placeholderRange,
			},
		},
		{"sema.InvalidConstructionError",
			&sema.InvalidConstructionError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidDeclarationError",
			&sema.InvalidDeclarationError{
				Identifier: placeholderString,
				Kind:       placeholderDeclarationKind,
				Range:      placeholderRange,
			},
		},
		{"sema.InvalidDestructionError",
			&sema.InvalidDestructionError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidDictionaryKeyTypeError",
			&sema.InvalidDictionaryKeyTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidEmitConditionError",
			&sema.InvalidEmitConditionError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidEntitlementAccessError",
			&sema.InvalidEntitlementAccessError{
				Pos: placeholderPosition,
			},
		},
		{"sema.InvalidEntitlementMappingInclusionError",
			&sema.InvalidEntitlementMappingInclusionError{
				Map:          placeholderEntitlementMapType,
				IncludedType: placeholderSemaType,
				Range:        placeholderRange,
			},
		},
		{"sema.InvalidEntitlementMappingTypeError",
			&sema.InvalidEntitlementMappingTypeError{
				Type: placeholderSemaType,
				Pos:  placeholderPosition,
			},
		},
		{"sema.InvalidEnumCaseError",
			&sema.InvalidEnumCaseError{
				ContainerDeclarationKind: placeholderDeclarationKind,
				Range:                    placeholderRange,
			},
		},
		{"sema.InvalidEnumConformancesError",
			&sema.InvalidEnumConformancesError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidEnumRawTypeError",
			&sema.InvalidEnumRawTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidEventParameterTypeError",
			&sema.InvalidEventParameterTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidEventUsageError",
			&sema.InvalidEventUsageError{
				EventName: placeholderString,
				Range:     placeholderRange,
			},
		},
		{"sema.InvalidFailableResourceDowncastOutsideOptionalBindingError",
			&sema.InvalidFailableResourceDowncastOutsideOptionalBindingError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidFixedPointLiteralRangeError",
			&sema.InvalidFixedPointLiteralRangeError{
				ExpectedType:          placeholderSemaType,
				ExpectedMinInt:        placeholderBigInt,
				ExpectedMinFractional: placeholderBigInt,
				ExpectedMaxInt:        placeholderBigInt,
				ExpectedMaxFractional: placeholderBigInt,
				Range:                 placeholderRange,
			},
		},
		{"sema.InvalidFixedPointLiteralScaleError",
			&sema.InvalidFixedPointLiteralScaleError{
				ExpectedType:  placeholderSemaType,
				ExpectedScale: placeholderInt,
				Range:         placeholderRange,
			},
		},
		{"sema.InvalidImplementationError",
			&sema.InvalidImplementationError{
				ImplementedKind: placeholderDeclarationKind,
				ContainerKind:   placeholderDeclarationKind,
				Pos:             placeholderPosition,
			},
		},
		{"sema.InvalidIntegerLiteralRangeError",
			&sema.InvalidIntegerLiteralRangeError{
				ExpectedType:   placeholderSemaType,
				ExpectedMinInt: placeholderBigInt,
				ExpectedMaxInt: placeholderBigInt,
				Range:          placeholderRange,
			},
		},
		{"sema.InvalidInterfaceConditionResourceInvalidationError",
			&sema.InvalidInterfaceConditionResourceInvalidationError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidInterfaceDeclarationError",
			&sema.InvalidInterfaceDeclarationError{
				CompositeKind: placeholderCompositeKind,
				Range:         placeholderRange,
			},
		},
		{"sema.InvalidInterfaceTypeError",
			&sema.InvalidInterfaceTypeError{
				ActualType:   placeholderSemaType,
				ExpectedType: placeholderSemaType,
				Range:        placeholderRange,
			},
		},
		{"sema.InvalidIntersectedTypeError",
			&sema.InvalidIntersectedTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidIntersectionTypeDuplicateError",
			&sema.InvalidIntersectionTypeDuplicateError{
				Type:  placeholderInterfaceType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidMappingAccessError",
			&sema.InvalidMappingAccessError{
				Pos: placeholderPosition,
			},
		},
		{"sema.InvalidMappingAccessMemberTypeError",
			&sema.InvalidMappingAccessMemberTypeError{
				Pos: placeholderPosition,
			},
		},
		{"sema.InvalidMappingAuthorizationError",
			&sema.InvalidMappingAuthorizationError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidMoveError",
			&sema.InvalidMoveError{
				Name:            placeholderString,
				DeclarationKind: placeholderDeclarationKind,
				Pos:             placeholderPosition,
			},
		},
		{"sema.InvalidMoveOperationError",
			&sema.InvalidMoveOperationError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidNameError",
			&sema.InvalidNameError{
				Name: placeholderString,
				Pos:  placeholderPosition,
			},
		},
		{"sema.InvalidNativeModifierError",
			&sema.InvalidNativeModifierError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidNestedDeclarationError",
			&sema.InvalidNestedDeclarationError{
				NestedDeclarationKind:    placeholderDeclarationKind,
				ContainerDeclarationKind: placeholderDeclarationKind,
				Range:                    placeholderRange,
			},
		},
		{"sema.InvalidNestedResourceMoveError",
			&sema.InvalidNestedResourceMoveError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidNestedTypeError",
			&sema.InvalidNestedTypeError{
				Type: placeholderNominalType,
			},
		},
		{"sema.InvalidNonEntitlementAccessError",
			&sema.InvalidNonEntitlementAccessError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidNonEntitlementTypeInMapError",
			&sema.InvalidNonEntitlementTypeInMapError{
				Pos: placeholderPosition,
			},
		},
		{"sema.InvalidNonEnumCaseError",
			&sema.InvalidNonEnumCaseError{
				ContainerDeclarationKind: placeholderDeclarationKind,
				Range:                    placeholderRange,
			},
		},
		{"sema.InvalidNonIdentifierFailableResourceDowncast",
			&sema.InvalidNonIdentifierFailableResourceDowncast{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidNonImportableTransactionParameterTypeError",
			&sema.InvalidNonImportableTransactionParameterTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidOptionalChainingError",
			&sema.InvalidOptionalChainingError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidPathDomainError",
			&sema.InvalidPathDomainError{
				ActualDomain: placeholderString,
				Range:        placeholderRange,
			},
		},
		{"sema.InvalidPragmaError",
			&sema.InvalidPragmaError{
				Message: placeholderString,
				Range:   placeholderRange,
			},
		},
		{"sema.InvalidResourceAnnotationError",
			&sema.InvalidResourceAnnotationError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidResourceArrayMemberError",
			&sema.InvalidResourceArrayMemberError{
				Name:            placeholderString,
				DeclarationKind: placeholderDeclarationKind,
				Range:           placeholderRange,
			},
		},
		{"sema.InvalidResourceAssignmentError",
			&sema.InvalidResourceAssignmentError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidResourceCreationError",
			&sema.InvalidResourceCreationError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidResourceDictionaryMemberError",
			&sema.InvalidResourceDictionaryMemberError{
				Name:            placeholderString,
				DeclarationKind: placeholderDeclarationKind,
				Range:           placeholderRange,
			},
		},
		{"sema.InvalidResourceFieldError",
			&sema.InvalidResourceFieldError{
				Name:          placeholderString,
				CompositeKind: placeholderCompositeKind,
				Pos:           placeholderPosition,
			},
		},
		{"sema.InvalidResourceOptionalMemberError",
			&sema.InvalidResourceOptionalMemberError{
				Name:            placeholderString,
				DeclarationKind: placeholderDeclarationKind,
				Range:           placeholderRange,
			},
		},
		{"sema.InvalidResourceTransactionParameterError",
			&sema.InvalidResourceTransactionParameterError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidSelfInvalidationError",
			&sema.InvalidSelfInvalidationError{
				InvalidationKind: placeholderResourceInvalidationKind,
				Range:            placeholderRange,
			},
		},
		{"sema.InvalidStaticModifierError",
			&sema.InvalidStaticModifierError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidSwapExpressionError",
			&sema.InvalidSwapExpressionError{
				Side:  placeholderOperandSide,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidTopLevelDeclarationError",
			&sema.InvalidTopLevelDeclarationError{
				DeclarationKind: placeholderDeclarationKind,
				Range:           placeholderRange,
			},
		},
		{"sema.InvalidTransactionBlockError",
			&sema.InvalidTransactionBlockError{
				Name: placeholderString,
				Pos:  placeholderPosition,
			},
		},
		{"sema.InvalidTransactionFieldAccessModifierError",
			&sema.InvalidTransactionFieldAccessModifierError{
				Name:   placeholderString,
				Access: placeholderAstAccess,
				Pos:    placeholderPosition,
			},
		},
		{"sema.InvalidTransactionPrepareParameterTypeError",
			&sema.InvalidTransactionPrepareParameterTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidTypeArgumentCountError",
			&sema.InvalidTypeArgumentCountError{
				TypeParameterCount: placeholderInt,
				TypeArgumentCount:  placeholderInt,
				Range:              placeholderRange,
			},
		},
		{"sema.InvalidTypeArgumentError",
			&sema.InvalidTypeArgumentError{
				TypeArgumentName: placeholderString,
				Details:          placeholderString,
				Range:            placeholderRange,
			},
		},
		{"sema.InvalidTypeIndexingError",
			&sema.InvalidTypeIndexingError{
				IndexingExpression: placeholderExpression,
				BaseType:           placeholderSemaType,
				Range:              placeholderRange,
			},
		},
		{"sema.InvalidTypeParameterizedNonNativeFunctionError",
			&sema.InvalidTypeParameterizedNonNativeFunctionError{
				Range: placeholderRange,
			},
		},
		{"sema.InvalidUnaryOperandError",
			&sema.InvalidUnaryOperandError{
				ExpectedType:            placeholderSemaType,
				ExpectedTypeDescription: placeholderString,
				ActualType:              placeholderSemaType,
				Range:                   placeholderRange,
				Operation:               placeholderOperation,
			},
		},
		{"sema.InvalidVariableKindError",
			&sema.InvalidVariableKindError{
				Kind:  placeholderVariableKind,
				Range: placeholderRange,
			},
		},
		{"sema.InvalidatedResourceReferenceError",
			&sema.InvalidatedResourceReferenceError{
				Invalidation: placeholderResourceInvalidation,
				Range:        placeholderRange,
			},
		},
		{"sema.InvocationTypeInferenceError",
			&sema.InvocationTypeInferenceError{
				Range: placeholderRange,
			},
		},
		{"sema.MappingAccessMissingKeywordError",
			&sema.MappingAccessMissingKeywordError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.MissingAccessModifierError",
			&sema.MissingAccessModifierError{
				Explanation:     placeholderString,
				Pos:             placeholderPosition,
				DeclarationKind: placeholderDeclarationKind,
			},
		},
		{"sema.MissingArgumentLabelError",
			&sema.MissingArgumentLabelError{
				ExpectedArgumentLabel: placeholderString,
				Range:                 placeholderRange,
			},
		},
		{"sema.MissingConformanceError",
			&sema.MissingConformanceError{
				CompositeType: placeholderCompositeType,
				InterfaceType: placeholderInterfaceType,
				Range:         placeholderRange,
			},
		},
		{"sema.MissingCreateError",
			&sema.MissingCreateError{
				Range: placeholderRange,
			},
		},
		{"sema.MissingEnumRawTypeError",
			&sema.MissingEnumRawTypeError{
				Pos: placeholderPosition,
			},
		},
		{"sema.MissingFunctionBodyError",
			&sema.MissingFunctionBodyError{
				Pos: placeholderPosition,
			},
		},
		{"sema.MissingInitializerError",
			&sema.MissingInitializerError{
				ContainerType:  placeholderSemaType,
				FirstFieldName: placeholderString,
				FirstFieldPos:  placeholderPosition,
			},
		},
		{"sema.MissingMoveOperationError",
			&sema.MissingMoveOperationError{
				Pos: placeholderPosition,
			},
		},
		{"sema.MissingResourceAnnotationError",
			&sema.MissingResourceAnnotationError{
				Range: placeholderRange,
			},
		},
		{"sema.MissingReturnStatementError",
			&sema.MissingReturnStatementError{
				Range: placeholderRange,
			},
		},
		{"sema.MissingReturnValueError",
			&sema.MissingReturnValueError{
				ExpectedValueType: placeholderSemaType,
				Range:             placeholderRange,
			},
		},
		{"sema.MissingSwitchCaseStatementsError",
			&sema.MissingSwitchCaseStatementsError{
				Pos: placeholderPosition,
			},
		},
		{"sema.MissingTypeArgumentError",
			&sema.MissingTypeArgumentError{
				TypeArgumentName: placeholderString,
				Range:            placeholderRange,
			},
		},
		{"sema.MultipleInterfaceDefaultImplementationsError",
			&sema.MultipleInterfaceDefaultImplementationsError{
				CompositeKindedType: placeholderCompositeKindedType,
				Member:              placeholderMember,
				Range:               placeholderRange,
			},
		},
		{"sema.NativeFunctionWithImplementationError",
			&sema.NativeFunctionWithImplementationError{
				Range: placeholderRange,
			},
		},
		{"sema.NestedReferenceError",
			&sema.NestedReferenceError{
				Type:  placeholderReferenceType,
				Range: placeholderRange,
			},
		},
		{"sema.NonReferenceTypeReferenceError",
			&sema.NonReferenceTypeReferenceError{
				ActualType: placeholderSemaType,
				Range:      placeholderRange,
			},
		},
		{"sema.NonResourceTypeError",
			&sema.NonResourceTypeError{
				ActualType: placeholderSemaType,
				Range:      placeholderRange,
			},
		},
		{"sema.NotCallableError",
			&sema.NotCallableError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.NotDeclaredError",
			&sema.NotDeclaredError{
				Expression:   placeholderIdentifierExpression,
				Name:         placeholderString,
				Pos:          placeholderPosition,
				ExpectedKind: placeholderDeclarationKind,
			},
		},
		{"sema.NotDeclaredMemberError",
			&sema.NotDeclaredMemberError{
				Type:          placeholderSemaType,
				Expression:    placeholderMemberExpression,
				Name:          placeholderString,
				Range:         placeholderRange,
				SuggestMember: false,
			},
		},
		{"sema.NotEquatableTypeError",
			&sema.NotEquatableTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.NotExportedError",
			&sema.NotExportedError{
				Name:           placeholderString,
				ImportLocation: placeholderLocation,
				Available:      placeholderStrings,
				Pos:            placeholderPosition,
			},
		},
		{"sema.NotIndexableTypeError",
			&sema.NotIndexableTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.NotIndexingAssignableTypeError",
			&sema.NotIndexingAssignableTypeError{
				Type:  placeholderSemaType,
				Range: placeholderRange,
			},
		},
		{"sema.PurityError",
			&sema.PurityError{
				Range: placeholderRange,
			},
		},
		{"sema.ReadOnlyTargetAssignmentError",
			&sema.ReadOnlyTargetAssignmentError{
				Range: placeholderRange,
			},
		},
		{"sema.RedeclarationError",
			&sema.RedeclarationError{
				PreviousPos: &placeholderPosition,
				Name:        placeholderString,
				Pos:         placeholderPosition,
				Kind:        placeholderDeclarationKind,
			},
		},
		{"sema.ReferenceToAnOptionalError",
			&sema.ReferenceToAnOptionalError{
				ReferencedOptionalType: placeholderOptionalType,
				Range:                  placeholderRange,
			},
		},
		{"sema.ResourceCapturingError",
			&sema.ResourceCapturingError{
				Name: placeholderString,
				Pos:  placeholderPosition,
			},
		},
		{"sema.ResourceFieldNotInvalidatedError",
			&sema.ResourceFieldNotInvalidatedError{
				Type:      placeholderSemaType,
				FieldName: placeholderString,
				Pos:       placeholderPosition,
			},
		},
		{"sema.ResourceLossError",
			&sema.ResourceLossError{
				Range: placeholderRange,
			},
		},
		{"sema.ResourceMethodBindingError",
			&sema.ResourceMethodBindingError{
				Range: placeholderRange,
			},
		},
		{"sema.ResourceUseAfterInvalidationError",
			&sema.ResourceUseAfterInvalidationError{
				Invalidation: placeholderResourceInvalidation,
				Range:        placeholderRange,
			},
		},
		{"sema.ResultVariableConflictError",
			&sema.ResultVariableConflictError{
				Kind:                placeholderDeclarationKind,
				Pos:                 placeholderPosition,
				ReturnTypeRange:     placeholderRange,
				PostConditionsRange: placeholderRange,
			},
		},
		{"sema.SpecialFunctionDefaultImplementationError",
			&sema.SpecialFunctionDefaultImplementationError{
				Container:  placeholderDeclaration,
				Identifier: placeholderIdentifier,
				KindName:   placeholderString,
			},
		},
		{"sema.SwitchDefaultPositionError",
			&sema.SwitchDefaultPositionError{
				Range: placeholderRange,
			},
		},
		{"sema.TransactionMissingPrepareError",
			&sema.TransactionMissingPrepareError{
				FirstFieldName: placeholderString,
				FirstFieldPos:  placeholderPosition,
			},
		},
		{"sema.TypeAnnotationRequiredError",
			&sema.TypeAnnotationRequiredError{
				Cause: placeholderString,
				Pos:   placeholderPosition,
			},
		},
		{"sema.TypeMismatchError",
			&sema.TypeMismatchError{
				ExpectedType: placeholderSemaType,
				ActualType:   placeholderSemaType,
				Expression:   placeholderExpression,
				Range:        placeholderRange,
			},
		},
		{"sema.TypeMismatchWithDescriptionError",
			&sema.TypeMismatchWithDescriptionError{
				ActualType:              placeholderSemaType,
				ExpectedTypeDescription: placeholderString,
				Range:                   placeholderRange,
			},
		},
		{"sema.TypeParameterTypeInferenceError",
			&sema.TypeParameterTypeInferenceError{
				Name:  placeholderString,
				Range: placeholderRange,
			},
		},
		{"sema.TypeParameterTypeMismatchError",
			&sema.TypeParameterTypeMismatchError{
				TypeParameter: placeholderTypeParameter,
				ExpectedType:  placeholderSemaType,
				ActualType:    placeholderSemaType,
				Range:         placeholderRange,
			},
		},
		{"sema.UnauthorizedReferenceAssignmentError",
			&sema.UnauthorizedReferenceAssignmentError{
				RequiredAccess: placeholderTwoSemaAccessArray,
				FoundAccess:    placeholderSemaAccess,
				Range:          placeholderRange,
			},
		},
		{"sema.UnconvertableTypeError",
			&sema.UnconvertableTypeError{
				Type:  placeholderAstType,
				Range: placeholderRange,
			},
		},
		{"sema.UninitializedFieldAccessError",
			&sema.UninitializedFieldAccessError{
				Name: placeholderString,
				Pos:  placeholderPosition,
			},
		},
		{"sema.UninitializedUseError",
			&sema.UninitializedUseError{
				Name: placeholderString,
				Pos:  placeholderPosition,
			},
		},
		{"sema.UnknownSpecialFunctionError",
			&sema.UnknownSpecialFunctionError{
				Pos: placeholderPosition,
			},
		},
		{"sema.UnparameterizedTypeInstantiationError",
			&sema.UnparameterizedTypeInstantiationError{
				ActualTypeArgumentCount: placeholderInt,
				Range:                   placeholderRange,
			},
		},
		{"sema.UnreachableStatementError",
			&sema.UnreachableStatementError{
				Range: placeholderRange,
			},
		},
		{"sema.UnrepresentableEntitlementMapOutputError",
			&sema.UnrepresentableEntitlementMapOutputError{
				Input: placeholderEntitlementSetAccess,
				Map:   placeholderEntitlementMapType,
				Range: placeholderRange,
			},
		},
		{"sema.UnresolvedImportError",
			&sema.UnresolvedImportError{
				ImportLocation: placeholderLocation,
				Range:          placeholderRange,
			},
		},
		{"sema.UnsupportedOptionalChainingAssignmentError",
			&sema.UnsupportedOptionalChainingAssignmentError{
				Range: placeholderRange,
			},
		},
		{"sema.UnsupportedOverloadingError",
			&sema.UnsupportedOverloadingError{
				DeclarationKind: placeholderDeclarationKind,
				Range:           placeholderRange,
			},
		},
		{"sema.UnsupportedResourceForLoopError",
			&sema.UnsupportedResourceForLoopError{
				Range: placeholderRange,
			},
		},
	}
}
