// Code generated by "stringer -type=TokenType -trimprefix Token"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenError-0]
	_ = x[TokenEOF-1]
	_ = x[TokenSpace-2]
	_ = x[TokenNumber-3]
	_ = x[TokenIdentifier-4]
	_ = x[TokenOperatorPlus-5]
	_ = x[TokenOperatorMinus-6]
	_ = x[TokenOperatorMul-7]
	_ = x[TokenOperatorDiv-8]
	_ = x[TokenOperatorNilCoalesce-9]
	_ = x[TokenParenOpen-10]
	_ = x[TokenParenClose-11]
	_ = x[TokenBraceOpen-12]
	_ = x[TokenBraceClose-13]
	_ = x[TokenBracketOpen-14]
	_ = x[TokenBracketClose-15]
}

const _TokenType_name = "ErrorEOFSpaceNumberIdentifierOperatorPlusOperatorMinusOperatorMulOperatorDivOperatorNilCoalesceParenOpenParenCloseBraceOpenBraceCloseBracketOpenBracketClose"

var _TokenType_index = [...]uint8{0, 5, 8, 13, 19, 29, 41, 54, 65, 76, 95, 104, 114, 123, 133, 144, 156}

func (i TokenType) String() string {
	if i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
