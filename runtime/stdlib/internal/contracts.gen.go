// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (5.975kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x4f\x1b\xb9\x17\x7f\xcf\xa7\x38\x7f\x9e\x12\xfd\x43\xa0\x61\xcb\x43\xa4\x69\xc5\xf6\xb2\x8d\xda\xdd\x45\xa4\xa5\x0f\x08\x51\x33\x73\x32\xb1\x32\x78\x22\xdb\x93\x90\x45\x7c\xf7\xd5\xdc\x7d\x6c\x4f\x08\x5d\x56\x9b\x07\x98\xe4\xdc\x7f\xe7\xe2\xf1\xe9\xad\xb2\x5b\x50\x5a\x66\xa1\x06\x2e\x34\xca\x39\x0b\x11\x66\x3c\x16\x4c\x67\x12\x2f\x51\xf2\x39\x47\x09\xf0\xd0\xeb\x01\x00\xe4\xec\xf3\x4c\xc0\x3a\x27\x6c\xfb\xc5\x6f\xf9\x47\xd5\x12\x13\xb8\x9a\x0a\x7d\x3d\x6c\x28\x9a\xc5\x13\x98\x69\xc9\x45\x3c\x24\xec\x18\xbd\x67\x9a\x39\xfc\xab\xec\x36\xe1\xe1\x67\xdc\x3a\x94\xc6\xc6\x59\x12\xa7\x92\xeb\xc5\x9d\xab\x78\xc1\xd4\xc2\x21\x17\xd4\xc1\x04\x7e\x4d\xd3\xa4\xf7\xd8\x2b\x62\x0e\x53\xa1\x25\x0b\x35\xbc\x93\xdb\x95\x4e\xcd\xf8\x2a\x38\x66\x8e\x39\x78\x30\xbd\x84\x04\x35\x08\x76\x87\x8d\x99\x86\xca\x05\xd7\x7d\x93\x34\x30\x44\x8b\x50\x30\x99\x8f\x72\x06\x08\x0a\x15\x0d\xf1\xb1\x57\xfe\x2d\xfe\x1d\x1d\xc1\x87\x77\xef\x67\x67\x37\xe7\xe3\xd7\xa7\xc0\x15\x7c\x48\x12\xbe\xd2\x3c\x84\x77\x99\x5c\x23\xbc\xe7\x31\xd7\x2c\x69\x3d\x85\xd6\xd5\x7e\x21\x39\x80\x54\x80\x5e\x20\xfc\x31\x9d\x7d\x85\xf3\xc3\x5c\x4f\x98\xcb\xf6\xcc\x20\x5a\x23\x13\x4f\xd4\x96\x2f\x33\x0c\x57\xe3\xd7\xa7\xcb\x57\xff\xcc\x21\xd5\xa8\xe9\xf2\xa7\x31\xd4\xed\x94\x91\xad\x4f\x66\xe2\xff\x83\x44\xcd\x3e\x9d\x8d\x6f\xaa\x34\xcd\x30\xcc\x63\xcf\x5d\xe2\x22\x36\x30\x18\x43\x7f\xf6\xe9\xec\x70\x3c\x80\x0d\xd7\x0b\x60\x30\x7e\x7d\x7a\x78\xcb\x35\x44\x3c\x46\xa5\x09\x08\xb5\xc2\x09\x0d\xcd\x34\x78\xf2\xa4\xc1\x93\xd2\xe0\xc9\x9e\x06\x4f\x3a\x0d\x1a\x48\x9f\xd7\x0d\xea\x41\xd9\x6e\x5e\x87\xc1\xdb\xc3\x1d\xd9\x6d\x12\xe4\x8c\x84\x3d\xd5\x78\x93\xd9\x28\x83\xa0\x75\xd7\x65\x73\x2d\x40\xe0\x31\xeb\xaf\x07\x03\xad\xcf\xb8\xfd\xc2\x95\xfe\x20\xb4\xf4\x01\xb6\xc4\xed\x54\x44\x78\x3f\x81\xa9\xd0\xbb\xe0\x3c\x77\x5c\xad\x99\xac\x91\x47\x93\x67\x33\x6f\x90\xc7\x0b\x3d\x81\x6f\x1f\xf9\xfd\xe9\x2f\x0e\x99\xab\x0b\x5c\xa7\x4b\x8c\xaa\x61\x49\xf3\x40\x50\x22\x9e\x0f\x09\xc9\xe7\x36\xe5\xd8\xe5\x33\xe5\xa4\x0e\x53\x9a\xed\x6d\xfd\xbb\x37\xef\xb5\xbf\x10\x34\xae\xff\x74\x71\x10\xf7\x21\xa0\xe1\xb8\xec\x65\x0c\x10\x54\xc1\xb8\x0c\x4d\x20\x10\xb4\x41\xed\x5b\x5a\xf5\xd1\x55\x50\x25\x5f\x17\x89\x44\xa1\x25\x47\x35\x81\x2b\xb3\x00\xaf\xad\x84\x7a\x81\xaa\x44\x21\x80\xab\x6b\xc3\x87\xe6\xf1\xe8\x08\xce\xa2\x48\x01\x03\x81\x9b\x1c\xcb\x72\xb6\xe4\x43\x3d\xe6\x6b\x14\x76\x94\xf5\x2b\x03\x8b\x22\x5a\x41\x37\xff\x62\xa1\xb4\xb5\x30\xb1\x5b\x90\x48\x99\x3d\x98\x37\xb8\x01\xc0\x28\x41\x11\xeb\x85\xc3\x8e\x85\x9e\x80\xa8\xa5\x81\x01\x69\x8f\xfa\x69\xe8\xf0\x18\xe1\xaf\xfc\xe1\x7b\x20\x58\x74\x43\x60\xc2\x50\xfe\x77\xe9\x46\xcf\xcc\x59\xa2\x90\x30\x0c\x3a\xab\x61\xc4\x56\x2b\x14\x51\xbf\x08\x9e\xb2\x49\xd4\x99\x14\x25\x2c\x1d\xf5\x72\x51\xb0\xa8\xa2\x46\xf2\x82\x61\xda\x28\x17\x5e\x80\x03\x7c\x0e\x5c\x03\xde\x73\xa5\xd5\x88\x0a\x97\xad\xb1\xc4\xad\x02\x26\x11\x58\xb2\x61\x5b\x55\xd9\xc5\x68\x08\xb7\x59\xa1\x6f\x0b\x0b\xb6\x46\xf8\xd1\x84\xf8\x03\xe6\x1c\x93\x08\x14\x6a\xd0\x29\x68\x99\xa1\x53\x95\x31\xea\x3e\x19\x65\x56\xc1\xbc\xb5\x5a\x84\xcf\xdb\x7a\x79\xe3\x2d\x18\x4b\xc0\x80\x48\xf0\x84\x90\x1e\x7b\x3e\x20\x4d\x95\x57\xb5\xad\xae\x4e\xfc\x9d\xc9\xe5\x2e\x5c\x41\x96\x50\x94\x20\x45\x29\x2a\x10\xa9\x86\x08\x13\xd4\x08\xdc\xed\xd2\x92\xdf\x82\xe4\xe5\x30\xb0\xe2\x37\xbf\xe5\xbd\x15\x66\x52\xa2\xa8\x5a\x35\x78\x0a\x0a\xb0\x8a\xb4\x65\x79\x46\x7b\x9a\x26\x47\x7b\xf5\x2a\x91\xd8\xbf\x71\x89\xd8\x9e\x5d\x4c\x64\xf6\x68\x69\x52\xe2\x40\x3a\xda\xa8\x9b\x3a\xd7\x5c\x5d\xb2\x84\x5b\x53\xb9\x79\xc7\x99\xa1\x6e\x8f\x8f\xe6\xe5\xea\x7a\xe8\x70\x93\x8b\x9c\x39\x78\xf3\x43\xd9\x1e\xb8\x6b\x26\x61\x9d\x5b\xfd\x5e\x44\xa3\xea\x81\x0d\x01\x1c\x8f\x8e\xdd\xe1\xac\x10\xc5\xe7\x22\x2b\x3c\xcc\xcf\xb3\x87\xa9\xd0\xa5\xe6\x47\x08\xe0\xc1\x6a\xa1\x79\x2a\xdb\x00\x80\x0b\x12\x8d\xed\x0a\x54\xd7\x1a\xa1\x72\xe6\xba\x87\xca\xb6\xe1\xaa\xf4\xd2\x95\xe0\xf3\x56\xe9\xe8\xf9\x6d\x00\x6d\xa3\xbb\xf3\x17\xdc\xa1\x60\x3b\xc9\x95\xe1\xe5\x82\x95\xed\xcc\x12\x89\x2c\xda\xc2\x2d\xa2\x28\x10\xf3\xbb\x4d\xa0\xbc\x72\xa3\xb8\x86\xb7\x6f\x4b\xaf\x5e\xce\xf1\x0b\x0c\x53\x19\x59\xe8\x6e\x98\xea\x70\x73\x0f\x1f\x83\xb2\xca\x7d\xc6\x7e\xc3\x72\x00\xb2\x50\x67\x2c\xc9\x0d\xba\x6c\xd5\x89\x6f\x4f\x17\x8f\xa5\xbd\xaa\xa5\x4c\x40\x35\x65\xbd\xb0\x2f\x71\x6b\xbc\xe0\xbd\x7c\x45\xa0\x59\xf1\xbb\xca\xf6\x7f\xe5\xaa\xa3\xbd\xda\xd4\xdb\x9d\x91\xbd\xcd\x21\x19\x69\x37\x3b\x2d\x46\xcd\x93\x3b\x8d\xa0\xde\xf9\x54\xd6\xa2\xf4\x8e\x71\x31\xc3\x15\x93\x4c\xf3\x54\x7c\x65\xf1\xc7\x24\xdd\x7c\x53\x28\xfd\xc2\xe6\x48\x69\x9f\xfd\xbc\xc6\x54\xce\x61\x6e\xbe\xee\x1a\xcb\xd0\xb1\x4a\xa2\x0a\x5c\x8e\x62\x0d\xe0\x57\x47\x27\x7d\xae\x88\xfc\x32\x22\x9b\x83\xfa\x63\x9f\xaa\xf5\xe7\xb9\xb5\x60\x4e\x53\x08\xe8\xd7\xff\x17\x51\x79\xae\x1d\xfe\x57\x0f\x22\xfb\x26\x80\x57\xa3\xe3\x7d\x6f\x21\xed\xca\xe7\xb9\x97\x5c\x7b\x75\x48\xcf\xa9\xe2\x9e\x42\xef\x9a\x8e\xc4\xcf\xdf\xf7\xda\xce\x31\x2e\xf7\x1d\x21\xd7\x57\xab\x1d\x05\x4d\x17\x4c\x8d\x84\xd3\x70\x13\x78\x70\x56\xac\x95\x99\x22\xde\xfd\x04\x06\xe6\x81\x46\xc3\x69\xf6\xb6\x81\x6b\x9c\xbc\x3f\x4e\x05\xd7\x9c\x25\xfc\x2f\x84\x30\x15\x4a\x33\xa1\x95\xa5\xd4\x58\x41\x06\x9e\x25\x4b\xb5\x3e\x3b\x68\xd9\x0e\x06\x3e\x05\xed\xde\xf0\x69\x2d\x0d\xef\xc1\xc0\x72\xa6\x59\xb3\x05\xf4\x2e\x58\xcb\xd7\x74\xdb\x87\x66\x5b\xd6\x2d\x77\x52\xc9\x51\xc1\x1d\xd9\x86\x00\x0e\x3e\x7e\xf9\xf3\xfb\xe1\xe5\xf1\xe8\xf8\x30\x53\x28\x0f\xaa\x82\x79\xfc\x3b\x00\x00\xff\xff\xf5\x00\x25\x61\x57\x17\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0xf, 0x2, 0x2f, 0xf2, 0x25, 0x94, 0x22, 0x9a, 0xf2, 0xea, 0x42, 0x62, 0xa, 0x27, 0x79, 0x73, 0xac, 0xc8, 0x2f, 0x71, 0x5b, 0xbe, 0xa1, 0xa1, 0xf6, 0xdd, 0x61, 0xe, 0x6a, 0x8e, 0xa0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"crypto.cdc": &bintree{contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
