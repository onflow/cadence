// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (6.519kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\xe5\x29\xc6\x5c\xb7\x4d\xd6\x60\x30\xa0\x16\x59\x9b\x2d\x41\xb7\x21\xa8\xdb\xee\x21\x08\x52\x46\x3a\xdb\x44\x54\xca\x20\x29\xa7\x5e\x90\xef\x3e\x90\x92\x28\x1e\x49\xa5\x4e\xd7\xcd\x0f\x89\x6c\xde\xdf\x1f\x7f\x77\x14\x6f\xb4\xae\xaf\x41\x69\x59\xe7\x1a\xb8\xd0\x28\x17\x2c\x47\x98\xf3\xa5\x60\xba\x96\xf8\x11\x25\x5f\x70\x94\x00\x77\xa3\x11\x00\x80\x11\x5f\xd4\x02\x36\x66\x61\xbb\x6f\x7f\x33\x1f\xd5\x69\xcc\xe0\xe2\xc3\x99\xd0\x3f\x5f\x4e\xdc\x9a\x66\xcb\x19\xcc\xb5\xe4\x62\x39\x21\x0a\x58\xbc\x61\x9a\x25\x34\xd6\xf5\x75\xc9\xf3\xb7\xb8\x4d\xac\x39\x4f\xc7\xe5\xb2\x92\x5c\xaf\x3e\xc7\xc6\x57\x4c\xad\xa2\x65\xbb\x3a\x9e\xc1\x2f\x55\x55\x8e\xee\x47\xe9\xcc\x4f\x99\x5a\x25\xd2\x35\x06\xfb\x64\x8b\x74\xd4\x6c\xc8\x63\x2b\xd9\x39\xcd\x2b\xa1\x25\xcb\x35\xbc\x96\xdb\xb5\xae\x7c\x5f\x6d\x3c\xf3\x28\x47\xb8\xf3\xc1\x81\x12\x35\x08\xf6\x19\x9d\x27\xb7\xca\x05\xd7\xfb\xfe\xd2\xd8\x53\xb5\xf8\x61\xb9\x98\x1a\x01\xc8\xac\x09\xb7\x78\x3f\x6a\xfe\xda\x7f\x4f\x9f\x3e\x85\x93\xd7\x6f\xe6\xc7\x57\xe7\x07\x2f\x8e\x80\x2b\x38\x29\x4b\xbe\xd6\x3c\x87\xd7\xb5\xdc\x20\xbc\xe1\x4b\xae\x59\xd9\x87\x0a\x7d\xac\xfb\x56\x73\x0c\x95\x00\xbd\x42\xf8\xf3\x6c\xfe\x1e\xce\x9f\x18\x3b\xb9\xd1\x1d\xf9\x59\xf4\x4e\x66\x89\xb4\xc3\x60\xe6\x98\xaf\x0f\x5e\x1c\xdd\x3c\xff\x77\x11\x29\x67\x66\x28\x20\xe7\x68\x38\x2a\x6f\xbf\x4e\x7d\xbe\xfd\x2f\x5b\x45\x5c\x38\x86\x5e\x51\x6a\xf6\xd4\x0b\x0c\x4b\xd4\xb5\x14\x2d\xff\xa6\x56\xd5\x28\x4e\x7c\x0a\x1b\xe7\xe3\x61\x72\xcc\x4f\x8f\x0f\xae\x5a\x6a\xcc\x31\x37\x70\x1b\x14\xb8\x58\x7a\xb0\x1f\xc0\xfe\xfc\xf4\xf8\xc9\xc1\x18\x6e\xb9\x5e\x01\x83\x83\x17\x47\x4f\xae\xb9\x86\x82\x2f\x51\x69\x82\x7b\x67\x70\x46\xd1\x24\x1e\x0f\xbf\xea\xf1\xb0\xf1\x78\xb8\xa3\xc7\xc3\x41\x8f\x0f\xe1\x4a\x70\x22\xba\x49\xc4\x5b\xb4\xed\x6e\xae\x6c\x7f\xe9\x21\x9f\x41\x04\xbc\x7b\xb4\x5b\x3f\xf6\x81\xf7\x28\x77\xde\xb5\xc8\x04\xdd\xe2\xf6\x19\x89\x24\xbb\xe8\x00\xd1\x1d\x57\x13\x6d\x79\x47\x43\x49\x66\x3b\x73\x90\xf5\x21\xc7\x62\xb1\x07\xc8\x12\x6e\xd3\x54\xf5\x10\x7b\x8b\xdb\xdf\xb9\xd2\x27\x42\xcb\x14\x68\x37\xb8\x3d\x13\x05\x7e\x99\xc1\x99\xd0\x0f\x41\x7a\x1e\x85\xda\x09\x05\xc7\x0e\x65\x55\x28\x7c\x8b\x7c\xb9\xd2\x33\xf8\xf0\x2b\xff\x72\xf4\x53\xb4\xcc\xd5\x3b\xdc\x54\x37\x58\xb4\x07\x16\xdd\x09\x82\x12\x89\x7c\x42\x96\x52\x61\x53\x89\x87\x62\xa6\x92\x34\x60\xba\x16\x46\xdb\xfd\x9e\xdc\xf7\x2e\x5e\xc8\x5c\xe8\xdf\x4c\x0e\x12\x3e\x64\x34\x9d\x58\xbc\xc9\x01\xb2\x36\x99\x58\xc0\x25\x02\x59\x9f\xd4\xae\xd4\xea\x4e\x72\xbb\x2a\xf9\xc6\x6e\x24\x0a\x2d\x39\xaa\x19\x5c\xf8\x04\xbc\x0c\x36\x34\x09\x54\xab\x0a\x19\x5c\x5c\xa6\x7a\xbf\xe9\x8a\xc7\x45\xa1\x80\x81\xc0\x5b\x03\x66\xd3\xf5\xcc\x11\xb7\xe4\x1b\x14\x61\x9a\x5d\x53\x63\x45\x41\x29\x74\xf5\x1f\x32\xa5\x27\xc3\x2c\xac\x41\xa2\xe5\x17\xa1\xa9\x70\x0f\x81\x69\x89\x62\xa9\x57\x91\x38\x5a\x3b\x19\x31\x4b\x13\x03\x52\x1f\xdd\xd3\x24\x92\xf1\xd2\x5f\xa7\xd3\x4f\x40\xb0\x1a\x86\xc0\x87\xa1\xf9\x1f\xaf\x7b\x45\xb3\x60\xa5\x42\x22\x30\x1e\xa4\xc3\x94\xad\xd7\x28\x8a\x7d\x9b\xfc\x38\x75\xae\xdb\x95\x21\xc2\xbc\xb3\x32\xca\x92\xc4\x30\x86\x69\x8f\x2f\xdc\xa2\x03\x7c\x01\x5c\x03\x7e\xe1\x4a\xab\x69\xa0\xdd\x54\xc7\x0d\x6e\x15\x30\x89\xc0\xca\x5b\xb6\x55\xad\x67\x2c\x26\x70\x5d\x5b\x83\x5b\x58\xb1\x0d\xc2\x27\x97\xe4\x27\x58\x70\x2c\x0b\x50\xa8\x41\x57\xa0\x65\x8d\x11\x2f\x97\xa8\xf7\x49\x37\x0b\x28\xf3\x2a\xa8\x12\xbe\xe8\x19\xf3\x32\x49\x99\x40\xc1\x03\x49\xf0\x92\x2c\xdd\x8f\x52\x50\xfa\x26\x2f\x3a\x5f\x83\xc5\xf8\x07\x93\x37\x0f\x21\x0b\xb2\xc1\xa2\x41\xa9\xa8\x50\x81\xa8\x34\x14\x58\xa2\x46\xe0\x71\xa1\x36\xf2\x01\x26\xdf\x0f\x84\x00\x00\xff\x9b\x29\xaf\xbc\x96\x12\x45\x5b\xad\xd9\xd7\xb0\x80\x80\xa7\xbd\xc8\x23\x2a\xd4\x77\x39\xdd\xa9\x5c\x89\xc6\xee\xb5\x4b\xd4\x76\x2c\x64\xa2\xb3\x43\x55\x13\x8e\x03\x29\xea\xa1\xa2\x94\x35\x9a\x0d\xed\x79\xe3\x5e\x74\x9a\x72\xdb\xb0\x92\x17\xb0\xa8\x64\x20\x82\x85\x7d\x91\x8c\x08\xc4\xd5\x47\xa3\x41\x21\x77\x36\xe7\xa8\xfb\x73\xc9\xbd\xb5\x5d\x4e\x22\xe9\xe0\xa6\xee\xb7\x74\x73\xde\x87\xad\x7c\xc3\x64\x13\xe9\x5f\x16\x24\xd5\x1d\x05\x90\xc1\xb3\xe9\xb3\xb8\xed\x2b\x44\xf1\xd6\x6e\x36\xcf\xcd\x51\x79\x77\x26\x74\x63\xf9\x1e\x32\xb8\x0b\x4a\xd3\x64\xef\x52\x00\x2e\x48\x3e\x61\x28\x0d\xc2\x70\x22\x94\x11\xee\x4a\xb3\xa9\x46\xae\x9a\x28\x63\x0d\xbe\xe8\x8d\x4e\x1f\x5f\x5d\xd0\x37\x90\xb8\xb3\x43\xdc\x6c\xc2\x20\xb9\xf2\xa2\x5c\xb1\xa6\x4b\xb0\x52\x22\x2b\xb6\x70\x8d\x66\xcf\x11\x45\x3a\x6c\x02\xe5\x45\x9c\xc5\x25\xbc\x7a\xd5\x44\xf5\xfd\x02\x7f\x87\x79\x25\x8b\x00\xdd\x5b\xa6\x06\xc2\xdc\x21\xc6\xac\x29\x9e\x94\xb3\xdf\xb0\xe9\xab\x2c\xd7\x35\x2b\x8d\xc3\x58\xac\x7d\x97\x08\x9b\x56\xc2\xd3\x4e\x6c\x69\x36\xa0\x6d\xde\x49\xd8\x6f\x70\xeb\xbd\x3b\x7e\x7f\x46\xa0\xcf\xf8\x87\x68\xfb\x43\x7b\xa9\x57\xe1\x08\x6f\x1a\x8e\xec\xc8\x8e\xf4\xe3\xbb\x1e\x23\xf7\x14\x37\x39\xe8\xc6\x7a\xad\xb7\xa2\xfa\xcc\xb8\x98\xe3\x9a\x49\xa6\x79\x25\xde\xb3\xe5\x07\x85\x32\xad\xe8\x37\x94\xfe\x39\x2d\xeb\x35\x7a\x03\xb1\xfb\xfa\x50\xa7\x87\x81\x29\x21\x35\x10\x4b\xd8\xfb\x76\xda\x1c\x3d\x3c\x8c\x21\xf2\xcb\x94\x4c\x67\xba\x4f\x78\x50\x77\x9f\xc7\xf2\xc0\xef\xa4\x90\xd1\xaf\x3f\xda\xac\x12\xb7\x99\xf4\xeb\x0c\xd1\x7d\x99\xc1\xf3\xe9\xb3\x5d\x2f\x37\xfd\x58\xed\xb1\x77\xe7\x78\x36\x4c\xc7\x57\xf6\x02\x44\x2f\xb1\x09\x9d\x6f\xbf\x4a\xf6\x95\xe3\xcd\x0d\x06\xd2\xee\x6e\x6d\x03\x84\xa6\x43\x3c\x27\x1d\x15\xdb\x0c\xee\xa2\x19\xfa\x3d\xd5\x69\x26\x41\x33\xb8\x6b\x46\xce\x6d\x00\x16\x8b\xdd\xcc\x4d\x22\x13\x63\xff\xf0\xa3\xa9\xbb\x41\x7e\x16\x07\x4b\x55\x1a\xa3\xed\x55\x1a\xa5\xff\x9e\x02\x67\x82\x6b\xce\x4a\xfe\x37\x42\x5e\x09\xa5\x99\xd0\x2a\xf0\xe8\x0d\x8d\xb3\xc4\x20\xa8\x9d\x77\xee\xf5\x62\x7b\xe3\x94\x81\x7e\xd0\xfb\x75\x2b\x4e\x76\x6f\x1c\x04\xe3\x86\x94\x19\xbd\xae\x76\xfa\xdd\x7a\x18\x83\x1b\x35\x0e\xeb\x1d\xb6\x7a\x54\x71\x80\x36\x90\xc1\x5e\xad\x50\xee\xb5\x5c\xbb\xff\x27\x00\x00\xff\xff\x21\x8e\xd1\xc6\x77\x19\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0xfe, 0xa5, 0xc6, 0xd, 0xb0, 0x6e, 0x3f, 0xd4, 0x50, 0x72, 0x6d, 0x12, 0xb0, 0x8b, 0x89, 0xf6, 0x47, 0xc9, 0x2c, 0x87, 0x42, 0x71, 0xaa, 0x54, 0xd7, 0xe6, 0x92, 0x83, 0x3c, 0x7, 0x74}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": {nil, map[string]*bintree{
		"crypto.cdc": {contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
