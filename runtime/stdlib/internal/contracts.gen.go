// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (5.259kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xcb\x53\x82\x19\x6e\x06\x0c\xc3\x60\x40\x0d\xba\xad\xdb\x82\x6c\xc0\x90\x34\xed\x43\x10\xb4\x8c\x75\x96\x88\xa8\x94\x41\x9e\x9c\x68\x86\xff\xf7\x81\xa2\x44\xf1\x97\x12\x67\xcb\xfc\x62\xd9\xfc\xee\xf8\xdd\xc7\xbb\x93\x4e\xb3\x4d\x73\x07\x8a\x64\xb3\x22\xe0\x82\x50\xae\xd9\x0a\xe1\x8a\x17\x82\x51\x23\xf1\x23\x4a\xbe\xe6\x28\x01\x76\xb3\x19\x00\x80\x86\xaf\x1b\x01\x5b\xbd\xd0\x1e\x77\xff\xe9\x8f\x1a\x2c\x96\x70\x73\x7d\x2e\xe8\xc7\xdb\xb9\x5d\x23\x56\x2c\xe1\x8a\x24\x17\xc5\xdc\x33\xc0\xfc\x17\x46\x2c\x61\xb1\x69\xee\x2a\xbe\xba\xc0\x36\xb1\x66\x77\x7a\x57\x15\xb5\xe4\x54\x7e\x5d\x8e\x7c\xed\x7f\x23\xbe\x64\xaa\x74\xa0\xbf\xbb\x3f\x3b\xd0\xc9\x12\x7e\xaa\xeb\x6a\xb6\x9f\xa5\xc5\xd0\x16\x09\x05\xb4\xdf\x31\xfe\x3c\x1d\x48\x32\x74\xf6\x0c\x9b\xde\xcb\x40\x68\x55\x0b\x92\x6c\x45\xf0\xb3\x6c\x37\x54\x27\x79\x7c\x0e\x08\x4c\xee\x31\xba\x87\x9d\x25\x24\x91\x1a\x29\x40\x61\xb5\x5e\x68\x77\x9f\x38\x95\x1f\x58\x71\xac\x7d\xce\x4d\x0c\x47\x47\x9e\x4f\x7b\x79\xd2\x39\xd9\xc7\x94\x06\x1f\x11\x33\x57\x92\xff\x46\x13\x65\xf7\x75\x6c\x36\x70\xc8\x12\x2b\x0e\x64\xdb\x1f\xf6\x05\xb6\x7f\x70\x45\xef\x05\xc9\xd6\xd9\x50\x23\x2a\x24\xb8\xc7\xf6\x5c\xe4\xf8\xb8\x84\x73\x41\xd1\xaa\x93\xac\x7f\x0d\x97\x11\xe8\xd9\x2c\x74\xc1\x0f\xc8\x8b\x92\x96\x70\xfd\x2b\x7f\xfc\xe1\xfb\x68\x99\xab\x4b\xdc\xd6\xf7\x98\xf7\x89\x6b\x01\x5c\x70\x1a\x53\x52\x7f\x3c\xe6\x73\x6f\x29\x45\xdb\x47\x3c\xc5\xd9\x47\xfa\x84\xfd\xb5\x90\xed\xf0\xff\x89\x23\x74\x57\xd7\xfa\x58\x07\xbe\x90\x59\xea\x31\xc8\x32\x87\x6c\x8c\x22\x86\x79\xf4\x21\xf3\xc3\x89\xe1\x26\x06\xc8\xfa\x60\x62\x80\x0d\x04\xb2\x31\x28\x0b\xdb\x3f\x9d\x5a\x43\xd5\x76\xab\x92\x6f\xbb\x83\x44\x41\x92\xa3\x5a\xc2\x8d\x9b\x80\xb7\xc1\x81\x26\x85\xea\x4d\x21\x83\x9b\x5b\x87\x83\xbd\x7c\xf3\xe6\x0d\xbc\xcb\x73\x05\x0c\x04\x3e\x68\x31\xe1\x81\x53\x09\x54\x22\x14\x7c\x8b\x22\x0c\x73\xa8\x5d\x96\xe7\x7e\x0a\x7d\xfe\x1f\x33\x65\x4c\x86\x65\x58\x83\x9e\x95\x5b\x84\x90\x79\x0a\x2c\x2a\x14\x05\x95\x11\x1c\x3b\x3f\x99\xe7\xd6\x0f\x0c\xbc\xfa\x18\xae\xe6\x11\xc6\x09\x7f\x93\x0e\x3f\x21\x41\x39\x2d\x81\x2b\x83\xf9\x8e\xd7\x9d\xa2\x59\xb3\x4a\xa1\x07\x38\x99\x4c\x87\x05\xdb\x6c\x50\xe4\xc7\x5d\xf0\x3e\xac\x6f\x9e\xdd\xca\x54\xc2\x5c\x76\x18\xd5\x25\x89\xce\x18\x46\x4e\xbe\xf0\x4e\x1d\xe0\x6b\xe0\x04\xf8\xc8\x15\xa9\x45\x60\x6d\xaa\xe3\x1e\x5b\x05\x4c\x22\xb0\xea\x81\xb5\xaa\xdf\x19\xf3\x39\xdc\x35\x9d\xc3\x16\x4a\xb6\x45\xf8\x62\x83\xfc\x02\x6b\x8e\x55\x0e\x0a\x09\xa8\x06\x92\x0d\x46\x79\x59\x20\x1d\x7b\xdd\x2c\x48\x99\xb3\xa0\x4a\xf8\x7a\xcc\x98\xb7\xc9\x94\x09\x0c\x1c\x91\x04\xaf\xbc\xa5\xfd\x2c\x25\xa5\xeb\xf2\x66\xd8\x6b\xb2\x18\xff\x64\xf2\xfe\x29\x65\x41\x1a\x2d\x8c\x4a\x79\x8d\x0a\x44\x4d\x90\x63\x85\x84\xc0\xe3\x42\x35\xf8\x40\x93\xd7\x13\x21\x10\xc0\xfd\xa5\xcb\x6b\xd5\x48\x89\xa2\xaf\xd6\xec\x39\x2d\x20\xc8\xd3\x11\xf2\x82\x0a\x75\xb7\x5c\x1c\x54\xae\x9e\xc5\xe1\xb5\xeb\x99\x1d\x58\xc8\x9e\xcd\x01\x55\xed\xe5\x38\x78\x45\x3d\x55\x94\xb2\x41\x7d\xa0\x63\xde\xd8\x27\x61\x53\x6e\x5b\x56\xf1\x1c\xd6\xb5\x0c\x20\x98\x77\xcf\x46\x51\x02\x71\xf5\x51\x5b\xf8\x92\x5b\x9f\x57\x48\xe3\x7d\xc9\x3e\x5f\xdf\xce\x23\x74\xf0\x10\xef\xb6\x74\x7d\xbf\x0f\x5b\xf9\x96\x49\xc3\xf4\x53\x27\x92\x1a\x6e\x05\x90\xc1\xe9\xe2\x34\x6e\xfb\x0a\x51\x5c\x74\x87\xcd\x57\xfa\x56\xb9\x3b\x17\x64\x3c\xef\x21\x83\x5d\x50\x9a\x3a\x7a\x1b\x02\x70\xe1\xc5\x13\x52\x31\x0a\xc3\x7b\xa1\x34\x78\x28\x4d\x53\x8d\x5c\x19\x96\xb1\x05\x5f\x8f\x4e\x17\x2f\xaf\x2e\x18\x1b\x48\xdc\xd9\x21\x6e\x36\x21\x49\xae\x1c\x96\x25\x33\x5d\x82\x55\x12\x59\xde\xc2\x1d\xea\x33\x47\x14\x69\xda\x9e\x94\x37\x71\x14\xb7\x70\x76\x66\x58\xbd\x1e\xf1\x4b\x5c\xd5\x32\x0f\xd4\x7d\x60\x6a\x82\xe6\x01\x1c\x33\x53\x3c\xa9\xcd\x7e\x43\xd3\x57\xd9\x8a\x1a\x56\xe9\x0d\x63\x58\xff\x2c\x11\x36\xad\xc4\x4e\x07\x65\x8b\x39\x80\xbe\x79\x27\x65\xbf\xc7\xd6\x79\x76\x7c\xfd\x8c\x40\x37\xe3\x9f\x4a\xdb\x6f\xcc\x00\xb9\x50\xe1\x74\xbf\x08\xa7\x79\xef\x44\xc6\xc9\x7e\xd4\xc8\x5e\xc5\x4d\x0e\x86\xb1\xb7\xdf\x2d\xaf\xbf\x32\x2e\xae\x70\xc3\x24\x23\x5e\x8b\x0f\xac\xb8\x56\x28\xd3\x86\x6e\x43\x19\xaf\xd3\x58\xa7\xd1\x6b\x89\xed\xcf\xa7\x3a\x3d\x4c\xbc\x40\xf0\x1d\xc4\x88\xb4\x27\xff\xbe\xa1\x7d\x4c\xcf\x18\x90\x18\x79\x86\xcf\x4b\x4f\xdf\xed\x9f\x90\xf9\x3f\xbf\xed\x62\x49\xcc\x30\xe9\x87\x18\xcf\xf6\x6d\x06\xdf\x2d\x4e\x0f\x1d\x69\xec\x4d\xe1\xc5\x13\x73\xfc\xb2\x68\xe6\x61\xba\xb1\xc7\x1f\x5d\x13\x36\xff\x7e\x80\x1c\xeb\x25\x1b\xfd\x4e\x84\x3d\xcc\x6a\x13\x69\x3c\xbc\xca\x08\xd0\x51\x89\x2d\x61\x17\xbd\x54\xdb\xfb\x36\xe6\x95\xc6\x12\x76\xe6\x85\x53\x4f\xa0\xd3\xe2\x30\x77\xf3\xc8\xc5\x89\x7b\xcb\xf3\x43\xb7\x6f\xf6\xb2\x98\xac\x6f\x62\x9c\xf6\x03\x34\x4a\xf7\xe9\x04\xce\x05\x27\xce\x2a\xfe\x37\xc2\xaa\x16\x8a\x98\x20\x15\xec\x38\x21\x1c\x64\x70\xd4\x28\x94\x47\xbd\xda\xfb\xd9\x3f\x01\x00\x00\xff\xff\x0a\x47\x1c\x4a\x8b\x14\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0xfa, 0xc7, 0xce, 0x94, 0x76, 0x69, 0x85, 0xe0, 0x64, 0xf2, 0x23, 0x17, 0x52, 0xac, 0x62, 0x4d, 0xa0, 0x92, 0x57, 0xcc, 0x94, 0xe, 0x24, 0x6e, 0x54, 0xeb, 0xad, 0x34, 0xae, 0x28, 0xf5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": {nil, map[string]*bintree{
		"crypto.cdc": {contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
