// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (5.953kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x4f\x23\xb7\x17\x7f\xcf\xa7\x38\x7f\x9e\x12\xfd\x43\x60\x43\xe1\x21\xd2\x2c\xa2\x40\x4b\x44\x5b\x21\xb2\xbb\x7d\x40\x88\x35\x33\x27\x13\x2b\x83\x27\xb2\x3d\x81\x14\xf1\xdd\xab\xb9\xfb\xd8\x1e\x08\x5b\xaa\xe6\x01\x26\x39\xf7\xdf\xb9\x78\x7c\x7a\xab\xec\x1e\x94\x96\x59\xa8\x81\x0b\x8d\x72\xce\x42\x84\x19\x8f\x05\xd3\x99\xc4\x6f\x28\xf9\x9c\xa3\x04\x78\xee\xf5\x00\x00\x72\xf6\x79\x26\x60\x9d\x13\x36\xfd\xe2\xb7\xfc\xa3\x6a\x89\x09\xdc\x4c\x85\xbe\x1d\x36\x14\xcd\xe2\x09\xcc\xb4\xe4\x22\x1e\x12\x76\x8c\xce\x98\x66\x0e\xff\x2a\xbb\x4f\x78\x78\x89\x1b\x87\xd2\xd8\x38\x49\xe2\x54\x72\xbd\x78\x70\x15\x2f\x98\x5a\x38\xe4\x82\x3a\x98\xc0\xcf\x69\x9a\xf4\x5e\x7a\x45\xcc\x61\x2a\xb4\x64\xa1\x86\x53\xb9\x59\xe9\xd4\x8c\xaf\x82\x63\xe6\x98\x83\x67\xd3\x4b\x48\x50\x83\x60\x0f\xd8\x98\x69\xa8\x5c\x70\xdd\x37\x49\x03\x43\xb4\x08\x05\x93\xf9\x28\x67\x80\xa0\x50\xd1\x10\x5f\x7a\xe5\xdf\xe2\xdf\xde\x1e\x9c\x9f\x9e\xcd\x4e\xee\xae\xc6\x87\x47\xc0\x15\x9c\x27\x09\x5f\x69\x1e\xc2\x69\x26\xd7\x08\x67\x3c\xe6\x9a\x25\xad\xa7\xd0\xba\xda\x2f\x24\x07\x90\x0a\xd0\x0b\x84\x3f\xa6\xb3\x2f\x70\xb5\x9b\xeb\x09\x73\xd9\x9e\x19\x44\x6b\x64\xe2\x89\xda\xf2\x65\x86\xe1\x6a\x7c\x78\xb4\xfc\xf4\xcf\x1c\x52\x8d\x9a\x2e\x7f\x1a\x43\xdd\x4e\x19\xd9\xba\x30\x13\xff\x1f\x24\x6a\x76\x71\x32\xbe\xab\xd2\x34\xc3\x30\x8f\x3d\x77\x89\x8b\xd8\xc0\x60\x0c\xfd\xd9\xc5\xc9\xee\x78\x00\x8f\x5c\x2f\x80\xc1\xf8\xf0\x68\xf7\x9e\x6b\x88\x78\x8c\x4a\x13\x10\x6a\x85\x13\x1a\x9a\x69\xf0\xe0\x4d\x83\x07\xa5\xc1\x83\x2d\x0d\x1e\x74\x1a\x34\x90\xbe\xaa\x1b\xd4\x83\xb2\xdd\xbc\x0e\x83\xb7\x87\x3b\xb2\xdb\x24\xc8\x19\x09\x5b\xaa\xf1\x26\xb3\x51\x06\x41\xeb\xae\xcb\xe6\x5a\x80\xc0\x63\xd6\x5f\x0f\x06\x5a\x97\xb8\xf9\x8d\x2b\x7d\x2e\xb4\xf4\x01\xb6\xc4\xcd\x54\x44\xf8\x34\x81\xa9\xd0\xaf\xc1\x79\xe5\xb8\x5a\x33\x59\x23\x8f\x26\xcf\x66\x7e\x44\x1e\x2f\xf4\x04\xbe\xfe\xc2\x9f\x8e\x7e\x72\xc8\x5c\x5d\xe3\x3a\x5d\x62\x54\x0d\x4b\x9a\x07\x82\x12\xf1\x7c\x48\x48\x3e\xb7\x29\xc7\x6b\x3e\x53\x4e\xea\x30\xa5\xd9\xde\xd6\xbf\x7b\xf3\x5e\xfb\x0b\x41\xe3\xfa\x0f\x17\x07\x71\x1f\x02\x1a\x8e\xcb\x5e\xc6\x00\x41\x15\x8c\xcb\xd0\x04\x02\x41\x1b\xd4\xb6\xa5\x55\x1f\x5d\x05\x55\xf2\x75\x91\x48\x14\x5a\x72\x54\x13\xb8\x31\x0b\xf0\xd6\x4a\xa8\x17\xa8\x4a\x14\x02\xb8\xb9\x35\x7c\x68\x1e\xf7\xf6\xe0\x24\x8a\x14\x30\x10\xf8\x98\x63\x59\xce\x96\x7c\xa8\xc7\x7c\x8d\xc2\x8e\xb2\x7e\x65\x60\x51\x44\x2b\xe8\xee\x5f\x2c\x94\xb6\x16\x26\x76\x0b\x12\x29\xb3\x07\xf3\x06\x37\x00\x18\x25\x28\x62\xbd\x70\xd8\xb1\xd0\x13\x10\xb5\x34\x30\x20\xed\x51\x3f\x0d\x1d\x1e\x23\xfc\x95\x3f\x7c\x0f\x04\x8b\x6e\x08\x4c\x18\xca\xff\x2e\xdd\xe8\x99\x39\x4b\x14\x12\x86\x41\x67\x35\x8c\xd8\x6a\x85\x22\xea\x17\xc1\x53\x36\x89\x3a\x93\xa2\x84\xa5\xa3\x5e\xae\x0b\x16\x55\xd4\x48\x5e\x30\x4c\x1b\xe5\xc2\x0b\x70\x80\xcf\x81\x6b\xc0\x27\xae\xb4\x1a\x51\xe1\xb2\x35\x96\xb8\x51\xc0\x24\x02\x4b\x1e\xd9\x46\x55\x76\x31\x1a\xc2\x7d\x56\xe8\xdb\xc0\x82\xad\x11\xbe\x37\x21\x7e\x87\x39\xc7\x24\x02\x85\x1a\x74\x0a\x5a\x66\xe8\x54\x65\x8c\xba\x4f\x46\x99\x55\x30\xc7\x56\x8b\xf0\x79\x5b\x2f\x9f\xbd\x05\x63\x09\x18\x10\x09\x9e\x10\xd2\x4b\xcf\x07\xa4\xa9\xf2\xa6\xb6\xd5\xd5\x89\xbf\x33\xb9\x7c\x0d\x57\x90\x25\x14\x25\x48\x51\x8a\x0a\x44\xaa\x21\xc2\x04\x35\x02\x77\xbb\xb4\xe4\xb7\x20\xf9\x38\x0c\xac\xf8\xcd\x6f\x79\x6f\x85\x99\x94\x28\xaa\x56\x0d\xde\x82\x02\xac\x22\x6d\x59\xde\xd1\x9e\xa6\xc9\xd1\x56\xbd\x4a\x24\xb6\x6f\x5c\x22\xb6\x65\x17\x13\x99\x2d\x5a\x9a\x94\x38\x90\x8e\x36\xea\xa6\xce\x35\x57\xdf\x58\xc2\xad\xa9\xdc\xbc\xe3\xcc\x50\xb7\xc7\x47\xf3\x72\x75\x3b\x74\xb8\xc9\x45\xce\x1c\xbc\xf9\xa1\x6c\x0f\xdc\x35\x93\xb0\xce\xad\xfe\x59\x44\xa3\xea\x81\x0d\x01\xec\x8f\xf6\xdd\xe1\xac\x10\xc5\x65\x91\x15\x1e\xe6\xe7\xd9\xf3\x54\xe8\x52\xf3\x0b\x04\xf0\x6c\xb5\xd0\x3c\x95\x6d\x00\xc0\x05\x89\xc6\x76\x05\xaa\x6b\x8d\x50\x39\x73\xdd\x43\x65\xdb\x70\x55\x7a\xe9\x4a\xf0\x79\xab\x74\xf4\xfe\x36\x80\xb6\xd1\xdd\xf9\x0b\xee\x50\xb0\x9d\xe4\xca\xf0\x72\xc1\xca\x76\x66\x89\x44\x16\x6d\xe0\x1e\x51\x14\x88\xf9\xdd\x26\x50\xde\xb8\x51\xdc\xc2\xf1\x71\xe9\xd5\xc7\x39\x7e\x8d\x61\x2a\x23\x0b\xdd\x47\xa6\x3a\xdc\xdc\xc2\xc7\xa0\xac\x72\x9f\xb1\x5f\xb1\x1c\x80\x2c\xd4\x19\x4b\x72\x83\x2e\x5b\x75\xe2\xdb\xd3\xc5\x63\x69\xab\x6a\x29\x13\x50\x4d\x59\x2f\xec\x4b\xdc\x18\x2f\x78\x1f\x5f\x11\x68\x56\xfc\x6b\x65\xfb\xbf\x72\xd5\xd1\x5e\x6d\xea\xed\xce\xc8\xde\xe6\x90\x8c\xb4\x9b\x9d\x16\xa3\xe6\xc9\x9d\x46\x50\xef\x7c\x2a\x6b\x51\xfa\xc0\xb8\x98\xe1\x8a\x49\xa6\x79\x2a\xbe\xb0\xf8\xab\x42\xe9\x17\x34\xc7\x49\xfb\xec\xe7\x35\x26\x72\x0e\x71\xf3\xf5\xb5\x91\x0c\x1d\x6b\x24\xaa\xc0\xe5\x28\x56\x00\x7e\x75\x74\xca\xe7\x8a\xc8\x2f\x23\xb2\x35\xa8\x3f\xf6\x89\x5a\x7f\xde\x5b\x07\xe6\x24\x85\x80\x7e\xfd\x7f\x11\x95\xe7\xca\xe1\x7f\xed\x20\xb2\x9f\x03\xf8\x34\xda\xdf\xf6\x06\xd2\xae\x7b\xde\x7b\xc1\xb5\xd7\x86\xf4\x8c\x2a\xee\x28\xf4\x9e\xe9\x48\xfc\xf8\x5d\xaf\xed\x1a\xe3\x62\xdf\x11\x72\x7d\xad\xea\x28\x66\xba\x58\x6a\xb8\x9d\x46\x9b\xc0\xb3\xb3\x5a\xad\x4c\x14\xb1\x6e\x27\x30\x30\x0f\x32\x1a\x4a\xb3\xaf\x0d\x5c\xe3\xe4\xbd\x71\x2a\xb8\xe6\x2c\xe1\x7f\x21\x84\xa9\x50\x9a\x09\xad\x2c\xa5\xc6\xea\x31\xf0\x2c\x57\xaa\xb5\xd9\x4e\xcb\xb6\x33\xf0\x29\x68\xf7\x85\x6f\x6b\x69\x78\x77\x06\x96\x33\xcd\x7a\x2d\xa0\x77\xc0\x5a\xbe\xa6\xdb\x3e\x34\x5b\xb2\x6e\xb9\x83\x4a\x8e\x0a\x76\x64\x1a\x02\xd8\xc9\x14\xca\x9d\xaa\x3c\x5e\xfe\x0e\x00\x00\xff\xff\xf3\x5d\xb5\x45\x41\x17\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0xa2, 0x59, 0xa2, 0xe7, 0x35, 0x75, 0xcd, 0xed, 0x97, 0xff, 0x39, 0x59, 0xa8, 0xa5, 0x20, 0x57, 0x22, 0x1b, 0x2, 0xbe, 0xf0, 0xa0, 0xc9, 0xfb, 0x57, 0x57, 0x8f, 0x98, 0xbc, 0xcd, 0xf9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"crypto.cdc": &bintree{contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
