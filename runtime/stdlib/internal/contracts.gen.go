// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (5.264kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x4c\x73\x4a\x50\xc3\x9b\x02\x45\x51\x18\xd0\x06\xdb\x76\xdb\x06\x69\x81\x22\xd9\xec\x1e\x82\x60\x97\xb1\xc6\x12\x11\x2d\x65\x90\x23\x27\xaa\xe1\xff\x5e\x90\xd4\x07\xbf\x94\x38\x6d\xea\x43\x22\x9b\x6f\x86\x6f\x1e\x67\x46\x1a\xcd\x36\xcd\x1d\x28\x92\xcd\x8a\x80\x0b\x42\xb9\x66\x2b\x84\x2b\x5e\x08\x46\x8d\xc4\x8f\x28\xf9\x9a\xa3\x04\xd8\xcd\x66\x00\x00\x1a\xbe\x6e\x04\x6c\xf5\x42\x7b\x6c\x7e\xd3\x1f\xd5\x5b\x2c\xe1\xe6\xfa\x5c\xd0\x8f\xb7\xf3\x61\x8d\x58\xb1\x84\x2b\x92\x5c\x14\x73\xcf\x00\xf3\x5f\x18\xb1\x84\xc5\xa6\xb9\xab\xf8\xea\x02\xdb\xc4\xda\xb0\xd3\xbb\xaa\xa8\x25\xa7\xf2\xeb\x72\xe4\x3b\xfc\x36\xe2\x4b\xa6\x4a\x07\xfa\xbb\xfb\xd5\x80\x4e\x96\xf0\x53\x5d\x57\xb3\xfd\x2c\x2d\x86\xb6\x48\x28\xa0\xfd\x8e\xf1\xe7\x8c\x98\xf9\x73\x68\xfc\xec\x19\x4a\x9d\x97\x9e\xd5\xaa\x16\x24\xd9\x8a\xe0\x67\xd9\x6e\xa8\x4e\x92\xf9\x1c\x10\x98\xdc\x63\x74\x0f\xbb\x81\x90\x44\x6a\xa4\x00\x85\xd5\x7a\xa1\xdd\x7d\xe2\x54\x7e\x60\xc5\xb1\xf6\x39\xb7\x31\x1c\x1d\x79\x3e\x87\xcb\x13\xe3\x64\x1f\x53\xea\x7d\x44\xcc\x5c\x49\xfe\x1b\x4d\x94\xe6\xdf\xb1\xdd\xc0\x21\x4b\xac\x38\x90\x6d\x77\xe2\x17\xd8\xfe\xc1\x15\xbd\x17\x24\x5b\x67\x43\x8d\xa8\x90\xe0\x1e\xdb\x73\x91\xe3\xe3\x12\xce\x05\x45\xab\x4e\xc6\xfe\xd5\x5f\x46\xa0\x67\x53\xd1\x05\x3f\x20\x2f\x4a\x5a\xc2\xf5\xaf\xfc\xf1\x87\xef\xa3\x65\xae\x2e\x71\x5b\xdf\x63\xde\x65\xef\x00\xe0\x82\xd3\x98\x97\xfa\xe3\x31\x9f\x7b\x4b\x29\xda\x3e\xe2\x29\xce\x3e\xd2\x27\xec\xaf\x85\x6c\xfb\xdf\x4f\x1c\xa1\x4d\x71\xeb\x63\xed\xf9\x42\x36\x50\x8f\x41\x03\x73\xc8\xc6\x28\x62\x98\x47\x1f\x32\x3f\x9c\x18\x6e\x63\x80\xac\x0b\x26\x06\x0c\x81\x40\x36\x06\x35\xc0\xf6\x4f\xa7\x56\x5f\xb5\x66\x55\xf2\xad\x39\x48\x14\x24\x39\xaa\x25\xdc\xb8\x09\x78\x1b\x1c\x68\x52\xa8\xce\x14\x32\xb8\xb9\x75\x38\x0c\x97\x6f\xde\xbc\x81\x77\x79\xae\x80\x81\xc0\x07\x2d\x26\x3c\x70\x2a\x81\x4a\x84\x82\x6f\x51\x84\x61\xf6\xb5\xcb\xf2\xdc\x4f\xa1\xcf\xff\x63\xa6\x8c\xc9\xb0\x0c\x6b\xd0\xb3\x72\x8b\x10\x32\x4f\x81\x45\x85\xa2\xa0\x32\x82\xa3\xf1\x93\x79\x6e\xfd\xc0\xc0\xab\x8f\xfe\x6a\x1e\x61\x9c\xf0\x37\xe9\xf0\x13\x12\x94\xd3\x12\xb8\x32\xd8\xff\xf1\xba\x53\x34\x6b\x56\x29\xf4\x00\x27\x93\xe9\xb0\x60\x9b\x0d\x8a\xfc\xd8\x04\xef\xc3\xba\xe6\x69\x56\xa6\x12\xe6\xd2\x60\x94\x49\x12\x9d\x31\x8c\x9c\x7c\xe1\x46\x1d\xe0\x6b\xe0\x04\xf8\xc8\x15\xa9\x45\x60\x6d\xab\xe3\x1e\x5b\x05\x4c\x22\xb0\xea\x81\xb5\xaa\xdb\x19\xf3\x39\xdc\x35\xc6\x61\x0b\x25\xdb\x22\x7c\x19\x82\xfc\x02\x6b\x8e\x55\x0e\x0a\x09\xa8\x06\x92\x0d\x46\x79\x59\x20\x1d\x7b\xdd\x2c\x48\x99\xb3\xa0\x4a\xf8\x7a\xcc\x98\xb7\xc9\x94\x09\x0c\x1c\x91\x04\xaf\xbc\xa5\xfd\x2c\x25\xa5\xeb\xf2\xa6\xdf\x6b\xb2\x18\xff\x64\xf2\xfe\x29\x65\x41\x5a\x2d\xac\x4a\x79\x8d\x0a\x44\x4d\x90\x63\x85\x84\xc0\xe3\x42\xb5\xf8\x40\x93\xd7\x13\x21\x10\xc0\xfd\xa6\xcb\x6b\xd5\x48\x89\xa2\xab\xd6\xec\x39\x2d\x20\xc8\xd3\x11\xf2\x82\x0a\x75\xb7\x5c\x1c\x54\xae\x9e\xc5\xe1\xb5\xeb\x99\x1d\x58\xc8\x9e\xcd\x01\x55\xed\xe5\x38\x78\x45\x3d\x55\x94\xb2\x41\x7d\xa0\x63\xde\x0c\x8f\xc3\xb6\xdc\xb6\xac\xe2\x39\xac\x6b\x19\x40\x30\x37\xcf\x46\x51\x02\x71\xf5\x51\x5b\xf8\x92\x0f\x3e\xaf\x90\xc6\xfb\xd2\xf0\x90\x7d\x3b\x8f\xd0\xc1\x93\xbc\xdb\xd2\xf5\xfd\x3e\x6c\xe5\x5b\x26\x2d\xd3\x4f\x46\x24\xd5\xdf\x0a\x20\x83\xd3\xc5\x69\xdc\xf6\x15\xa2\xb8\x30\x87\xcd\x57\xfa\x56\xb9\x3b\x17\x64\x3d\xef\x21\x83\x5d\x50\x9a\x3a\xfa\x21\x04\xe0\xc2\x8b\x27\xa4\x62\x15\x86\xf7\x42\x69\x70\x5f\x9a\xb6\x1a\xb9\xb2\x2c\x63\x0b\xbe\x1e\x9d\x2e\x5e\x5e\x5d\x30\x36\x90\xb8\xb3\x43\xdc\x6c\x42\x92\x5c\x39\x2c\x4b\x66\xbb\x04\xab\x24\xb2\xbc\x85\x3b\xd4\x67\x8e\x28\xd2\xb4\x3d\x29\x6f\xe2\x28\x6e\xe1\xec\xcc\xb2\x7a\x3d\xe2\x97\xb8\xaa\x65\x1e\xa8\xfb\xc0\xd4\x04\xcd\x03\x38\x66\xb6\x78\x52\x9b\xfd\x86\xb6\xaf\xb2\x15\x35\xac\xd2\x1b\xc6\xb0\xee\x59\x22\x6c\x5a\x89\x9d\x0e\xca\x16\x7b\x00\x5d\xf3\x4e\xca\x7e\x8f\xad\xf3\xec\xf8\xfa\x19\x81\x6e\xc6\x3f\x95\xb6\xdf\xd8\x01\x72\xa1\xc2\x11\x7f\x11\x8e\xf4\xde\x89\x8c\xe3\xfd\xa8\xd1\x70\x15\x37\x39\xe8\xc7\xde\x6e\xb7\xbc\xfe\xca\xb8\xb8\xc2\x0d\x93\x8c\x78\x2d\x3e\xb0\xe2\x5a\xa1\x4c\x1b\xba\x0d\x65\xbc\x4e\x63\x9d\x46\xaf\x25\x1e\xbe\x3e\xd5\xe9\x61\xe2\x2d\x82\xef\x20\x46\xa4\x3d\xf9\xf7\x0d\xed\x63\x7a\xc6\x80\xc4\xc8\xd3\x7f\x5e\x7a\xfa\x6e\xff\x84\xcc\xff\xfa\xad\x89\x25\x31\xc3\xa4\x1f\x62\x3c\xdb\xb7\x19\x7c\xb7\x38\x3d\x74\xa4\x19\x6e\x0a\x2f\x9e\x98\xe3\x37\x46\x33\x0f\x63\xc6\x1e\x7f\x74\x4d\xd8\xfc\xfb\x01\x72\xac\x97\x6c\xf4\x3b\x11\x76\x3f\xab\x4d\xa4\x71\xff\x2a\x23\x40\x47\x25\xb6\x84\x5d\xf4\x66\x6d\xef\xdb\xd8\x57\x1a\x4b\xd8\xd9\xb7\x4e\x1d\x01\xa3\xc5\x61\xee\xe6\x91\x8b\x13\xf7\x96\xe7\x87\x3e\xbc\xde\xcb\x62\xb2\xbe\x89\x75\xda\x0d\xd0\x28\xdd\xa7\x13\x38\x17\x9c\x38\xab\xf8\xdf\x08\xab\x5a\x28\x62\x82\x54\xb0\xe3\x84\x70\x90\xc1\x51\xa3\x50\x1e\x75\x6a\xef\x67\xff\x04\x00\x00\xff\xff\x07\x33\x9a\xd5\x90\x14\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0x69, 0x48, 0xce, 0x8f, 0x81, 0x50, 0x9f, 0x3, 0xc1, 0xf6, 0x83, 0x0, 0xeb, 0x41, 0xfa, 0xa5, 0xc2, 0xf1, 0x10, 0xc6, 0xa9, 0xc7, 0x4f, 0x46, 0xf0, 0xe5, 0x95, 0x24, 0xf9, 0xc2, 0x11}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": {nil, map[string]*bintree{
		"crypto.cdc": {contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
