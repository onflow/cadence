// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (6.062kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x4f\xe3\x46\x14\x7e\xcf\xaf\x38\xe5\x29\x51\xb3\x59\x36\x14\x54\x45\xf2\x22\x0a\xb4\x44\xb4\x15\x22\xcb\xf6\x01\x21\x76\xb0\x4f\x9c\x51\xcc\x38\x9a\x19\x07\x52\xc4\x7f\xaf\xc6\x97\xf1\xdc\x0c\x61\x4b\xd5\x3c\x80\x93\x73\xff\xce\x65\x3c\xa7\xb7\x2a\xee\x40\x48\x5e\xc4\x12\x28\x93\xc8\xe7\x24\x46\x98\xd1\x94\x11\x59\x70\xfc\x8a\x9c\xce\x29\x72\x80\xa7\x5e\x0f\x00\x40\xb1\xcf\x0b\x06\x6b\x45\xd8\xf4\xcb\xdf\xd4\x47\x34\x12\x13\xb8\xbe\x9a\x32\xf9\xf3\xcd\x50\xd3\x24\x49\x27\x30\x93\x9c\xb2\x74\x68\x09\x60\x72\x42\x24\x09\x48\xac\x8a\xbb\x8c\xc6\xe7\xb8\x09\xd0\xb4\xa5\xa3\x2c\xcd\x39\x95\x8b\x7b\x5f\xf9\x82\x88\x85\x47\x2e\xa9\x83\x09\xfc\x92\xe7\x59\xef\xb9\x57\x46\x1e\xe7\x4c\x72\x12\x4b\x38\xe6\x9b\x95\xcc\xcd\x28\x6b\x50\x66\x9e\x39\x78\x32\xfd\x84\x0c\x25\x30\x72\x8f\xda\x8c\xa6\x52\x46\x65\xdf\x24\x0d\x0c\xd1\x32\x14\xcc\xe6\x23\xc5\x00\x51\xa9\x42\x13\x9f\x7b\xd5\xdf\xf2\xdf\xc7\x8f\x1f\xe1\xf4\xf8\x64\x76\x74\x7b\x31\xde\x3f\x00\x2a\xe0\x34\xcb\xe8\x4a\xd2\x18\x8e\x0b\xbe\x46\x38\xa1\x29\x95\x24\x6b\x5d\x85\xd6\xd7\x7e\x29\x39\x80\x9c\x81\x5c\x20\xfc\x39\x9d\x7d\x81\x8b\x0f\x4a\x4f\xac\x64\x7b\x66\x14\xad\x91\x49\x20\x6c\xd7\x99\x19\xc6\xab\xf1\xfe\xc1\xf2\xd3\xbf\xf3\x48\x68\x35\x5d\x0e\x69\x43\xdd\x5e\x19\xf9\x3a\x33\x53\xff\x7f\xa4\x6a\x76\x76\x34\xbe\xad\x13\x35\xc3\x58\x05\xaf\x7c\xa2\x2c\x35\x40\x18\x43\x7f\x76\x76\xf4\x61\x3c\x80\x07\x2a\x17\x40\x60\xbc\x7f\xf0\xe1\x8e\x4a\x48\x68\x8a\x42\x5a\x28\x34\x0a\x27\x76\x6c\x96\xc5\xbd\x57\x2d\xee\x55\x16\xf7\xb6\xb4\xb8\xd7\x69\xd1\xc0\xfa\xa2\x69\xd3\x00\xce\x7e\x0b\x7b\x2c\xc1\x4e\xee\xc8\xb0\x4e\x52\x60\x34\x6c\xa9\x28\x98\x52\xad\x0e\xa2\xd6\x65\x9f\xcd\xb7\x00\x51\xc0\x6c\xb8\x2a\x0c\xc4\xce\x71\xf3\x3b\x15\xf2\x94\x49\x1e\x02\x6d\x89\x9b\x29\x4b\xf0\x71\x02\x53\x26\x5f\x82\xf4\xc2\x73\xb5\x61\x72\x46\x9f\x9d\x40\x97\xf9\x01\x69\xba\x90\x13\xb8\xfa\x95\x3e\x1e\xfc\xe4\x91\xa9\xb8\xc4\x75\xbe\xc4\xa4\x1e\x9a\x76\x26\x2c\x94\x2c\xcf\x87\x16\x29\xe4\xb6\xcd\xf1\x92\xcf\x36\xa7\xed\xb0\x4d\x73\xbd\x6d\x7e\x0f\xe6\xbd\xf1\x17\x22\xed\xfa\x77\x17\x87\xe5\x3e\x44\x76\x38\x3e\x7b\x15\x03\x44\x75\x30\x3e\x83\x0e\x04\xa2\x36\xa8\x6d\x4b\xab\x39\xc2\x4a\x2a\xa7\xeb\x32\x91\xc8\x24\xa7\x28\x26\x70\x6d\x16\xe0\x8d\x93\xd0\x20\x50\xb5\x28\x44\x70\x7d\x63\xf8\xa0\x1f\xd5\x00\x3a\x4a\x12\x01\x04\x18\x3e\x28\x30\xab\x01\xa3\x66\x7b\x4a\xd7\xc8\xdc\x30\x9b\x37\x08\x92\x24\x76\x09\xdd\xfe\x87\x95\xd2\x16\xc3\xc4\xed\x41\x4b\xca\x6c\x42\xd5\xe1\x06\x02\xa3\x0c\x59\x2a\x17\x1e\x3b\x96\x7a\x22\x4b\xad\x1d\x18\x58\xfd\xd1\x3c\x0d\x3d\x1e\x23\xfc\x55\x38\xfc\x00\x04\x8b\x6e\x08\x4c\x18\xaa\xff\x3e\xdd\x68\x9a\x39\xc9\x04\x5a\x0c\x83\xce\x72\x18\x91\xd5\x0a\x59\xd2\x2f\x83\xb7\xd9\x38\xca\x82\xb3\x0a\x96\xae\x82\xb9\x2c\x79\x44\x59\x24\xaa\x62\x88\x34\xea\x85\x96\xe8\x00\x9d\x03\x95\x80\x8f\x54\x48\x31\x72\xa4\xab\xee\x58\xe2\x46\x00\xe1\x08\x24\x7b\x20\x1b\x51\x5b\xc6\x64\x08\x77\x45\xa9\x70\x03\x0b\xb2\x46\xf8\xa6\x83\xfc\x06\x73\x8a\x59\x02\x02\x25\xc8\x1c\x24\x2f\xd0\xab\xcb\x14\x65\xdf\x9a\x66\x4e\xc9\x1c\x3a\x5d\x42\xe7\x6d\xc5\x7c\x0e\x96\x8c\x23\x60\x80\xc4\x68\x66\x91\x9e\x7b\x21\x28\x4d\x95\xd7\x8d\xad\xce\x66\xfc\x83\xf0\xe5\x4b\xc8\x02\xaf\xb0\xa8\x50\x4a\x72\x14\xc0\x72\x09\x09\x66\x28\x11\xa8\xdf\xa8\x15\xbf\x83\xc9\xfb\x81\xe0\x00\x60\x7e\x53\xed\x15\x17\x9c\x23\xab\xbb\x35\x7a\x0d\x0b\x70\xea\xb4\x65\x79\x43\x87\x9a\x26\x47\x5b\xb5\xab\x25\xb1\x7d\xef\x5a\x62\x5b\x36\xb2\x25\xb3\x45\x57\x5b\x35\x0e\x56\x53\x77\x35\x25\x2f\x50\x25\xb4\xad\x1b\xfd\xa2\x53\xb5\xdb\x9a\x64\x34\x81\x79\xce\x1d\x16\x4c\x20\x21\x92\x78\x05\x44\xc5\x57\x25\x61\x43\xae\x75\xce\x50\xb6\xe7\x92\x7e\x6b\xbb\x19\x7a\xdc\xce\x6d\xd1\x1c\xe9\xea\xbc\x77\x47\xf9\x9a\xf0\xca\xd3\xbf\x4a\x90\x44\x73\x14\x40\x04\xbb\xa3\x5d\x7f\xec\x0b\x44\x76\x5e\x26\x9b\xc6\xea\xa8\x7c\x9a\x32\x59\x69\x7e\x86\x08\x9e\x9c\xd6\x54\xd1\xeb\x10\x80\x32\x2b\x1e\xd7\x95\x0a\x61\x38\x65\x42\x31\x37\xad\x59\x75\x23\x15\x95\x97\xbe\x04\x9d\xb7\x4a\x47\x6f\xef\x2e\x68\x07\x88\x3f\xd9\xc1\x1f\x36\xae\x93\x54\x18\x5e\x2e\x48\x35\x25\x48\xc6\x91\x24\x1b\xb8\x43\x95\x73\x44\x16\x76\xdb\x82\xf2\xda\x8f\xe2\x06\x0e\x0f\x2b\xaf\xde\xcf\xf1\x4b\x8c\x73\x9e\x38\xe8\x3e\x10\xd1\xe1\xe6\x16\x3e\x46\x55\xf3\x84\x8c\xfd\x86\xd5\x5c\x25\xb1\x2c\x48\xa6\x0c\xfa\x6c\xf5\xbb\x84\x3b\xb4\x02\x96\xb6\xaa\x96\x2a\x01\xf5\xf0\x0e\xc2\xbe\xc4\x8d\xf1\xee\xf8\xfe\x15\x81\x66\xc5\xbf\x54\xb6\x3f\x54\xdb\x94\xf6\xd6\xd4\xac\x91\x46\xee\xda\xc8\xca\x48\xbb\x42\x6a\x31\xd2\x4f\xfe\x90\x83\x66\xb5\x54\x5b\x4b\xf2\x7b\x42\xd9\x0c\x57\x84\x13\x49\x73\xf6\x85\xa4\x57\x02\x79\x58\xd0\x1c\x28\xed\x73\x98\xd7\x18\xf4\x0a\x62\xfd\xf5\xa5\x49\x0f\x1d\x9b\x2a\x5b\x81\xcf\x51\xee\x18\xc2\xea\xec\xc3\x43\x29\xb2\x7e\x19\x59\x6b\x89\xe6\xe3\x1e\xd4\xcd\xe7\xad\x75\x60\x4e\x52\x88\xec\xaf\x3f\x96\x51\x05\x6e\x33\xe1\xd7\x19\x4b\xf6\x73\x04\x9f\x46\xbb\xdb\x5e\x6e\xda\x7d\xd2\x5b\xef\xce\xfe\x7e\xb2\x67\xf1\x94\x17\x20\xfb\x12\x1b\x90\xf9\xfe\xab\x64\xdb\x39\xc6\xde\xa0\x23\xec\xe6\xd6\xd6\x51\xd0\xf6\xf6\x4a\x73\x7b\xcd\x36\x81\x27\x6f\x8f\x5b\x9b\x28\xa3\xdd\x4e\x60\x60\x1e\x66\x76\x28\x7a\x39\x1c\xf9\xc6\xcd\x57\x0b\x98\x32\x2a\x29\xc9\xe8\xdf\x08\x71\xce\x84\x24\x4c\x0a\x47\xa9\xb1\xe0\x8c\x02\xbb\x9b\x7a\x37\xb7\xd3\xb2\xed\x0c\x42\x0a\xda\xa5\xe4\xeb\x5a\x34\xef\xce\xc0\x71\x46\xaf\xf0\x22\xfb\x86\xd9\xc8\x37\x74\xd7\x07\xbd\x88\xeb\x96\xdb\xab\xe5\x6c\xc1\x8e\x4c\x43\x04\x3b\x85\x40\xbe\x53\x97\xc7\xf3\x3f\x01\x00\x00\xff\xff\x5c\x86\x21\x88\xae\x17\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0x9f, 0xf3, 0x80, 0xff, 0x91, 0x35, 0xce, 0x95, 0x44, 0x20, 0x8b, 0xcc, 0x34, 0xee, 0xfc, 0xed, 0x44, 0xa1, 0x4d, 0xa4, 0x9c, 0x79, 0xaa, 0x2, 0x5e, 0x31, 0x44, 0xa3, 0xf5, 0x38, 0x80}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"crypto.cdc": &bintree{contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
