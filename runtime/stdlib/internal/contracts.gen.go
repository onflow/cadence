// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (5.992kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x4f\xe3\x46\x14\x7e\xcf\xaf\x38\xe5\x29\x51\x43\x60\x43\x17\x55\x91\xbc\x2b\xca\xa5\x44\x6c\x5b\x44\x16\xf6\x01\x21\x76\xb0\x4f\x9c\x51\xcc\x38\x9a\x19\x27\xa4\x88\xff\x5e\xf9\x36\x9e\x9b\x43\xd8\x52\x35\x0f\xe0\xe4\xdc\xbf\x73\x19\xcf\xe9\x2c\xb2\x07\x10\x92\x67\xa1\x04\xca\x24\xf2\x29\x09\x11\x26\x34\x66\x44\x66\x1c\x6f\x90\xd3\x29\x45\x0e\xf0\xdc\xe9\x00\x00\xe4\xec\xd3\x8c\xc1\x32\x27\xac\xbb\xc5\x6f\xf9\x47\xd4\x12\x23\xb8\xbd\x1e\x33\xf9\xeb\x5d\x5f\xd1\x24\x89\x47\x30\x91\x9c\xb2\xb8\x6f\x08\x60\x74\x42\x24\xf1\x48\x2c\xb2\x87\x84\x86\x17\xb8\xf6\xd0\x94\xa5\xa3\x24\x4e\x39\x95\xb3\x47\x57\xf9\x8c\x88\x99\x43\x2e\xa8\xbd\x11\xfc\x96\xa6\x49\xe7\xa5\x53\x44\x1e\xa6\x4c\x72\x12\x4a\x38\xe6\xeb\x85\x4c\xf5\x28\x2b\x50\x26\x8e\x39\x78\xd6\xfd\x84\x04\x25\x30\xf2\x88\xca\x8c\xa2\x52\x46\x65\x57\x27\xf5\x34\xd1\x22\x14\x4c\xa6\x83\x9c\x01\x82\x42\x85\x22\xbe\x74\xca\xbf\xc5\xbf\xbd\x3d\x38\x3d\x3e\x99\x1c\xdd\x5f\x0e\x3f\x1e\x02\x15\x70\x9a\x24\x74\x21\x69\x08\xc7\x19\x5f\x22\x9c\xd0\x98\x4a\x92\x34\x9e\x42\xe3\x6a\xb7\x90\xec\x41\xca\x40\xce\x10\xfe\x1c\x4f\xbe\xc2\xe5\x6e\xae\x27\xcc\x65\x3b\x7a\x10\x8d\x91\x91\x27\x6a\xcb\x97\x09\x86\x8b\xe1\xc7\xc3\xf9\x87\x7f\xe7\x90\x50\x6a\xda\xfc\x51\x86\xda\x9d\xd2\xb2\x75\xae\x27\xfe\x7f\x48\xd4\xe4\xfc\x68\x78\x5f\xa5\x69\x82\x61\x1e\x7b\xee\x12\x65\xb1\x86\xc1\x10\xba\x93\xf3\xa3\xdd\x61\x0f\x56\x54\xce\x80\xc0\xf0\xe3\xe1\xee\x03\x95\x10\xd1\x18\x85\x34\x40\xa8\x15\x8e\xcc\xd0\x74\x83\x07\xaf\x1a\x3c\x28\x0d\x1e\x6c\x69\xf0\xa0\xd5\xa0\x86\xf4\x65\xdd\xa2\x1e\x94\xdd\xf6\x75\x58\xbc\x5d\xdc\x92\x5f\x95\x22\xcf\x58\xd8\x52\x91\x37\xa1\x4a\x1d\x04\x8d\xcb\x2e\x9b\x6b\x01\x02\x8f\x59\x7f\x4d\x68\x88\x5d\xe0\xfa\x0b\x15\xf2\x94\x49\xee\x03\x6d\x8e\xeb\x31\x8b\xf0\x69\x04\x63\x26\x37\x41\x7a\xe9\xb8\x5a\x33\x59\x63\xcf\x4c\xa0\xcd\xbc\x42\x1a\xcf\xe4\x08\xae\xcf\xe8\xd3\xe1\x2f\x0e\x99\x8a\x2b\x5c\xa6\x73\x8c\xaa\x81\x69\x66\xc2\x40\xc9\xf0\xbc\x6f\x90\x7c\x6e\x9b\x1c\x9b\x7c\x36\x39\x4d\x87\x4d\x9a\xed\x6d\xfd\xbb\x37\xef\xb5\xbf\x10\x28\xd7\x7f\xb8\x38\x0c\xf7\x21\x30\xc3\x71\xd9\xcb\x18\x20\xa8\x82\x71\x19\x54\x20\x10\x34\x41\x6d\x5b\x5a\xf5\xf1\x55\x50\x39\x5d\x16\x89\x44\x26\x39\x45\x31\x82\x5b\xbd\x00\xef\xac\x84\x7a\x81\xaa\x44\x21\x80\xdb\x3b\xcd\x07\xf5\xb8\xb7\x07\x47\x51\x24\x80\x00\xc3\x55\x8e\x65\x39\x5f\xf2\xc1\x1e\xd3\x25\x32\x3b\xca\xfa\xe5\x81\x44\x91\x59\x41\xf7\xff\x61\xa1\x34\xb5\x30\xb2\x5b\xd0\x90\xd2\x7b\x30\x6f\x70\x0d\x80\x41\x82\x2c\x96\x33\x87\x1d\x0b\x3d\x81\xa1\xd6\x0c\x0c\x8c\xf6\xa8\x9f\xfa\x0e\x8f\x16\xfe\xc2\x1f\xbe\x07\x82\x59\x3b\x04\x3a\x0c\xe5\x7f\x97\xae\xf5\xcc\x94\x24\x02\x0d\x86\x5e\x6b\x35\x0c\xc8\x62\x81\x2c\xea\x16\xc1\x9b\x6c\x1c\x65\xc6\x59\x09\x4b\x4b\xbd\x5c\x15\x2c\xa2\xa8\x91\xbc\x60\x88\xd4\xca\x85\x16\xe0\x00\x9d\x02\x95\x80\x4f\x54\x48\x31\x30\x85\xcb\xd6\x98\xe3\x5a\x00\xe1\x08\x24\x59\x91\xb5\xa8\xec\x62\xd4\x87\x87\xac\xd0\xb7\x86\x19\x59\x22\x7c\x57\x21\x7e\x87\x29\xc5\x24\x02\x81\x12\x64\x0a\x92\x67\xe8\x54\x65\x8c\xb2\x6b\x8c\x32\xab\x60\x3e\x5b\x2d\x42\xa7\x4d\xbd\x7c\xf2\x16\x8c\x25\xa0\x41\xc4\x68\x62\x90\x5e\x3a\x3e\x20\x75\x95\xb7\xb5\xad\xb6\x4e\xfc\x83\xf0\xf9\x26\x5c\x81\x97\x50\x94\x20\x45\x29\x0a\x60\xa9\x84\x08\x13\x94\x08\xd4\xed\xd2\x92\xdf\x82\xe4\xfd\x30\xb0\xe2\xd7\xbf\xe5\xbd\x15\x66\x9c\x23\xab\x5a\x35\x78\x0d\x0a\xb0\x8a\xb4\x61\x79\x43\x7b\xea\x26\x07\x5b\xf5\xaa\x21\xb1\x7d\xe3\x1a\x62\x5b\x76\xb1\x21\xb3\x45\x4b\x1b\x25\x0e\x46\x47\x6b\x75\x53\xe7\x9a\x8a\x1b\x92\x50\x6b\x2a\xab\x77\x9c\x09\xca\xe6\xf8\x50\x2f\x57\x77\x7d\x87\xdb\xba\xd0\xe9\xa3\x37\x3f\x96\xed\x91\xbb\x24\x1c\x96\xb9\xdd\x6f\x45\x3c\xa2\x1e\xd9\x10\xc0\xfe\x60\xdf\x1d\xcf\x02\x91\x5d\x14\x79\xa1\x61\x7e\xa2\x3d\x8f\x99\x2c\x35\xbf\x40\x00\xcf\x56\x13\x4d\x53\xde\x84\x00\x94\x19\xf1\xd8\xae\x40\x75\xb9\x61\x22\x67\xae\xbb\xa8\x6c\x1c\x2a\x4a\x2f\x5d\x09\x3a\x6d\x94\x0e\xde\xde\x08\xd0\xb4\xba\x3b\x81\xc1\x1d\x0b\xb6\x93\x54\x68\x5e\xce\x48\xd9\xd0\x24\xe1\x48\xa2\x35\x3c\x20\xb2\x02\x31\xbf\xdb\x06\x94\xb7\x6e\x14\x77\xf0\xf9\x73\xe9\xd5\xfb\x39\x7e\x85\x61\xca\x23\x0b\xdd\x15\x11\x2d\x6e\x6e\xe1\x63\x50\xd6\xb9\xcf\xd8\xef\x58\x8e\x40\x12\xca\x8c\x24\xb9\x41\x97\xad\x3a\xf3\xed\xf9\xe2\xb1\xb4\x55\xb5\x94\x09\xa8\xe6\xac\x17\xf6\x39\xae\xb5\x57\xbc\xf7\xaf\x08\xd4\x2b\x7e\x53\xd9\xfe\x54\x2e\x3c\x9a\xcb\x4d\xbd\xe9\x19\xd8\x9b\x1d\x23\x23\xcd\x96\xa7\xc1\x48\x3d\xb9\xf3\x08\xea\xed\x4f\x65\x2d\x4a\x1f\x09\x65\x13\x5c\x10\x4e\x24\x4d\xd9\x57\x12\x9f\x25\xe9\xea\x5a\x20\xf7\x0b\xeb\x43\xa5\x79\xf6\xf3\x6a\x73\x39\x87\x59\x7d\xdd\x34\x98\xa1\x65\xa1\x64\x2a\x70\x39\x8a\x65\x80\x5f\x9d\x39\xeb\x73\x45\xc6\x2f\x03\x63\x7f\x50\x7f\xec\x73\xb5\xfe\xbc\xb5\x16\xf4\x69\x0a\x81\xf9\xf5\xe7\x22\x2a\xcf\xc5\xc3\xff\xf2\x61\xc8\x7e\x0a\xe0\xc3\x60\x7f\xdb\x7b\x48\xb3\xf8\x79\xeb\x35\xd7\x5d\x23\x9a\x67\x55\x71\x57\x31\xef\x9b\x1e\x99\x1f\xbf\xf5\x35\xdd\xa3\x5d\xf1\x5b\xc2\xae\x2f\x58\x1b\x8a\xda\x5c\x35\x29\x09\xa7\xe9\x46\xf0\xec\xac\x5c\x2b\x33\x45\xc4\xdb\x09\xf4\xf4\x43\xcd\x0c\x47\xed\x71\x03\xd7\xb8\xf1\x16\x39\x66\x54\x52\x92\xd0\xbf\x11\xc2\x94\x09\x49\x98\x14\x96\x52\x6d\x19\x19\x78\x56\x2d\xd5\x22\x6d\xa7\x61\xdb\xe9\xf9\x14\x34\x1b\xc4\xd7\xb5\x28\xde\x9d\x9e\xe5\x8c\x5a\xb8\x05\xe6\x8d\xb0\x96\xaf\xe9\xb6\x0f\x6a\x6f\xd6\x2e\x77\x50\xc9\x99\x82\x1b\xb2\x0d\x01\xec\x9c\x7d\xf9\xeb\xdb\xee\xcd\xfe\x60\x7f\x37\x13\xc8\x77\xaa\x82\x79\xe9\xfc\x13\x00\x00\xff\xff\x49\x9f\xae\x50\x68\x17\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0xa9, 0x34, 0x44, 0xc6, 0xf3, 0xc0, 0x2, 0x2b, 0x4d, 0x69, 0xf6, 0x3, 0x54, 0xf2, 0x38, 0xd3, 0xda, 0x35, 0x96, 0x2d, 0xce, 0x9c, 0x2a, 0xb5, 0xa1, 0xf8, 0x4, 0xbb, 0x85, 0x8c, 0x69}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"crypto.cdc": &bintree{contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
