// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (5.061kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x6f\xe3\x36\x13\xbe\xfb\x57\xcc\xbb\xa7\x04\xaf\xe1\xa4\x40\x51\x14\x06\xb4\xc1\xb6\xdd\xb6\x41\x5a\xa0\x48\x9a\xed\x21\x08\x76\x19\x6b\x64\x11\xd1\x52\x06\x49\x39\x51\x0d\xff\xf7\x82\xa4\xc4\x6f\x39\x4e\x91\xfa\x90\xc8\xe6\x33\x5f\x0f\x67\x86\x1c\xcd\x36\xdd\x03\x08\xc9\xbb\x95\x04\xca\x24\xf2\x8a\xac\x10\x6e\xe8\x9a\x11\xd9\x71\xfc\x84\x9c\x56\x14\x39\xc0\x6e\x36\x03\x00\x50\xf0\xaa\x63\xb0\x55\x0b\xfd\x89\xfe\x4d\x7d\xc4\x28\xb1\x84\xbb\xdb\x4b\x26\xbf\xbf\x9f\xdb\x35\x49\xd6\x4b\xb8\x91\x9c\xb2\xf5\x3c\x10\xc0\xf2\x27\x22\x49\x46\x62\xd3\x3d\x34\x74\x75\x85\x7d\x66\xcd\x5a\xfa\xd0\xac\x5b\x4e\x65\xfd\x75\xe9\xfc\xb5\xbf\x39\x7c\x4d\x44\xed\x41\x7f\xf5\xbf\x6a\xd0\xe9\x12\x7e\x68\xdb\x66\xb6\x9f\xe5\xc9\x50\x12\x19\x06\x94\x5e\x17\x7f\x99\x0f\x84\xbc\x60\x78\x10\x18\x6d\xaf\x5a\x26\x39\x59\x49\xf8\x91\xf7\x1b\xd9\x66\x4d\x7e\x8e\x6c\x4d\xda\x70\xea\x61\x67\x1d\xe2\x28\x3b\xce\x40\x60\x53\x2d\x6a\x1d\x98\xfe\x77\x62\x74\xaa\xbf\x81\x42\xfb\x78\xaa\x35\xec\x9d\x3f\x03\x4d\x57\xd8\xff\x46\x85\xfc\xc8\x24\xef\x3d\x33\x0a\xd1\xa0\x84\x47\xec\x2f\x59\x89\xcf\x4b\xb8\x64\x32\x59\xf5\xb6\xf9\x8f\xf1\x31\x01\xbd\xb8\x7f\x3e\xf8\x09\xe9\xba\x96\x4b\xb8\xfd\x99\x3e\x7f\xf7\x6d\xb2\x4c\xc5\x35\x6e\xdb\x47\x2c\x87\x2d\xb7\x00\xca\xa8\x74\x9b\xa9\x3e\x81\xe7\xf3\x60\x29\xe7\x76\x88\x38\xe4\x73\x88\x0c\x1d\x0e\xd7\x62\x6f\xc7\xdf\x4f\x3d\xa2\x75\x45\xa8\xcd\x1c\xfd\x85\xc2\xba\x9e\x82\xac\xe7\x50\xb8\x28\x52\x58\xe0\x3e\x14\x61\x38\x29\xdc\xc4\x00\xc5\x10\x4c\x0a\xb0\x81\x40\xe1\x82\xb2\xb0\xfd\xe1\xd4\x1a\x8b\x40\xaf\x72\xba\xd5\x1b\x89\x4c\x72\x8a\x62\x09\x77\x7e\x02\xde\x47\x1b\x9a\x25\x6a\x10\x85\x02\xee\xee\x3d\x1f\xec\xe3\xd9\xd9\x19\x7c\x28\x4b\x01\x04\x18\x3e\x29\x32\xe1\x89\xca\x1a\x64\x8d\xb0\xa6\x5b\x64\x71\x98\x63\x75\x92\xb2\x0c\x53\xe8\xf3\x7f\x98\x29\x2e\x19\x96\x71\x0d\x06\x52\x7e\x11\x42\x11\x30\xb0\x68\x90\xad\x65\x9d\xc0\x51\xeb\x29\x02\xb5\x61\x60\x10\xd4\xc7\xf8\x34\x4f\x30\x5e\xf8\x9b\x7c\xf8\x19\x0a\xea\x69\x0a\x7c\x1a\xcc\xff\x74\xdd\x2b\x9a\x8a\x34\x02\x03\xc0\xe9\x64\x3a\x2c\xc8\x66\x83\xac\x3c\xd1\xc1\x87\xb0\xa1\x65\xea\x95\xa9\x84\xb9\xd6\x18\xa1\x93\x44\x65\x0c\x91\x5e\xbe\x50\xcd\x0e\xd0\x0a\xa8\x04\x7c\xa6\x42\x8a\x45\x24\x6d\xaa\xe3\x11\x7b\x01\x84\x23\x90\xe6\x89\xf4\x62\xb0\x8c\xe5\x1c\x1e\x3a\xad\xb0\x87\x9a\x6c\x11\xbe\xd8\x20\xbf\x40\x45\xb1\x29\x41\xa0\x04\xd9\x82\xe4\x1d\x26\x79\xb9\x46\x79\x12\x74\xb3\x28\x65\x2e\xa2\x2a\xa1\x95\xcb\x98\xf7\xd9\x94\x89\x04\x3c\x92\x18\x6d\x82\xa5\xfd\x2c\x47\xa5\xaf\xf2\x6e\xb4\x35\x59\x8c\xbf\x13\xfe\x78\x88\x59\xe0\x86\x0b\xc3\x52\xd9\xa2\x00\xd6\x4a\x28\xb1\x41\x89\x40\xd3\x42\x35\xf8\x88\x93\xb7\x23\x21\x22\xc0\xff\xa6\xca\x6b\xd5\x71\x8e\x6c\xa8\xd6\xe2\x25\x2e\x20\xca\x53\x07\x79\x45\x85\xfa\x26\x17\x47\x95\x6b\x20\x71\x7c\xed\x06\x62\x47\x16\x72\x20\x73\x44\x55\x07\x39\x0e\x41\x51\x4f\x15\x25\xef\x50\x6d\xa8\xcb\x1b\x7b\x87\x34\xe5\xb6\x25\x0d\x2d\xa1\x6a\x79\x04\xc1\x52\xdf\x88\x92\x04\xa2\xe2\x93\x92\x08\x29\xb7\x3a\x6f\x50\xba\x73\xc9\xde\x4c\xef\xe7\x09\x3a\xba\xfe\xfa\x2d\x5d\x9d\xf7\x71\x2b\xdf\x12\x6e\x3c\xfd\x4b\x93\x24\xc6\xa3\x00\x0a\x38\x5f\x9c\xa7\x6d\x5f\x20\xb2\x2b\xbd\xd9\x74\xa5\x8e\xca\xdd\x25\x93\x46\xf3\x1e\x0a\xd8\x45\xa5\xa9\xa2\xb7\x21\x00\x65\x41\x3c\xb1\x2b\x86\x61\xf8\xc8\x84\x02\x8f\xa5\x69\xaa\x91\x0a\xe3\x65\x2a\x41\x2b\xa7\x74\xf1\xfa\xea\x02\xd7\x40\xd2\xce\x0e\x69\xb3\x89\x9d\xa4\xc2\xf3\xb2\x26\xa6\x4b\x90\x86\x23\x29\x7b\x78\x40\xb5\xe7\x88\x2c\xef\x76\x40\xe5\x5d\x1a\xc5\x3d\x5c\x5c\x18\xaf\xde\xce\xf1\x6b\x5c\xb5\xbc\x8c\xd8\x7d\x22\x62\xc2\xcd\x23\x7c\x2c\x4c\xf1\xe4\x8c\xfd\x82\xa6\xaf\x92\x95\xec\x48\xa3\x0c\xa6\xb0\xe1\x2e\x11\x37\xad\x8c\xa5\xa3\xb2\xc5\x6c\xc0\xd0\xbc\xb3\xb4\x3f\x62\xef\xdd\x1d\xdf\x3e\x23\xd0\xcf\xf8\x43\x69\xfb\x3f\x33\x8f\x2d\x44\x3c\x17\x2f\xe2\x39\x38\xd8\x11\x37\x13\x3b\x8e\xec\x53\xda\xe4\x60\x9c\x95\x07\x6b\x65\xfb\x95\x50\x76\x83\x1b\xc2\x89\xa4\x2d\xfb\x93\xac\x6f\x05\xf2\xbc\xa0\xdf\x50\xdc\x73\x1e\xeb\x35\x7a\x45\xb1\xfd\x7a\xa8\xd3\xc3\xc4\xe8\x1d\x2a\x48\x11\x79\x4d\xe1\xb9\xa1\x74\x4c\xcf\x18\x90\x19\x79\xc6\xcf\x6b\x77\xdf\xef\x9f\x50\x84\x5f\xff\xaf\x63\xc9\xcc\x30\xf9\x4b\x4c\x20\xfb\xbe\x80\x6f\x16\xe7\xc7\x8e\x34\xf6\x50\x78\xf5\xc4\x9c\xbe\x66\x99\x05\x18\x3d\xf6\x84\xa3\x6b\x46\xe6\xdf\x0f\x90\xae\x5e\x0a\xa7\x77\x22\xec\x71\x56\x9b\x48\xe3\xf1\x95\x50\x84\x4e\x4a\x6c\x09\xbb\xe4\x75\xd4\x3e\x94\x31\x2f\x32\x96\xb0\x33\xaf\x6a\x06\x07\x34\x17\xc7\xa9\x9b\x27\x2a\x4e\xfd\x23\x2f\x0c\xdd\xbe\x13\x2b\x52\x67\x43\x11\xa3\x74\x18\xa0\x91\xfb\xb7\x13\xb8\x64\x54\x52\xd2\xd0\xbf\x11\x56\x2d\x13\x92\x30\x29\x22\x8b\x13\xc4\x41\x01\xef\x3a\x81\xfc\xdd\xc0\xf6\x7e\xf6\x4f\x00\x00\x00\xff\xff\x8a\x2e\xad\xea\xc5\x13\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0x30, 0x32, 0xb0, 0xd8, 0xf6, 0xa9, 0xf6, 0x16, 0x36, 0x70, 0xbc, 0xd7, 0x21, 0xbe, 0x18, 0x8e, 0x26, 0xd9, 0x26, 0xf9, 0x61, 0x97, 0xf2, 0x76, 0x18, 0xb1, 0x87, 0x5, 0x4b, 0x58, 0x7e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": {nil, map[string]*bintree{
		"crypto.cdc": {contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
