// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (5.969kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x4f\x23\x37\x10\x7f\xcf\x5f\x31\xe5\x29\x51\x73\xe1\x2e\x14\x54\x45\xda\x43\x14\x68\x89\x68\x2b\x44\x8e\xeb\x03\x42\x9c\xd9\x9d\x6c\xac\x2c\xde\xc8\xf6\x06\x52\xc4\xff\x5e\xed\xb7\xc7\xf6\x42\xb8\x52\x35\x0f\xb0\xc9\x7c\xff\xe6\xc3\xeb\xe9\xad\xb2\x3b\x50\x5a\x66\xa1\x06\x2e\x34\xca\x39\x0b\x11\x66\x3c\x16\x4c\x67\x12\xbf\xa2\xe4\x73\x8e\x12\xe0\xa9\xd7\x03\x00\xc8\xd9\xe7\x99\x80\x75\x4e\xd8\xf4\x8b\xdf\xf2\x8f\xaa\x25\x26\x70\x7d\x35\x15\xfa\xe7\x9b\x61\x43\xd3\x2c\x9e\xc0\x4c\x4b\x2e\xe2\x21\x11\xc0\xe8\x84\x69\xe6\x91\x58\x65\x77\x09\x0f\xcf\x71\xe3\xa1\x35\x96\x8e\x92\x38\x95\x5c\x2f\xee\x5d\xe5\x0b\xa6\x16\x0e\xb9\xa0\x0e\x26\xf0\x4b\x9a\x26\xbd\xe7\x5e\x11\x79\x98\x0a\x2d\x59\xa8\xe1\x58\x6e\x56\x3a\x35\xa3\xac\x40\x99\x39\xe6\xe0\xc9\xf4\x13\x12\xd4\x20\xd8\x3d\x36\x66\x1a\x2a\x17\x5c\xf7\x4d\xd2\xc0\x10\x2d\x42\xc1\x64\x3e\xca\x19\x20\x28\x54\x34\xc4\xe7\x5e\xf9\xb7\xf8\xb7\xbb\x0b\xa7\xc7\x27\xb3\xa3\xdb\x8b\xf1\xfe\x01\x70\x05\xa7\x49\xc2\x57\x9a\x87\x70\x9c\xc9\x35\xc2\x09\x8f\xb9\x66\x49\xeb\x29\xb4\xae\xf6\x0b\xc9\x01\xa4\x02\xf4\x02\xe1\xcf\xe9\xec\x0b\x5c\x7c\xc8\xf5\x84\xb9\x6c\xcf\x0c\xa2\x35\x32\xf1\x44\x6d\xf9\x32\xc3\x70\x35\xde\x3f\x58\x7e\xfa\x77\x0e\xa9\x46\x4d\x97\x3f\x8d\xa1\x6e\xa7\x8c\x6c\x9d\x99\x89\xff\x1f\x12\x35\x3b\x3b\x1a\xdf\x56\x69\x9a\x61\x98\xc7\x9e\xbb\xc4\x45\x6c\x60\x30\x86\xfe\xec\xec\xe8\xc3\x78\x00\x0f\x5c\x2f\x80\xc1\x78\xff\xe0\xc3\x1d\xd7\x10\xf1\x18\x95\x26\x20\xd4\x0a\x27\x34\x34\xd3\xe0\xde\xab\x06\xf7\x4a\x83\x7b\x5b\x1a\xdc\xeb\x34\x68\x20\x7d\x51\xb7\xa8\x07\x65\xb7\x7d\x1d\x16\x6f\x17\x77\xe4\xb7\x49\x91\x67\x2c\x6c\xa9\xc8\x9b\xd0\x46\x1d\x04\xad\xcb\x2e\x9b\x6b\x01\x02\x8f\x59\x7f\x4d\x18\x88\x9d\xe3\xe6\x77\xae\xf4\xa9\xd0\xd2\x07\xda\x12\x37\x53\x11\xe1\xe3\x04\xa6\x42\xbf\x04\xe9\x85\xe3\x6a\xcd\x64\x8d\x3d\x9a\x40\x9b\xf9\x01\x79\xbc\xd0\x13\xb8\xfa\x95\x3f\x1e\xfc\xe4\x90\xb9\xba\xc4\x75\xba\xc4\xa8\x1a\x98\x34\x13\x04\x25\xe2\xf9\x90\x90\x7c\x6e\x53\x8e\x97\x7c\xa6\x9c\xd4\x61\x4a\xb3\xbd\xad\x7f\xf7\xe6\xbd\xf6\x17\x82\xc6\xf5\xef\x2e\x0e\xe2\x3e\x04\x34\x1c\x97\xbd\x8c\x01\x82\x2a\x18\x97\xa1\x09\x04\x82\x36\xa8\x6d\x4b\xab\x3e\xbe\x0a\xaa\xe4\xeb\x22\x91\x28\xb4\xe4\xa8\x26\x70\x6d\x16\xe0\x8d\x95\x50\x2f\x50\x95\x28\x04\x70\x7d\x63\xf8\xd0\x3c\xee\xee\xc2\x51\x14\x29\x60\x20\xf0\x21\xc7\xb2\x9c\x2f\xf9\x60\x8f\xf9\x1a\x85\x1d\x65\xfd\xf2\xc0\xa2\x88\x56\xd0\xed\x7f\x58\x28\x6d\x2d\x4c\xec\x16\x24\x52\x66\x0f\xe6\x0d\x6e\x00\x30\x4a\x50\xc4\x7a\xe1\xb0\x63\xa1\x27\x20\x6a\x69\x60\x40\xda\xa3\x7e\x1a\x3a\x3c\x46\xf8\x2b\x7f\xf8\x1e\x08\x16\xdd\x10\x98\x30\x94\xff\x5d\xba\xd1\x33\x73\x96\x28\x24\x0c\x83\xce\x6a\x18\xb1\xd5\x0a\x45\xd4\x2f\x82\xa7\x6c\x12\x75\x26\x45\x09\x4b\x47\xbd\x5c\x16\x2c\xaa\xa8\x91\xbc\x60\x98\x36\xca\x85\x17\xe0\x00\x9f\x03\xd7\x80\x8f\x5c\x69\x35\xa2\xc2\x65\x6b\x2c\x71\xa3\x80\x49\x04\x96\x3c\xb0\x8d\xaa\xec\x62\x34\x84\xbb\xac\xd0\xb7\x81\x05\x5b\x23\x7c\x6b\x42\xfc\x06\x73\x8e\x49\x04\x0a\x35\xe8\x14\xb4\xcc\xd0\xa9\xca\x18\x75\x9f\x8c\x32\xab\x60\x0e\xad\x16\xe1\xf3\xb6\x5e\x3e\x7b\x0b\xc6\x12\x30\x20\x12\x3c\x21\xa4\xe7\x9e\x0f\x48\x53\xe5\x75\x6d\xab\xab\x13\xff\x60\x72\xf9\x12\xae\x20\x4b\x28\x4a\x90\xa2\x14\x15\x88\x54\x43\x84\x09\x6a\x04\xee\x76\x69\xc9\x6f\x41\xf2\x7e\x18\x58\xf1\x9b\xdf\xf2\xde\x0a\x33\x29\x51\x54\xad\x1a\xbc\x06\x05\x58\x45\xda\xb2\xbc\xa1\x3d\x4d\x93\xa3\xad\x7a\x95\x48\x6c\xdf\xb8\x44\x6c\xcb\x2e\x26\x32\x5b\xb4\x34\x29\x71\x20\x1d\x6d\xd4\x4d\x9d\x6b\xae\xbe\xb2\x84\x5b\x53\xb9\x79\xc7\x99\xa1\x6e\x8f\x8f\xe6\xe5\xea\x66\xe8\x70\x5b\x17\x3a\x73\xf4\xe6\xc7\xb2\x3d\x72\xd7\x4c\xc2\x3a\xb7\xfb\x57\x11\x8f\xaa\x47\x36\x04\xf0\x71\xf4\xd1\x1d\xcf\x0a\x51\x9c\x17\x79\xe1\x61\x7e\xa2\x3d\x4d\x85\x2e\x35\x3f\x43\x00\x4f\x56\x13\xcd\x53\xd9\x86\x00\x5c\x90\x78\x6c\x57\xa0\xba\xdc\x08\x95\x33\xd7\x5d\x54\x36\x0e\x57\xa5\x97\xae\x04\x9f\xb7\x4a\x47\x6f\x6f\x04\x68\x5b\xdd\x9d\xc0\xe0\x8e\x05\xdb\x49\xae\x0c\x2f\x17\xac\x6c\x68\x96\x48\x64\xd1\x06\xee\x10\x45\x81\x98\xdf\x6d\x02\xe5\xb5\x1b\xc5\x0d\x1c\x1e\x96\x5e\xbd\x9f\xe3\x97\x18\xa6\x32\xb2\xd0\x7d\x60\xaa\xc3\xcd\x2d\x7c\x0c\xca\x3a\xf7\x19\xfb\x0d\xcb\x11\xc8\x42\x9d\xb1\x24\x37\xe8\xb2\x55\x67\xbe\x3d\x5f\x3c\x96\xb6\xaa\x96\x32\x01\xd5\x9c\xf5\xc2\xbe\xc4\x8d\xf1\x8a\xf7\xfe\x15\x81\x66\xc5\xbf\x54\xb6\x3f\x94\x0b\x8f\xf6\x72\x53\x6f\x7a\x46\xf6\x66\x87\x64\xa4\xdd\xf2\xb4\x18\x35\x4f\xee\x3c\x82\x7a\xfb\x53\x59\x8b\xd2\x7b\xc6\xc5\x0c\x57\x4c\x32\xcd\x53\xf1\x85\xc5\x57\x0a\xa5\x5f\xd0\x1c\x28\xed\xb3\x9f\xd7\x98\xc9\x39\xc4\xcd\xd7\x97\x86\x32\x74\x2c\x93\xa8\x02\x97\xa3\x58\x04\xf8\xd5\xd1\x39\x9f\x2b\x22\xbf\x8c\xc8\xee\xa0\xfe\xd8\x67\x6a\xfd\x79\x6b\x1d\x98\x93\x14\x02\xfa\xf5\xc7\x22\x2a\xcf\xa5\xc3\xff\xe2\x41\x64\x3f\x07\xf0\x69\xf4\x71\xdb\x3b\x48\xbb\xf4\x79\xeb\x15\xd7\x5d\x21\xd2\x73\xaa\xb8\xa7\xd0\xbb\xa6\x47\xe6\xfb\x6f\x7c\x6d\xe7\x18\xd7\xfb\x8e\xb0\xeb\xcb\x55\x47\x41\xd3\x15\x53\xc3\xed\x34\xdb\x04\x9e\x9c\x55\x6b\x65\xa2\x88\x76\x3b\x81\x81\x79\x98\xd1\x50\x9a\xfd\x6d\xe0\x1a\x27\x6f\x8f\x53\xc1\x35\x67\x09\xff\x1b\x21\x4c\x85\xd2\x4c\x68\x65\x29\x35\x96\x90\x81\x67\xc5\x52\x2d\xd0\x76\x5a\xb6\x9d\x81\x4f\x41\xbb\x39\x7c\x5d\x4b\xc3\xbb\x33\xb0\x9c\x69\x16\x6d\x01\xbd\x09\xd6\xf2\x35\xdd\xf6\xa1\xd9\x97\x75\xcb\xed\x55\x72\x54\xb0\x23\xd3\x10\xc0\x4e\xa6\x50\xee\x54\xe5\xf1\xfc\x4f\x00\x00\x00\xff\xff\x2e\xe9\x3b\x51\x51\x17\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0x42, 0xec, 0xa6, 0x54, 0x9b, 0x1a, 0xd0, 0xe6, 0x4b, 0xd4, 0x83, 0x22, 0xc, 0x8e, 0xf2, 0x60, 0xa3, 0xe5, 0x47, 0x52, 0xa3, 0x6b, 0xae, 0x41, 0x68, 0xc1, 0x1e, 0x92, 0x64, 0x48, 0x11}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"crypto.cdc": &bintree{contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
