// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (5.261kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdd\x6e\xe3\x36\x13\xbd\xf7\x53\xcc\x97\xab\x04\x9f\xe1\xa4\x40\x51\x14\x06\xb4\xc1\xb6\xdd\xb6\x41\x5a\xa0\x48\x36\xbb\x17\x41\xd0\x65\xac\xb1\x44\x44\x4b\x19\xe4\xc8\x89\x6a\xf8\xdd\x0b\x8a\x12\xc5\x3f\x25\x4e\x9b\xfa\x22\x91\xcd\x33\xc3\x33\x87\x33\x23\x8d\x66\x9b\xe6\x1e\x14\xc9\x66\x45\xc0\x05\xa1\x5c\xb3\x15\xc2\x35\x2f\x04\xa3\x46\xe2\x27\x94\x7c\xcd\x51\x02\xec\x66\x33\x00\x00\x0d\x5f\x37\x02\xb6\x7a\xa1\x3d\xee\x7e\xd3\x1f\x35\x58\x2c\xe1\xf6\xe6\x42\xd0\xf7\x77\x73\xbb\x46\xac\x58\xc2\x35\x49\x2e\x8a\xb9\x67\x80\xf9\x4f\x8c\x58\xc2\x62\xd3\xdc\x57\x7c\x75\x89\x6d\x62\xcd\xee\xf4\xbe\x2a\x6a\xc9\xa9\xfc\xba\x1c\xf9\xda\xdf\x46\x7c\xc9\x54\xe9\x40\x7f\x75\xbf\x76\xa0\x93\x25\xfc\x50\xd7\xd5\x6c\x3f\x4b\x8b\xa1\x2d\x12\x0a\x68\xbf\x63\xfc\x79\x3a\x90\x64\xe8\xec\x05\x36\xbd\x97\x81\xd0\xaa\x16\x24\xd9\x8a\xe0\x47\xd9\x6e\xa8\x4e\xf2\xf0\xb7\x9f\xdc\x61\x74\x0e\x3b\x4b\x47\x22\x35\x52\x80\xc2\x6a\xbd\xd0\xce\x3e\x73\x2a\x3f\xb2\xa2\xf7\xa9\xff\xce\x4d\x1c\x47\x47\x9e\x67\x7b\x79\xd2\xb9\xda\xc7\xb4\x7c\x4f\x96\x9d\x2b\xca\xbf\xa3\x8a\x72\xe1\x84\xef\x50\x25\x56\x1c\xc8\xb5\x3f\xee\x4b\x6c\x7f\xe3\x8a\x3e\x08\x92\xad\xb3\xa1\x46\x54\x48\xf0\x80\xed\x85\xc8\xf1\x69\x09\x17\x82\xa2\x55\x27\x5d\xff\x18\x2e\x23\xd0\x8b\x79\xe8\x82\x1f\x91\x17\x25\x2d\xe1\xe6\x67\xfe\xf4\xdd\xb7\xd1\x32\x57\x57\xb8\xad\x1f\x30\xef\x53\xd7\x02\xb8\xe0\x34\x26\xa5\xfe\x78\xcc\xe7\xde\x52\x8a\xb6\x8f\x78\x8e\xb3\x8f\xf4\x09\xfb\x6b\x21\xdb\xe1\xf7\x13\x47\xe8\xae\xb2\xf5\xb1\x0e\x7c\x21\xb3\xd4\x63\x90\x65\x0e\xd9\x18\x45\x0c\xf3\xe8\x43\xe6\x87\x13\xc3\x4d\x0c\x90\xf5\xc1\xc4\x00\x1b\x08\x64\x63\x50\x16\xb6\x7f\x3e\xb5\x86\xba\xed\x56\x25\xdf\x76\x07\x89\x82\x24\x47\xb5\x84\x5b\x37\x01\xef\x82\x03\x4d\x0a\xd5\x9b\x42\x06\xb7\x77\x0e\x07\x7b\x79\x7a\x7a\x0a\xef\xf3\x5c\x01\x03\x81\x8f\x5a\x4c\x78\xe4\x54\x02\x95\x08\x05\xdf\xa2\x08\xc3\x1c\x2a\x97\xe5\xb9\x9f\x42\x7f\xfe\x87\x99\x32\x26\xc3\x32\xac\x41\xcf\xca\x2d\x42\xc8\x3c\x05\x16\x15\x8a\x82\xca\x08\x8e\x9d\x9f\xcc\x73\xeb\x07\x06\x5e\x7d\x0c\x57\xf3\x08\xe3\x84\xbf\x49\x87\x9f\x90\xa0\x9c\x96\xc0\x95\xc1\xfc\x8f\xd7\x9d\xa2\x59\xb3\x4a\xa1\x07\x38\x99\x4c\x87\x05\xdb\x6c\x50\xe4\xc7\x5d\xf0\x3e\xac\x6f\x9e\xdd\xca\x54\xc2\x5c\x75\x18\xd5\x25\x89\xce\x18\x46\x4e\xbe\xf0\x4e\x1d\xe0\x6b\xe0\x04\xf8\xc4\x15\xa9\x45\x60\x6d\xaa\xe3\x01\x5b\x05\x4c\x22\xb0\xea\x91\xb5\xaa\xdf\x19\xf3\x39\xdc\x37\x9d\xc3\x16\x4a\xb6\x45\xf8\x62\x83\xfc\x02\x6b\x8e\x55\x0e\x0a\x09\xa8\x06\x92\x0d\x46\x79\x59\x20\x1d\x7b\xdd\x2c\x48\x99\xf3\xa0\x4a\xf8\x7a\xcc\x98\x77\xc9\x94\x09\x0c\x1c\x91\x04\xaf\xbc\xa5\xfd\x2c\x25\xa5\xeb\xf2\x76\xd8\x6b\xb2\x18\x7f\x67\xf2\xe1\x39\x65\x41\x1a\x2d\x8c\x4a\x79\x8d\x0a\x44\x4d\x90\x63\x85\x84\xc0\xe3\x42\x35\xf8\x40\x93\xb7\x13\x21\x10\xc0\xfd\xa6\xcb\x6b\xd5\x48\x89\xa2\xaf\xd6\xec\x25\x2d\x20\xc8\xd3\x11\xf2\x8a\x0a\x75\xb7\x5c\x1c\x54\xae\x9e\xc5\xe1\xb5\xeb\x99\x1d\x58\xc8\x9e\xcd\x01\x55\xed\xe5\x38\x78\x45\x3d\x55\x94\xb2\x41\x7d\xa0\x63\xde\xd8\x67\x61\x53\x6e\x5b\x56\xf1\x1c\xd6\xb5\x0c\x20\x98\x77\xcf\x46\x51\x02\x71\xf5\x49\x5b\xf8\x92\x5b\x9f\xd7\x48\xe3\x7d\xc9\x3e\x61\xdf\xcd\x23\x74\xf0\x18\xef\xb6\x74\x7d\xbf\x0f\x5b\xf9\x96\x49\xc3\xf4\x73\x27\x92\x1a\x6e\x05\x90\xc1\xd9\xe2\x2c\x6e\xfb\x0a\x51\x5c\x76\x87\xcd\x57\xfa\x56\xb9\xbb\x10\x64\x3c\xef\x21\x83\x5d\x50\x9a\x3a\x7a\x1b\x02\x70\xe1\xc5\x13\x52\x31\x0a\xc3\x07\xa1\x34\x78\x28\x4d\x53\x8d\x5c\x19\x96\xb1\x05\x5f\x8f\x4e\x17\xaf\xaf\x2e\x18\x1b\x48\xdc\xd9\x21\x6e\x36\x21\x49\xae\x1c\x96\x25\x33\x5d\x82\x55\x12\x59\xde\xc2\x3d\xea\x33\x47\x14\x69\xda\x9e\x94\xb7\x71\x14\x77\x70\x7e\x6e\x58\xbd\x1d\xf1\x2b\x5c\xd5\x32\x0f\xd4\x7d\x64\x6a\x82\xe6\x01\x1c\x33\x53\x3c\xa9\xcd\x7e\x41\xd3\x57\xd9\x8a\x1a\x56\xe9\x0d\x63\x58\xff\x2c\x11\x36\xad\xc4\x4e\x07\x65\x8b\x39\x80\xbe\x79\x27\x65\x7f\xc0\xd6\x79\x76\x7c\xfb\x8c\x40\x37\xe3\x9f\x4b\xdb\xff\x99\x11\x72\xa1\xc2\xf9\x7e\x11\xce\xf3\xde\x89\x8c\xb3\xfd\xa8\x91\xbd\x8a\x9b\x1c\x0c\x83\x6f\xbf\x5b\x5e\x7f\x65\x5c\x5c\xe3\x86\x49\x46\xbc\x16\x1f\x59\x71\xa3\x50\xa6\x0d\xdd\x86\x32\x5e\xa7\xb1\x4e\xa3\xd7\x12\xdb\xaf\xcf\x75\x7a\x98\x78\x85\xe0\x3b\x88\x11\x69\x4f\xfe\x7d\x43\xfb\x98\x9e\x31\x20\x31\xf2\x0c\x9f\xd7\x9e\xbe\xdb\x3f\x21\xf3\xbf\xfe\xbf\x8b\x25\x31\xc3\xa4\x1f\x62\x3c\xdb\x77\x19\x7c\xb3\x38\x3b\x74\xa4\xb1\x37\x85\x57\x4f\xcc\xf1\xeb\xa2\x99\x87\xe9\xc6\x1e\x7f\x74\x4d\xd8\xfc\xf3\x01\x72\xac\x97\x6c\xf4\x3b\x11\xf6\x30\xab\x4d\xa4\xf1\xf0\x2a\x23\x40\x47\x25\xb6\x84\x5d\xf4\x5a\x6d\xef\xdb\x98\x57\x1a\x4b\xd8\x99\x57\x4e\x3d\x81\x4e\x8b\xc3\xdc\xcd\x23\x17\x27\xee\x2d\xcf\x0f\xdd\xbe\xdb\xcb\x62\xb2\xbe\x89\x71\xda\x0f\xd0\x28\xdd\xa7\x13\xb8\x10\x9c\x38\xab\xf8\x5f\x08\xab\x5a\x28\x62\x82\x54\xb0\xe3\x84\x70\x90\xc1\x51\xa3\x50\x1e\xf5\x6a\xef\x67\x7f\x07\x00\x00\xff\xff\x75\x67\xea\xdc\x8d\x14\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0x6e, 0x4, 0xfb, 0x31, 0x31, 0xac, 0x2a, 0xae, 0x4b, 0x33, 0x2a, 0xaa, 0x1, 0x2c, 0x5a, 0x19, 0x0, 0xb6, 0xa4, 0x6e, 0xcc, 0x22, 0xa, 0x74, 0x39, 0xd, 0x7a, 0x8d, 0x31, 0xc2, 0xe2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": {nil, map[string]*bintree{
		"crypto.cdc": {contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
