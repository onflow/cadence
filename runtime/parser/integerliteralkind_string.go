/*
 * Cadence - The resource-oriented smart contract programming language
 *
 * Copyright 2019-2020 Dapper Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by "stringer -type=IntegerLiteralKind"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IntegerLiteralKindUnknown-0]
	_ = x[IntegerLiteralKindBinary-1]
	_ = x[IntegerLiteralKindOctal-2]
	_ = x[IntegerLiteralKindDecimal-3]
	_ = x[IntegerLiteralKindHexadecimal-4]
}

const _IntegerLiteralKind_name = "IntegerLiteralKindUnknownIntegerLiteralKindBinaryIntegerLiteralKindOctalIntegerLiteralKindDecimalIntegerLiteralKindHexadecimal"

var _IntegerLiteralKind_index = [...]uint8{0, 25, 49, 72, 97, 126}

func (i IntegerLiteralKind) String() string {
	if i < 0 || i >= IntegerLiteralKind(len(_IntegerLiteralKind_index)-1) {
		return "IntegerLiteralKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _IntegerLiteralKind_name[_IntegerLiteralKind_index[i]:_IntegerLiteralKind_index[i+1]]
}
