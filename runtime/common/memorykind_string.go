// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArray-7]
	_ = x[MemoryKindDictionary-8]
	_ = x[MemoryKindComposite-9]
	_ = x[MemoryKindOptional-10]
	_ = x[MemoryKindNil-11]
	_ = x[MemoryKindVoid-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindStorageReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunction-19]
	_ = x[MemoryKindHostFunction-20]
	_ = x[MemoryKindBoundFunction-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindPrimitiveStaticType-23]
	_ = x[MemoryKindCompositeStaticType-24]
	_ = x[MemoryKindInterfaceStaticType-25]
	_ = x[MemoryKindVariableSizedStaticType-26]
	_ = x[MemoryKindConstantSizedStaticType-27]
	_ = x[MemoryKindDictionaryStaticType-28]
	_ = x[MemoryKindOptionalStaticType-29]
	_ = x[MemoryKindRestrictedStaticType-30]
	_ = x[MemoryKindReferenceStaticType-31]
	_ = x[MemoryKindCapabilityStaticType-32]
	_ = x[MemoryKindFunctionStaticType-33]
	_ = x[MemoryKindCadenceVoid-34]
	_ = x[MemoryKindCadenceOptional-35]
	_ = x[MemoryKindCadenceBool-36]
	_ = x[MemoryKindCadenceString-37]
	_ = x[MemoryKindCadenceCharacter-38]
	_ = x[MemoryKindCadenceAddress-39]
	_ = x[MemoryKindCadenceInt-40]
	_ = x[MemoryKindCadenceNumber-41]
	_ = x[MemoryKindRawString-42]
	_ = x[MemoryKindAddressLocation-43]
	_ = x[MemoryKindBytes-44]
	_ = x[MemoryKindVariable-45]
	_ = x[MemoryKindTokenIdentifier-46]
	_ = x[MemoryKindTokenComment-47]
	_ = x[MemoryKindTokenNumericLiteral-48]
	_ = x[MemoryKindTokenSyntax-49]
	_ = x[MemoryKindProgram-50]
	_ = x[MemoryKindIdentifier-51]
	_ = x[MemoryKindArgument-52]
	_ = x[MemoryKindBlock-53]
	_ = x[MemoryKindFunctionBlock-54]
	_ = x[MemoryKindParameter-55]
	_ = x[MemoryKindParameterList-56]
	_ = x[MemoryKindTransfer-57]
	_ = x[MemoryKindMembers-58]
	_ = x[MemoryKindTypeAnnotation-59]
	_ = x[MemoryKindFunctionDeclaration-60]
	_ = x[MemoryKindCompositeDeclaration-61]
	_ = x[MemoryKindInterfaceDeclaration-62]
	_ = x[MemoryKindEnumCaseDeclaration-63]
	_ = x[MemoryKindFieldDeclaration-64]
	_ = x[MemoryKindTransactionDeclaration-65]
	_ = x[MemoryKindImportDeclaration-66]
	_ = x[MemoryKindVariableDeclaration-67]
	_ = x[MemoryKindSpecialFunctionDeclaration-68]
	_ = x[MemoryKindPragmaDeclaration-69]
	_ = x[MemoryKindAssignmentStatement-70]
	_ = x[MemoryKindBreakStatement-71]
	_ = x[MemoryKindContinueStatement-72]
	_ = x[MemoryKindEmitStatement-73]
	_ = x[MemoryKindExpressionStatement-74]
	_ = x[MemoryKindForStatement-75]
	_ = x[MemoryKindIfStatement-76]
	_ = x[MemoryKindReturnStatement-77]
	_ = x[MemoryKindSwapStatement-78]
	_ = x[MemoryKindSwitchStatement-79]
	_ = x[MemoryKindWhileStatement-80]
	_ = x[MemoryKindBooleanExpression-81]
	_ = x[MemoryKindNilExpression-82]
	_ = x[MemoryKindStringExpression-83]
	_ = x[MemoryKindIntegerExpression-84]
	_ = x[MemoryKindFixedPointExpression-85]
	_ = x[MemoryKindArrayExpression-86]
	_ = x[MemoryKindDictionaryExpression-87]
	_ = x[MemoryKindIdentifierExpression-88]
	_ = x[MemoryKindInvocationExpression-89]
	_ = x[MemoryKindMemberExpression-90]
	_ = x[MemoryKindIndexExpression-91]
	_ = x[MemoryKindConditionalExpression-92]
	_ = x[MemoryKindUnaryExpression-93]
	_ = x[MemoryKindBinaryExpression-94]
	_ = x[MemoryKindFunctionExpression-95]
	_ = x[MemoryKindCastingExpression-96]
	_ = x[MemoryKindCreateExpression-97]
	_ = x[MemoryKindDestroyExpression-98]
	_ = x[MemoryKindReferenceExpression-99]
	_ = x[MemoryKindForceExpression-100]
	_ = x[MemoryKindPathExpression-101]
	_ = x[MemoryKindConstantSizedType-102]
	_ = x[MemoryKindDictionaryType-103]
	_ = x[MemoryKindFunctionType-104]
	_ = x[MemoryKindInstantiationType-105]
	_ = x[MemoryKindNominalType-106]
	_ = x[MemoryKindOptionalType-107]
	_ = x[MemoryKindReferenceType-108]
	_ = x[MemoryKindRestrictedType-109]
	_ = x[MemoryKindVariableSizedType-110]
	_ = x[MemoryKindLast-111]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayDictionaryCompositeOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberRawStringAddressLocationBytesVariableTokenIdentifierTokenCommentTokenNumericLiteralTokenSyntaxProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypeLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 52, 62, 71, 79, 82, 86, 95, 104, 119, 128, 149, 172, 191, 203, 216, 222, 241, 260, 279, 302, 325, 345, 363, 383, 402, 422, 440, 451, 466, 477, 490, 506, 520, 530, 543, 552, 567, 572, 580, 595, 607, 626, 637, 644, 654, 662, 667, 680, 689, 702, 710, 717, 731, 750, 770, 790, 809, 825, 847, 864, 883, 909, 926, 945, 959, 976, 989, 1008, 1020, 1031, 1046, 1059, 1074, 1088, 1105, 1118, 1134, 1151, 1171, 1186, 1206, 1226, 1246, 1262, 1277, 1298, 1313, 1329, 1347, 1364, 1380, 1397, 1416, 1431, 1445, 1462, 1476, 1488, 1505, 1516, 1528, 1541, 1555, 1572, 1576}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
