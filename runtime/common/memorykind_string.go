// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindCapabilityValue-12]
	_ = x[MemoryKindStorageReferenceValue-13]
	_ = x[MemoryKindEphemeralReferenceValue-14]
	_ = x[MemoryKindInterpretedFunctionValue-15]
	_ = x[MemoryKindHostFunctionValue-16]
	_ = x[MemoryKindBoundFunctionValue-17]
	_ = x[MemoryKindBigInt-18]
	_ = x[MemoryKindSimpleCompositeValue-19]
	_ = x[MemoryKindPublishedValue-20]
	_ = x[MemoryKindStorageCapabilityControllerValue-21]
	_ = x[MemoryKindAccountCapabilityControllerValue-22]
	_ = x[MemoryKindAtreeArrayDataSlab-23]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-24]
	_ = x[MemoryKindAtreeArrayElementOverhead-25]
	_ = x[MemoryKindAtreeMapDataSlab-26]
	_ = x[MemoryKindAtreeMapMetaDataSlab-27]
	_ = x[MemoryKindAtreeMapElementOverhead-28]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-29]
	_ = x[MemoryKindAtreeEncodedSlab-30]
	_ = x[MemoryKindPrimitiveStaticType-31]
	_ = x[MemoryKindCompositeStaticType-32]
	_ = x[MemoryKindInterfaceStaticType-33]
	_ = x[MemoryKindVariableSizedStaticType-34]
	_ = x[MemoryKindConstantSizedStaticType-35]
	_ = x[MemoryKindDictionaryStaticType-36]
	_ = x[MemoryKindInclusiveRangeStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindIntersectionStaticType-39]
	_ = x[MemoryKindEntitlementSetStaticAccess-40]
	_ = x[MemoryKindEntitlementMapStaticAccess-41]
	_ = x[MemoryKindReferenceStaticType-42]
	_ = x[MemoryKindCapabilityStaticType-43]
	_ = x[MemoryKindFunctionStaticType-44]
	_ = x[MemoryKindCadenceVoidValue-45]
	_ = x[MemoryKindCadenceOptionalValue-46]
	_ = x[MemoryKindCadenceBoolValue-47]
	_ = x[MemoryKindCadenceStringValue-48]
	_ = x[MemoryKindCadenceCharacterValue-49]
	_ = x[MemoryKindCadenceAddressValue-50]
	_ = x[MemoryKindCadenceIntValue-51]
	_ = x[MemoryKindCadenceNumberValue-52]
	_ = x[MemoryKindCadenceArrayValueBase-53]
	_ = x[MemoryKindCadenceArrayValueLength-54]
	_ = x[MemoryKindCadenceDictionaryValue-55]
	_ = x[MemoryKindCadenceInclusiveRangeValue-56]
	_ = x[MemoryKindCadenceKeyValuePair-57]
	_ = x[MemoryKindCadenceStructValueBase-58]
	_ = x[MemoryKindCadenceStructValueSize-59]
	_ = x[MemoryKindCadenceResourceValueBase-60]
	_ = x[MemoryKindCadenceAttachmentValueBase-61]
	_ = x[MemoryKindCadenceResourceValueSize-62]
	_ = x[MemoryKindCadenceAttachmentValueSize-63]
	_ = x[MemoryKindCadenceEventValueBase-64]
	_ = x[MemoryKindCadenceEventValueSize-65]
	_ = x[MemoryKindCadenceContractValueBase-66]
	_ = x[MemoryKindCadenceContractValueSize-67]
	_ = x[MemoryKindCadenceEnumValueBase-68]
	_ = x[MemoryKindCadenceEnumValueSize-69]
	_ = x[MemoryKindCadencePathValue-70]
	_ = x[MemoryKindCadenceTypeValue-71]
	_ = x[MemoryKindCadenceCapabilityValue-72]
	_ = x[MemoryKindCadenceFunctionValue-73]
	_ = x[MemoryKindCadenceOptionalType-74]
	_ = x[MemoryKindCadenceVariableSizedArrayType-75]
	_ = x[MemoryKindCadenceConstantSizedArrayType-76]
	_ = x[MemoryKindCadenceDictionaryType-77]
	_ = x[MemoryKindCadenceInclusiveRangeType-78]
	_ = x[MemoryKindCadenceField-79]
	_ = x[MemoryKindCadenceParameter-80]
	_ = x[MemoryKindCadenceTypeParameter-81]
	_ = x[MemoryKindCadenceStructType-82]
	_ = x[MemoryKindCadenceResourceType-83]
	_ = x[MemoryKindCadenceAttachmentType-84]
	_ = x[MemoryKindCadenceEventType-85]
	_ = x[MemoryKindCadenceContractType-86]
	_ = x[MemoryKindCadenceStructInterfaceType-87]
	_ = x[MemoryKindCadenceResourceInterfaceType-88]
	_ = x[MemoryKindCadenceContractInterfaceType-89]
	_ = x[MemoryKindCadenceFunctionType-90]
	_ = x[MemoryKindCadenceEntitlementSetAccess-91]
	_ = x[MemoryKindCadenceEntitlementMapAccess-92]
	_ = x[MemoryKindCadenceReferenceType-93]
	_ = x[MemoryKindCadenceIntersectionType-94]
	_ = x[MemoryKindCadenceCapabilityType-95]
	_ = x[MemoryKindCadenceEnumType-96]
	_ = x[MemoryKindCadenceSubtypeBound-97]
	_ = x[MemoryKindCadenceSupertypeBound-98]
	_ = x[MemoryKindCadenceEqualBound-99]
	_ = x[MemoryKindCadenceNegationBound-100]
	_ = x[MemoryKindCadenceConjunctionBound-101]
	_ = x[MemoryKindRawString-102]
	_ = x[MemoryKindAddressLocation-103]
	_ = x[MemoryKindBytes-104]
	_ = x[MemoryKindVariable-105]
	_ = x[MemoryKindCompositeTypeInfo-106]
	_ = x[MemoryKindCompositeField-107]
	_ = x[MemoryKindInvocation-108]
	_ = x[MemoryKindStorageMap-109]
	_ = x[MemoryKindStorageKey-110]
	_ = x[MemoryKindTypeToken-111]
	_ = x[MemoryKindErrorToken-112]
	_ = x[MemoryKindSpaceToken-113]
	_ = x[MemoryKindProgram-114]
	_ = x[MemoryKindIdentifier-115]
	_ = x[MemoryKindArgument-116]
	_ = x[MemoryKindBlock-117]
	_ = x[MemoryKindFunctionBlock-118]
	_ = x[MemoryKindParameter-119]
	_ = x[MemoryKindParameterList-120]
	_ = x[MemoryKindTypeParameter-121]
	_ = x[MemoryKindTypeParameterList-122]
	_ = x[MemoryKindTransfer-123]
	_ = x[MemoryKindMembers-124]
	_ = x[MemoryKindTypeAnnotation-125]
	_ = x[MemoryKindDictionaryEntry-126]
	_ = x[MemoryKindFunctionDeclaration-127]
	_ = x[MemoryKindCompositeDeclaration-128]
	_ = x[MemoryKindAttachmentDeclaration-129]
	_ = x[MemoryKindInterfaceDeclaration-130]
	_ = x[MemoryKindEntitlementDeclaration-131]
	_ = x[MemoryKindEntitlementMappingElement-132]
	_ = x[MemoryKindEntitlementMappingDeclaration-133]
	_ = x[MemoryKindEnumCaseDeclaration-134]
	_ = x[MemoryKindFieldDeclaration-135]
	_ = x[MemoryKindTransactionDeclaration-136]
	_ = x[MemoryKindImportDeclaration-137]
	_ = x[MemoryKindVariableDeclaration-138]
	_ = x[MemoryKindSpecialFunctionDeclaration-139]
	_ = x[MemoryKindPragmaDeclaration-140]
	_ = x[MemoryKindAssignmentStatement-141]
	_ = x[MemoryKindBreakStatement-142]
	_ = x[MemoryKindContinueStatement-143]
	_ = x[MemoryKindEmitStatement-144]
	_ = x[MemoryKindExpressionStatement-145]
	_ = x[MemoryKindForStatement-146]
	_ = x[MemoryKindIfStatement-147]
	_ = x[MemoryKindReturnStatement-148]
	_ = x[MemoryKindSwapStatement-149]
	_ = x[MemoryKindSwitchStatement-150]
	_ = x[MemoryKindWhileStatement-151]
	_ = x[MemoryKindRemoveStatement-152]
	_ = x[MemoryKindBooleanExpression-153]
	_ = x[MemoryKindVoidExpression-154]
	_ = x[MemoryKindNilExpression-155]
	_ = x[MemoryKindStringExpression-156]
	_ = x[MemoryKindIntegerExpression-157]
	_ = x[MemoryKindFixedPointExpression-158]
	_ = x[MemoryKindArrayExpression-159]
	_ = x[MemoryKindDictionaryExpression-160]
	_ = x[MemoryKindIdentifierExpression-161]
	_ = x[MemoryKindInvocationExpression-162]
	_ = x[MemoryKindMemberExpression-163]
	_ = x[MemoryKindIndexExpression-164]
	_ = x[MemoryKindConditionalExpression-165]
	_ = x[MemoryKindUnaryExpression-166]
	_ = x[MemoryKindBinaryExpression-167]
	_ = x[MemoryKindFunctionExpression-168]
	_ = x[MemoryKindCastingExpression-169]
	_ = x[MemoryKindCreateExpression-170]
	_ = x[MemoryKindDestroyExpression-171]
	_ = x[MemoryKindReferenceExpression-172]
	_ = x[MemoryKindForceExpression-173]
	_ = x[MemoryKindPathExpression-174]
	_ = x[MemoryKindAttachExpression-175]
	_ = x[MemoryKindConstantSizedType-176]
	_ = x[MemoryKindDictionaryType-177]
	_ = x[MemoryKindFunctionType-178]
	_ = x[MemoryKindInstantiationType-179]
	_ = x[MemoryKindNominalType-180]
	_ = x[MemoryKindOptionalType-181]
	_ = x[MemoryKindReferenceType-182]
	_ = x[MemoryKindIntersectionType-183]
	_ = x[MemoryKindVariableSizedType-184]
	_ = x[MemoryKindPosition-185]
	_ = x[MemoryKindRange-186]
	_ = x[MemoryKindElaboration-187]
	_ = x[MemoryKindActivation-188]
	_ = x[MemoryKindActivationEntries-189]
	_ = x[MemoryKindVariableSizedSemaType-190]
	_ = x[MemoryKindConstantSizedSemaType-191]
	_ = x[MemoryKindDictionarySemaType-192]
	_ = x[MemoryKindOptionalSemaType-193]
	_ = x[MemoryKindIntersectionSemaType-194]
	_ = x[MemoryKindReferenceSemaType-195]
	_ = x[MemoryKindEntitlementSemaType-196]
	_ = x[MemoryKindEntitlementMapSemaType-197]
	_ = x[MemoryKindEntitlementRelationSemaType-198]
	_ = x[MemoryKindCapabilitySemaType-199]
	_ = x[MemoryKindInclusiveRangeSemaType-200]
	_ = x[MemoryKindOrderedMap-201]
	_ = x[MemoryKindOrderedMapEntryList-202]
	_ = x[MemoryKindOrderedMapEntry-203]
	_ = x[MemoryKindLast-204]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueCapabilityValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeInclusiveRangeStaticTypeOptionalStaticTypeIntersectionStaticTypeEntitlementSetStaticAccessEntitlementMapStaticAccessReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceInclusiveRangeValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceInclusiveRangeTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceEntitlementSetAccessCadenceEntitlementMapAccessCadenceReferenceTypeCadenceIntersectionTypeCadenceCapabilityTypeCadenceEnumTypeCadenceSubtypeBoundCadenceSupertypeBoundCadenceEqualBoundCadenceNegationBoundCadenceConjunctionBoundRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeIntersectionTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeIntersectionSemaTypeReferenceSemaTypeEntitlementSemaTypeEntitlementMapSemaTypeEntitlementRelationSemaTypeCapabilitySemaTypeInclusiveRangeSemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 176, 197, 220, 244, 261, 279, 285, 305, 319, 351, 383, 401, 423, 448, 464, 484, 507, 534, 550, 569, 588, 607, 630, 653, 673, 697, 715, 737, 763, 789, 808, 828, 846, 862, 882, 898, 916, 937, 956, 971, 989, 1010, 1033, 1055, 1081, 1100, 1122, 1144, 1168, 1194, 1218, 1244, 1265, 1286, 1310, 1334, 1354, 1374, 1390, 1406, 1428, 1448, 1467, 1496, 1525, 1546, 1571, 1583, 1599, 1619, 1636, 1655, 1676, 1692, 1711, 1737, 1765, 1793, 1812, 1839, 1866, 1886, 1909, 1930, 1945, 1964, 1985, 2002, 2022, 2045, 2054, 2069, 2074, 2082, 2099, 2113, 2123, 2133, 2143, 2152, 2162, 2172, 2179, 2189, 2197, 2202, 2215, 2224, 2237, 2250, 2267, 2275, 2282, 2296, 2311, 2330, 2350, 2371, 2391, 2413, 2438, 2467, 2486, 2502, 2524, 2541, 2560, 2586, 2603, 2622, 2636, 2653, 2666, 2685, 2697, 2708, 2723, 2736, 2751, 2765, 2780, 2797, 2811, 2824, 2840, 2857, 2877, 2892, 2912, 2932, 2952, 2968, 2983, 3004, 3019, 3035, 3053, 3070, 3086, 3103, 3122, 3137, 3151, 3167, 3184, 3198, 3210, 3227, 3238, 3250, 3263, 3279, 3296, 3304, 3309, 3320, 3330, 3347, 3368, 3389, 3407, 3423, 3443, 3460, 3479, 3501, 3528, 3546, 3568, 3578, 3597, 3612, 3616}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
