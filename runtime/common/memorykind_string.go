// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArrayBase-7]
	_ = x[MemoryKindArrayLength-8]
	_ = x[MemoryKindDictionaryBase-9]
	_ = x[MemoryKindDictionarySize-10]
	_ = x[MemoryKindCompositeBase-11]
	_ = x[MemoryKindCompositeSize-12]
	_ = x[MemoryKindOptional-13]
	_ = x[MemoryKindNil-14]
	_ = x[MemoryKindVoid-15]
	_ = x[MemoryKindTypeValue-16]
	_ = x[MemoryKindPathValue-17]
	_ = x[MemoryKindCapabilityValue-18]
	_ = x[MemoryKindLinkValue-19]
	_ = x[MemoryKindStorageReferenceValue-20]
	_ = x[MemoryKindEphemeralReferenceValue-21]
	_ = x[MemoryKindInterpretedFunction-22]
	_ = x[MemoryKindHostFunction-23]
	_ = x[MemoryKindBoundFunction-24]
	_ = x[MemoryKindBigInt-25]
	_ = x[MemoryKindPrimitiveStaticType-26]
	_ = x[MemoryKindCompositeStaticType-27]
	_ = x[MemoryKindInterfaceStaticType-28]
	_ = x[MemoryKindVariableSizedStaticType-29]
	_ = x[MemoryKindConstantSizedStaticType-30]
	_ = x[MemoryKindDictionaryStaticType-31]
	_ = x[MemoryKindOptionalStaticType-32]
	_ = x[MemoryKindRestrictedStaticType-33]
	_ = x[MemoryKindReferenceStaticType-34]
	_ = x[MemoryKindCapabilityStaticType-35]
	_ = x[MemoryKindFunctionStaticType-36]
	_ = x[MemoryKindCadenceVoid-37]
	_ = x[MemoryKindCadenceOptional-38]
	_ = x[MemoryKindCadenceBool-39]
	_ = x[MemoryKindCadenceString-40]
	_ = x[MemoryKindCadenceCharacter-41]
	_ = x[MemoryKindCadenceAddress-42]
	_ = x[MemoryKindCadenceInt-43]
	_ = x[MemoryKindCadenceNumber-44]
	_ = x[MemoryKindCadenceArrayBase-45]
	_ = x[MemoryKindCadenceArrayLength-46]
	_ = x[MemoryKindCadenceDictionaryBase-47]
	_ = x[MemoryKindCadenceDictionarySize-48]
	_ = x[MemoryKindRawString-49]
	_ = x[MemoryKindAddressLocation-50]
	_ = x[MemoryKindBytes-51]
	_ = x[MemoryKindVariable-52]
	_ = x[MemoryKindValueToken-53]
	_ = x[MemoryKindSyntaxToken-54]
	_ = x[MemoryKindSpaceToken-55]
	_ = x[MemoryKindProgram-56]
	_ = x[MemoryKindIdentifier-57]
	_ = x[MemoryKindArgument-58]
	_ = x[MemoryKindBlock-59]
	_ = x[MemoryKindFunctionBlock-60]
	_ = x[MemoryKindParameter-61]
	_ = x[MemoryKindParameterList-62]
	_ = x[MemoryKindTransfer-63]
	_ = x[MemoryKindMembers-64]
	_ = x[MemoryKindTypeAnnotation-65]
	_ = x[MemoryKindDictionaryEntry-66]
	_ = x[MemoryKindFunctionDeclaration-67]
	_ = x[MemoryKindCompositeDeclaration-68]
	_ = x[MemoryKindInterfaceDeclaration-69]
	_ = x[MemoryKindEnumCaseDeclaration-70]
	_ = x[MemoryKindFieldDeclaration-71]
	_ = x[MemoryKindTransactionDeclaration-72]
	_ = x[MemoryKindImportDeclaration-73]
	_ = x[MemoryKindVariableDeclaration-74]
	_ = x[MemoryKindSpecialFunctionDeclaration-75]
	_ = x[MemoryKindPragmaDeclaration-76]
	_ = x[MemoryKindAssignmentStatement-77]
	_ = x[MemoryKindBreakStatement-78]
	_ = x[MemoryKindContinueStatement-79]
	_ = x[MemoryKindEmitStatement-80]
	_ = x[MemoryKindExpressionStatement-81]
	_ = x[MemoryKindForStatement-82]
	_ = x[MemoryKindIfStatement-83]
	_ = x[MemoryKindReturnStatement-84]
	_ = x[MemoryKindSwapStatement-85]
	_ = x[MemoryKindSwitchStatement-86]
	_ = x[MemoryKindWhileStatement-87]
	_ = x[MemoryKindBooleanExpression-88]
	_ = x[MemoryKindNilExpression-89]
	_ = x[MemoryKindStringExpression-90]
	_ = x[MemoryKindIntegerExpression-91]
	_ = x[MemoryKindFixedPointExpression-92]
	_ = x[MemoryKindArrayExpression-93]
	_ = x[MemoryKindDictionaryExpression-94]
	_ = x[MemoryKindIdentifierExpression-95]
	_ = x[MemoryKindInvocationExpression-96]
	_ = x[MemoryKindMemberExpression-97]
	_ = x[MemoryKindIndexExpression-98]
	_ = x[MemoryKindConditionalExpression-99]
	_ = x[MemoryKindUnaryExpression-100]
	_ = x[MemoryKindBinaryExpression-101]
	_ = x[MemoryKindFunctionExpression-102]
	_ = x[MemoryKindCastingExpression-103]
	_ = x[MemoryKindCreateExpression-104]
	_ = x[MemoryKindDestroyExpression-105]
	_ = x[MemoryKindReferenceExpression-106]
	_ = x[MemoryKindForceExpression-107]
	_ = x[MemoryKindPathExpression-108]
	_ = x[MemoryKindConstantSizedType-109]
	_ = x[MemoryKindDictionaryType-110]
	_ = x[MemoryKindFunctionType-111]
	_ = x[MemoryKindInstantiationType-112]
	_ = x[MemoryKindNominalType-113]
	_ = x[MemoryKindOptionalType-114]
	_ = x[MemoryKindReferenceType-115]
	_ = x[MemoryKindRestrictedType-116]
	_ = x[MemoryKindVariableSizedType-117]
	_ = x[MemoryKindPosition-118]
	_ = x[MemoryKindRange-119]
	_ = x[MemoryKindElaboration-120]
	_ = x[MemoryKindLast-121]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayBaseArrayLengthDictionaryBaseDictionarySizeCompositeBaseCompositeSizeOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberCadenceArrayBaseCadenceArrayLengthCadenceDictionaryBaseCadenceDictionarySizeRawStringAddressLocationBytesVariableValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 56, 67, 81, 95, 108, 121, 129, 132, 136, 145, 154, 169, 178, 199, 222, 241, 253, 266, 272, 291, 310, 329, 352, 375, 395, 413, 433, 452, 472, 490, 501, 516, 527, 540, 556, 570, 580, 593, 609, 627, 648, 669, 678, 693, 698, 706, 716, 727, 737, 744, 754, 762, 767, 780, 789, 802, 810, 817, 831, 846, 865, 885, 905, 924, 940, 962, 979, 998, 1024, 1041, 1060, 1074, 1091, 1104, 1123, 1135, 1146, 1161, 1174, 1189, 1203, 1220, 1233, 1249, 1266, 1286, 1301, 1321, 1341, 1361, 1377, 1392, 1413, 1428, 1444, 1462, 1479, 1495, 1512, 1531, 1546, 1560, 1577, 1591, 1603, 1620, 1631, 1643, 1656, 1670, 1687, 1695, 1700, 1711, 1715}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
