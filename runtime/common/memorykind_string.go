// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindCapabilityValue-12]
	_ = x[MemoryKindStorageReferenceValue-13]
	_ = x[MemoryKindEphemeralReferenceValue-14]
	_ = x[MemoryKindInterpretedFunctionValue-15]
	_ = x[MemoryKindHostFunctionValue-16]
	_ = x[MemoryKindBoundFunctionValue-17]
	_ = x[MemoryKindBigInt-18]
	_ = x[MemoryKindSimpleCompositeValue-19]
	_ = x[MemoryKindPublishedValue-20]
	_ = x[MemoryKindStorageCapabilityControllerValue-21]
	_ = x[MemoryKindAccountCapabilityControllerValue-22]
	_ = x[MemoryKindAtreeArrayDataSlab-23]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-24]
	_ = x[MemoryKindAtreeArrayElementOverhead-25]
	_ = x[MemoryKindAtreeMapDataSlab-26]
	_ = x[MemoryKindAtreeMapMetaDataSlab-27]
	_ = x[MemoryKindAtreeMapElementOverhead-28]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-29]
	_ = x[MemoryKindAtreeEncodedSlab-30]
	_ = x[MemoryKindPrimitiveStaticType-31]
	_ = x[MemoryKindCompositeStaticType-32]
	_ = x[MemoryKindInterfaceStaticType-33]
	_ = x[MemoryKindVariableSizedStaticType-34]
	_ = x[MemoryKindConstantSizedStaticType-35]
	_ = x[MemoryKindDictionaryStaticType-36]
	_ = x[MemoryKindInclusiveRangeStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindIntersectionStaticType-39]
	_ = x[MemoryKindEntitlementSetStaticAccess-40]
	_ = x[MemoryKindEntitlementMapStaticAccess-41]
	_ = x[MemoryKindReferenceStaticType-42]
	_ = x[MemoryKindCapabilityStaticType-43]
	_ = x[MemoryKindFunctionStaticType-44]
	_ = x[MemoryKindCadenceVoidValue-45]
	_ = x[MemoryKindCadenceOptionalValue-46]
	_ = x[MemoryKindCadenceBoolValue-47]
	_ = x[MemoryKindCadenceStringValue-48]
	_ = x[MemoryKindCadenceCharacterValue-49]
	_ = x[MemoryKindCadenceAddressValue-50]
	_ = x[MemoryKindCadenceIntValue-51]
	_ = x[MemoryKindCadenceNumberValue-52]
	_ = x[MemoryKindCadenceArrayValueBase-53]
	_ = x[MemoryKindCadenceArrayValueLength-54]
	_ = x[MemoryKindCadenceDictionaryValue-55]
	_ = x[MemoryKindCadenceInclusiveRangeValue-56]
	_ = x[MemoryKindCadenceKeyValuePair-57]
	_ = x[MemoryKindCadenceStructValueBase-58]
	_ = x[MemoryKindCadenceStructValueSize-59]
	_ = x[MemoryKindCadenceResourceValueBase-60]
	_ = x[MemoryKindCadenceAttachmentValueBase-61]
	_ = x[MemoryKindCadenceResourceValueSize-62]
	_ = x[MemoryKindCadenceAttachmentValueSize-63]
	_ = x[MemoryKindCadenceEventValueBase-64]
	_ = x[MemoryKindCadenceEventValueSize-65]
	_ = x[MemoryKindCadenceContractValueBase-66]
	_ = x[MemoryKindCadenceContractValueSize-67]
	_ = x[MemoryKindCadenceEnumValueBase-68]
	_ = x[MemoryKindCadenceEnumValueSize-69]
	_ = x[MemoryKindCadencePathValue-70]
	_ = x[MemoryKindCadenceTypeValue-71]
	_ = x[MemoryKindCadenceCapabilityValue-72]
	_ = x[MemoryKindCadenceFunctionValue-73]
	_ = x[MemoryKindCadenceOptionalType-74]
	_ = x[MemoryKindCadenceVariableSizedArrayType-75]
	_ = x[MemoryKindCadenceConstantSizedArrayType-76]
	_ = x[MemoryKindCadenceDictionaryType-77]
	_ = x[MemoryKindCadenceInclusiveRangeType-78]
	_ = x[MemoryKindCadenceField-79]
	_ = x[MemoryKindCadenceParameter-80]
	_ = x[MemoryKindCadenceTypeParameter-81]
	_ = x[MemoryKindCadenceStructType-82]
	_ = x[MemoryKindCadenceResourceType-83]
	_ = x[MemoryKindCadenceAttachmentType-84]
	_ = x[MemoryKindCadenceEventType-85]
	_ = x[MemoryKindCadenceContractType-86]
	_ = x[MemoryKindCadenceStructInterfaceType-87]
	_ = x[MemoryKindCadenceResourceInterfaceType-88]
	_ = x[MemoryKindCadenceContractInterfaceType-89]
	_ = x[MemoryKindCadenceFunctionType-90]
	_ = x[MemoryKindCadenceEntitlementSetAccess-91]
	_ = x[MemoryKindCadenceEntitlementMapAccess-92]
	_ = x[MemoryKindCadenceReferenceType-93]
	_ = x[MemoryKindCadenceIntersectionType-94]
	_ = x[MemoryKindCadenceCapabilityType-95]
	_ = x[MemoryKindCadenceEnumType-96]
	_ = x[MemoryKindCadenceSubtypeBound-97]
	_ = x[MemoryKindCadenceEqualBound-98]
	_ = x[MemoryKindCadenceNegationBound-99]
	_ = x[MemoryKindCadenceConjunctionBound-100]
	_ = x[MemoryKindRawString-101]
	_ = x[MemoryKindAddressLocation-102]
	_ = x[MemoryKindBytes-103]
	_ = x[MemoryKindVariable-104]
	_ = x[MemoryKindCompositeTypeInfo-105]
	_ = x[MemoryKindCompositeField-106]
	_ = x[MemoryKindInvocation-107]
	_ = x[MemoryKindStorageMap-108]
	_ = x[MemoryKindStorageKey-109]
	_ = x[MemoryKindTypeToken-110]
	_ = x[MemoryKindErrorToken-111]
	_ = x[MemoryKindSpaceToken-112]
	_ = x[MemoryKindProgram-113]
	_ = x[MemoryKindIdentifier-114]
	_ = x[MemoryKindArgument-115]
	_ = x[MemoryKindBlock-116]
	_ = x[MemoryKindFunctionBlock-117]
	_ = x[MemoryKindParameter-118]
	_ = x[MemoryKindParameterList-119]
	_ = x[MemoryKindTypeParameter-120]
	_ = x[MemoryKindTypeParameterList-121]
	_ = x[MemoryKindTransfer-122]
	_ = x[MemoryKindMembers-123]
	_ = x[MemoryKindTypeAnnotation-124]
	_ = x[MemoryKindDictionaryEntry-125]
	_ = x[MemoryKindFunctionDeclaration-126]
	_ = x[MemoryKindCompositeDeclaration-127]
	_ = x[MemoryKindAttachmentDeclaration-128]
	_ = x[MemoryKindInterfaceDeclaration-129]
	_ = x[MemoryKindEntitlementDeclaration-130]
	_ = x[MemoryKindEntitlementMappingElement-131]
	_ = x[MemoryKindEntitlementMappingDeclaration-132]
	_ = x[MemoryKindEnumCaseDeclaration-133]
	_ = x[MemoryKindFieldDeclaration-134]
	_ = x[MemoryKindTransactionDeclaration-135]
	_ = x[MemoryKindImportDeclaration-136]
	_ = x[MemoryKindVariableDeclaration-137]
	_ = x[MemoryKindSpecialFunctionDeclaration-138]
	_ = x[MemoryKindPragmaDeclaration-139]
	_ = x[MemoryKindAssignmentStatement-140]
	_ = x[MemoryKindBreakStatement-141]
	_ = x[MemoryKindContinueStatement-142]
	_ = x[MemoryKindEmitStatement-143]
	_ = x[MemoryKindExpressionStatement-144]
	_ = x[MemoryKindForStatement-145]
	_ = x[MemoryKindIfStatement-146]
	_ = x[MemoryKindReturnStatement-147]
	_ = x[MemoryKindSwapStatement-148]
	_ = x[MemoryKindSwitchStatement-149]
	_ = x[MemoryKindWhileStatement-150]
	_ = x[MemoryKindRemoveStatement-151]
	_ = x[MemoryKindBooleanExpression-152]
	_ = x[MemoryKindVoidExpression-153]
	_ = x[MemoryKindNilExpression-154]
	_ = x[MemoryKindStringExpression-155]
	_ = x[MemoryKindIntegerExpression-156]
	_ = x[MemoryKindFixedPointExpression-157]
	_ = x[MemoryKindArrayExpression-158]
	_ = x[MemoryKindDictionaryExpression-159]
	_ = x[MemoryKindIdentifierExpression-160]
	_ = x[MemoryKindInvocationExpression-161]
	_ = x[MemoryKindMemberExpression-162]
	_ = x[MemoryKindIndexExpression-163]
	_ = x[MemoryKindConditionalExpression-164]
	_ = x[MemoryKindUnaryExpression-165]
	_ = x[MemoryKindBinaryExpression-166]
	_ = x[MemoryKindFunctionExpression-167]
	_ = x[MemoryKindCastingExpression-168]
	_ = x[MemoryKindCreateExpression-169]
	_ = x[MemoryKindDestroyExpression-170]
	_ = x[MemoryKindReferenceExpression-171]
	_ = x[MemoryKindForceExpression-172]
	_ = x[MemoryKindPathExpression-173]
	_ = x[MemoryKindAttachExpression-174]
	_ = x[MemoryKindConstantSizedType-175]
	_ = x[MemoryKindDictionaryType-176]
	_ = x[MemoryKindFunctionType-177]
	_ = x[MemoryKindInstantiationType-178]
	_ = x[MemoryKindNominalType-179]
	_ = x[MemoryKindOptionalType-180]
	_ = x[MemoryKindReferenceType-181]
	_ = x[MemoryKindIntersectionType-182]
	_ = x[MemoryKindVariableSizedType-183]
	_ = x[MemoryKindPosition-184]
	_ = x[MemoryKindRange-185]
	_ = x[MemoryKindElaboration-186]
	_ = x[MemoryKindActivation-187]
	_ = x[MemoryKindActivationEntries-188]
	_ = x[MemoryKindVariableSizedSemaType-189]
	_ = x[MemoryKindConstantSizedSemaType-190]
	_ = x[MemoryKindDictionarySemaType-191]
	_ = x[MemoryKindOptionalSemaType-192]
	_ = x[MemoryKindIntersectionSemaType-193]
	_ = x[MemoryKindReferenceSemaType-194]
	_ = x[MemoryKindEntitlementSemaType-195]
	_ = x[MemoryKindEntitlementMapSemaType-196]
	_ = x[MemoryKindEntitlementRelationSemaType-197]
	_ = x[MemoryKindCapabilitySemaType-198]
	_ = x[MemoryKindInclusiveRangeSemaType-199]
	_ = x[MemoryKindOrderedMap-200]
	_ = x[MemoryKindOrderedMapEntryList-201]
	_ = x[MemoryKindOrderedMapEntry-202]
	_ = x[MemoryKindLast-203]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueCapabilityValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeInclusiveRangeStaticTypeOptionalStaticTypeIntersectionStaticTypeEntitlementSetStaticAccessEntitlementMapStaticAccessReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceInclusiveRangeValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceInclusiveRangeTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceEntitlementSetAccessCadenceEntitlementMapAccessCadenceReferenceTypeCadenceIntersectionTypeCadenceCapabilityTypeCadenceEnumTypeCadenceSubtypeBoundCadenceEqualBoundCadenceNegationBoundCadenceConjunctionBoundRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeIntersectionTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeIntersectionSemaTypeReferenceSemaTypeEntitlementSemaTypeEntitlementMapSemaTypeEntitlementRelationSemaTypeCapabilitySemaTypeInclusiveRangeSemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 176, 197, 220, 244, 261, 279, 285, 305, 319, 351, 383, 401, 423, 448, 464, 484, 507, 534, 550, 569, 588, 607, 630, 653, 673, 697, 715, 737, 763, 789, 808, 828, 846, 862, 882, 898, 916, 937, 956, 971, 989, 1010, 1033, 1055, 1081, 1100, 1122, 1144, 1168, 1194, 1218, 1244, 1265, 1286, 1310, 1334, 1354, 1374, 1390, 1406, 1428, 1448, 1467, 1496, 1525, 1546, 1571, 1583, 1599, 1619, 1636, 1655, 1676, 1692, 1711, 1737, 1765, 1793, 1812, 1839, 1866, 1886, 1909, 1930, 1945, 1964, 1981, 2001, 2024, 2033, 2048, 2053, 2061, 2078, 2092, 2102, 2112, 2122, 2131, 2141, 2151, 2158, 2168, 2176, 2181, 2194, 2203, 2216, 2229, 2246, 2254, 2261, 2275, 2290, 2309, 2329, 2350, 2370, 2392, 2417, 2446, 2465, 2481, 2503, 2520, 2539, 2565, 2582, 2601, 2615, 2632, 2645, 2664, 2676, 2687, 2702, 2715, 2730, 2744, 2759, 2776, 2790, 2803, 2819, 2836, 2856, 2871, 2891, 2911, 2931, 2947, 2962, 2983, 2998, 3014, 3032, 3049, 3065, 3082, 3101, 3116, 3130, 3146, 3163, 3177, 3189, 3206, 3217, 3229, 3242, 3258, 3275, 3283, 3288, 3299, 3309, 3326, 3347, 3368, 3386, 3402, 3422, 3439, 3458, 3480, 3507, 3525, 3547, 3557, 3576, 3591, 3595}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
