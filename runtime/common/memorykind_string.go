// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArrayBase-7]
	_ = x[MemoryKindArrayLength-8]
	_ = x[MemoryKindDictionaryBase-9]
	_ = x[MemoryKindDictionarySize-10]
	_ = x[MemoryKindCompositeBase-11]
	_ = x[MemoryKindCompositeSize-12]
	_ = x[MemoryKindOptional-13]
	_ = x[MemoryKindNil-14]
	_ = x[MemoryKindVoid-15]
	_ = x[MemoryKindTypeValue-16]
	_ = x[MemoryKindPathValue-17]
	_ = x[MemoryKindCapabilityValue-18]
	_ = x[MemoryKindLinkValue-19]
	_ = x[MemoryKindStorageReferenceValue-20]
	_ = x[MemoryKindEphemeralReferenceValue-21]
	_ = x[MemoryKindInterpretedFunction-22]
	_ = x[MemoryKindHostFunction-23]
	_ = x[MemoryKindBoundFunction-24]
	_ = x[MemoryKindBigInt-25]
	_ = x[MemoryKindPrimitiveStaticType-26]
	_ = x[MemoryKindCompositeStaticType-27]
	_ = x[MemoryKindInterfaceStaticType-28]
	_ = x[MemoryKindVariableSizedStaticType-29]
	_ = x[MemoryKindConstantSizedStaticType-30]
	_ = x[MemoryKindDictionaryStaticType-31]
	_ = x[MemoryKindOptionalStaticType-32]
	_ = x[MemoryKindRestrictedStaticType-33]
	_ = x[MemoryKindReferenceStaticType-34]
	_ = x[MemoryKindCapabilityStaticType-35]
	_ = x[MemoryKindFunctionStaticType-36]
	_ = x[MemoryKindCadenceVoid-37]
	_ = x[MemoryKindCadenceOptional-38]
	_ = x[MemoryKindCadenceBool-39]
	_ = x[MemoryKindCadenceString-40]
	_ = x[MemoryKindCadenceCharacter-41]
	_ = x[MemoryKindCadenceAddress-42]
	_ = x[MemoryKindCadenceInt-43]
	_ = x[MemoryKindCadenceNumber-44]
	_ = x[MemoryKindCadenceArrayBase-45]
	_ = x[MemoryKindCadenceArrayLength-46]
	_ = x[MemoryKindCadenceDictionaryBase-47]
	_ = x[MemoryKindCadenceDictionarySize-48]
	_ = x[MemoryKindCadenceStructBase-49]
	_ = x[MemoryKindCadenceStructSize-50]
	_ = x[MemoryKindCadenceResourceBase-51]
	_ = x[MemoryKindCadenceResourceSize-52]
	_ = x[MemoryKindCadenceEventBase-53]
	_ = x[MemoryKindCadenceEventSize-54]
	_ = x[MemoryKindCadenceContractBase-55]
	_ = x[MemoryKindCadenceContractSize-56]
	_ = x[MemoryKindCadenceEnumBase-57]
	_ = x[MemoryKindCadenceEnumSize-58]
	_ = x[MemoryKindRawString-59]
	_ = x[MemoryKindAddressLocation-60]
	_ = x[MemoryKindBytes-61]
	_ = x[MemoryKindVariable-62]
	_ = x[MemoryKindValueToken-63]
	_ = x[MemoryKindSyntaxToken-64]
	_ = x[MemoryKindSpaceToken-65]
	_ = x[MemoryKindProgram-66]
	_ = x[MemoryKindIdentifier-67]
	_ = x[MemoryKindArgument-68]
	_ = x[MemoryKindBlock-69]
	_ = x[MemoryKindFunctionBlock-70]
	_ = x[MemoryKindParameter-71]
	_ = x[MemoryKindParameterList-72]
	_ = x[MemoryKindTransfer-73]
	_ = x[MemoryKindMembers-74]
	_ = x[MemoryKindTypeAnnotation-75]
	_ = x[MemoryKindDictionaryEntry-76]
	_ = x[MemoryKindFunctionDeclaration-77]
	_ = x[MemoryKindCompositeDeclaration-78]
	_ = x[MemoryKindInterfaceDeclaration-79]
	_ = x[MemoryKindEnumCaseDeclaration-80]
	_ = x[MemoryKindFieldDeclaration-81]
	_ = x[MemoryKindTransactionDeclaration-82]
	_ = x[MemoryKindImportDeclaration-83]
	_ = x[MemoryKindVariableDeclaration-84]
	_ = x[MemoryKindSpecialFunctionDeclaration-85]
	_ = x[MemoryKindPragmaDeclaration-86]
	_ = x[MemoryKindAssignmentStatement-87]
	_ = x[MemoryKindBreakStatement-88]
	_ = x[MemoryKindContinueStatement-89]
	_ = x[MemoryKindEmitStatement-90]
	_ = x[MemoryKindExpressionStatement-91]
	_ = x[MemoryKindForStatement-92]
	_ = x[MemoryKindIfStatement-93]
	_ = x[MemoryKindReturnStatement-94]
	_ = x[MemoryKindSwapStatement-95]
	_ = x[MemoryKindSwitchStatement-96]
	_ = x[MemoryKindWhileStatement-97]
	_ = x[MemoryKindBooleanExpression-98]
	_ = x[MemoryKindNilExpression-99]
	_ = x[MemoryKindStringExpression-100]
	_ = x[MemoryKindIntegerExpression-101]
	_ = x[MemoryKindFixedPointExpression-102]
	_ = x[MemoryKindArrayExpression-103]
	_ = x[MemoryKindDictionaryExpression-104]
	_ = x[MemoryKindIdentifierExpression-105]
	_ = x[MemoryKindInvocationExpression-106]
	_ = x[MemoryKindMemberExpression-107]
	_ = x[MemoryKindIndexExpression-108]
	_ = x[MemoryKindConditionalExpression-109]
	_ = x[MemoryKindUnaryExpression-110]
	_ = x[MemoryKindBinaryExpression-111]
	_ = x[MemoryKindFunctionExpression-112]
	_ = x[MemoryKindCastingExpression-113]
	_ = x[MemoryKindCreateExpression-114]
	_ = x[MemoryKindDestroyExpression-115]
	_ = x[MemoryKindReferenceExpression-116]
	_ = x[MemoryKindForceExpression-117]
	_ = x[MemoryKindPathExpression-118]
	_ = x[MemoryKindConstantSizedType-119]
	_ = x[MemoryKindDictionaryType-120]
	_ = x[MemoryKindFunctionType-121]
	_ = x[MemoryKindInstantiationType-122]
	_ = x[MemoryKindNominalType-123]
	_ = x[MemoryKindOptionalType-124]
	_ = x[MemoryKindReferenceType-125]
	_ = x[MemoryKindRestrictedType-126]
	_ = x[MemoryKindVariableSizedType-127]
	_ = x[MemoryKindPosition-128]
	_ = x[MemoryKindRange-129]
	_ = x[MemoryKindElaboration-130]
	_ = x[MemoryKindLast-131]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayBaseArrayLengthDictionaryBaseDictionarySizeCompositeBaseCompositeSizeOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberCadenceArrayBaseCadenceArrayLengthCadenceDictionaryBaseCadenceDictionarySizeCadenceStructBaseCadenceStructSizeCadenceResourceBaseCadenceResourceSizeCadenceEventBaseCadenceEventSizeCadenceContractBaseCadenceContractSizeCadenceEnumBaseCadenceEnumSizeRawStringAddressLocationBytesVariableValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 56, 67, 81, 95, 108, 121, 129, 132, 136, 145, 154, 169, 178, 199, 222, 241, 253, 266, 272, 291, 310, 329, 352, 375, 395, 413, 433, 452, 472, 490, 501, 516, 527, 540, 556, 570, 580, 593, 609, 627, 648, 669, 686, 703, 722, 741, 757, 773, 792, 811, 826, 841, 850, 865, 870, 878, 888, 899, 909, 916, 926, 934, 939, 952, 961, 974, 982, 989, 1003, 1018, 1037, 1057, 1077, 1096, 1112, 1134, 1151, 1170, 1196, 1213, 1232, 1246, 1263, 1276, 1295, 1307, 1318, 1333, 1346, 1361, 1375, 1392, 1405, 1421, 1438, 1458, 1473, 1493, 1513, 1533, 1549, 1564, 1585, 1600, 1616, 1634, 1651, 1667, 1684, 1703, 1718, 1732, 1749, 1763, 1775, 1792, 1803, 1815, 1828, 1842, 1859, 1867, 1872, 1883, 1887}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
