// Code generated by "stringer -type=ElementType"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ElementTypeUnknown-0]
	_ = x[ElementTypeProgram-1]
	_ = x[ElementTypeBlock-2]
	_ = x[ElementTypeFunctionBlock-3]
	_ = x[ElementTypeFunctionDeclaration-4]
	_ = x[ElementTypeSpecialFunctionDeclaration-5]
	_ = x[ElementTypeCompositeDeclaration-6]
	_ = x[ElementTypeInterfaceDeclaration-7]
	_ = x[ElementTypeFieldDeclaration-8]
	_ = x[ElementTypeEnumCaseDeclaration-9]
	_ = x[ElementTypePragmaDeclaration-10]
	_ = x[ElementTypeImportDeclaration-11]
	_ = x[ElementTypeTransactionDeclaration-12]
	_ = x[ElementTypeReturnStatement-13]
	_ = x[ElementTypeBreakStatement-14]
	_ = x[ElementTypeContinueStatement-15]
	_ = x[ElementTypeIfStatement-16]
	_ = x[ElementTypeSwitchStatement-17]
	_ = x[ElementTypeWhileStatement-18]
	_ = x[ElementTypeForStatement-19]
	_ = x[ElementTypeEmitStatement-20]
	_ = x[ElementTypeVariableDeclaration-21]
	_ = x[ElementTypeAssignmentStatement-22]
	_ = x[ElementTypeSwapStatement-23]
	_ = x[ElementTypeExpressionStatement-24]
	_ = x[ElementTypeBoolExpression-25]
	_ = x[ElementTypeNilExpression-26]
	_ = x[ElementTypeIntegerExpression-27]
	_ = x[ElementTypeFixedPointExpression-28]
	_ = x[ElementTypeArrayExpression-29]
	_ = x[ElementTypeDictionaryExpression-30]
	_ = x[ElementTypeIdentifierExpression-31]
	_ = x[ElementTypeInvocationExpression-32]
	_ = x[ElementTypeMemberExpression-33]
	_ = x[ElementTypeIndexExpression-34]
	_ = x[ElementTypeConditionalExpression-35]
	_ = x[ElementTypeUnaryExpression-36]
	_ = x[ElementTypeBinaryExpression-37]
	_ = x[ElementTypeFunctionExpression-38]
	_ = x[ElementTypeStringExpression-39]
	_ = x[ElementTypeCastingExpression-40]
	_ = x[ElementTypeCreateExpression-41]
	_ = x[ElementTypeDestroyExpression-42]
	_ = x[ElementTypeReferenceExpression-43]
	_ = x[ElementTypeForceExpression-44]
	_ = x[ElementTypePathExpression-45]
}

const _ElementType_name = "ElementTypeUnknownElementTypeProgramElementTypeBlockElementTypeFunctionBlockElementTypeFunctionDeclarationElementTypeSpecialFunctionDeclarationElementTypeCompositeDeclarationElementTypeInterfaceDeclarationElementTypeFieldDeclarationElementTypeEnumCaseDeclarationElementTypePragmaDeclarationElementTypeImportDeclarationElementTypeTransactionDeclarationElementTypeReturnStatementElementTypeBreakStatementElementTypeContinueStatementElementTypeIfStatementElementTypeSwitchStatementElementTypeWhileStatementElementTypeForStatementElementTypeEmitStatementElementTypeVariableDeclarationElementTypeAssignmentStatementElementTypeSwapStatementElementTypeExpressionStatementElementTypeBoolExpressionElementTypeNilExpressionElementTypeIntegerExpressionElementTypeFixedPointExpressionElementTypeArrayExpressionElementTypeDictionaryExpressionElementTypeIdentifierExpressionElementTypeInvocationExpressionElementTypeMemberExpressionElementTypeIndexExpressionElementTypeConditionalExpressionElementTypeUnaryExpressionElementTypeBinaryExpressionElementTypeFunctionExpressionElementTypeStringExpressionElementTypeCastingExpressionElementTypeCreateExpressionElementTypeDestroyExpressionElementTypeReferenceExpressionElementTypeForceExpressionElementTypePathExpression"

var _ElementType_index = [...]uint16{0, 18, 36, 52, 76, 106, 143, 174, 205, 232, 262, 290, 318, 351, 377, 402, 430, 452, 478, 503, 526, 550, 580, 610, 634, 664, 689, 713, 741, 772, 798, 829, 860, 891, 918, 944, 976, 1002, 1029, 1058, 1085, 1113, 1140, 1168, 1198, 1224, 1249}

func (i ElementType) String() string {
	if i >= ElementType(len(_ElementType_index)-1) {
		return "ElementType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ElementType_name[_ElementType_index[i]:_ElementType_index[i+1]]
}
